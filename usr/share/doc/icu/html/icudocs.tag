<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index">API</docanchor>
  </compound>
  <compound kind="file">
    <name>alphaindex.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>alphaindex_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <class kind="class">AlphabeticIndex</class>
    <class kind="struct">AlphabeticIndex::Record</class>
    <class kind="struct">AlphabeticIndex::Bucket</class>
    <member kind="enumeration">
      <name>UAlphabeticIndexLabelType</name>
      <anchorfile>alphaindex_8h.html</anchorfile>
      <anchor>a969464092cba264934f2c66c7c621dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ALPHAINDEX_NORMAL</name>
      <anchorfile>alphaindex_8h.html</anchorfile>
      <anchor>a969464092cba264934f2c66c7c621dc8a6ee9675a8a4432d02dc01e14ffa87f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ALPHAINDEX_UNDERFLOW</name>
      <anchorfile>alphaindex_8h.html</anchorfile>
      <anchor>a969464092cba264934f2c66c7c621dc8a2791d4f2a9a1290fb284188a2cc739f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ALPHAINDEX_INFLOW</name>
      <anchorfile>alphaindex_8h.html</anchorfile>
      <anchor>a969464092cba264934f2c66c7c621dc8ae6f5d073e12f88885456163e0ccc83f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ALPHAINDEX_OVERFLOW</name>
      <anchorfile>alphaindex_8h.html</anchorfile>
      <anchor>a969464092cba264934f2c66c7c621dc8a02c6fddd6b884489283aa056871a3f24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>appendable.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>appendable_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">Appendable</class>
    <class kind="class">UnicodeStringAppendable</class>
  </compound>
  <compound kind="file">
    <name>basictz.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>basictz_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="timezone_8h" name="timezone.h" local="yes" imported="no">unicode/timezone.h</includes>
    <includes id="tzrule_8h" name="tzrule.h" local="yes" imported="no">unicode/tzrule.h</includes>
    <includes id="tztrans_8h" name="tztrans.h" local="yes" imported="no">unicode/tztrans.h</includes>
    <class kind="class">BasicTimeZone</class>
  </compound>
  <compound kind="file">
    <name>bms.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>bms_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <member kind="typedef">
      <type>void</type>
      <name>UCD</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a14f9e43aeb102d7d728d4e14bf4bc49b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct BMS</type>
      <name>BMS</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a1590a1f5f8051f0996dfddd4131d307f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UCD *</type>
      <name>ucd_open</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a35c00e7aacd736c42c722d32d79ade80</anchor>
      <arglist>(UCollator *coll, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>ucd_close</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>ac3f6886c656edb2f20b766058c34531c</anchor>
      <arglist>(UCD *ucd)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UCollator *</type>
      <name>ucd_getCollator</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>aa27cdc9cb357b05770273f09df5f0555</anchor>
      <arglist>(UCD *ucd)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>ucd_freeCache</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>adc8b9769d98b198c09b586056fe286e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>ucd_flushCache</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>ae2e5d015ba1fe45a3b62314016ff8a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI BMS *</type>
      <name>bms_open</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>ab8223f8dba9dd98fba364c96d0ac0df4</anchor>
      <arglist>(UCD *ucd, const UChar *pattern, int32_t patternLength, const UChar *target, int32_t targetLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>bms_close</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a16322812145a772ce956199ff07bbd1d</anchor>
      <arglist>(BMS *bms)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UBool</type>
      <name>bms_empty</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a8f3065ec3172eaf7d6612211ea728ef1</anchor>
      <arglist>(BMS *bms)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UCD *</type>
      <name>bms_getData</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>a3a558073174b435209fdf3c312c9d619</anchor>
      <arglist>(BMS *bms)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UBool</type>
      <name>bms_search</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>afd1f73840d3ac44ab10b066e1aeec02f</anchor>
      <arglist>(BMS *bms, int32_t offset, int32_t *start, int32_t *end)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>bms_setTargetString</name>
      <anchorfile>bms_8h.html</anchorfile>
      <anchor>aa9e626d8e00681389916ec6fea984339</anchor>
      <arglist>(BMS *bms, const UChar *target, int32_t targetLength, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bmsearch.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>bmsearch_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <includes id="colldata_8h" name="colldata.h" local="yes" imported="no">unicode/colldata.h</includes>
    <class kind="class">BoyerMooreSearch</class>
  </compound>
  <compound kind="file">
    <name>brkiter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>brkiter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="chariter_8h" name="chariter.h" local="yes" imported="no">unicode/chariter.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="ubrk_8h" name="ubrk.h" local="yes" imported="no">unicode/ubrk.h</includes>
    <includes id="strenum_8h" name="strenum.h" local="yes" imported="no">unicode/strenum.h</includes>
    <includes id="utext_8h" name="utext.h" local="yes" imported="no">unicode/utext.h</includes>
    <includes id="umisc_8h" name="umisc.h" local="yes" imported="no">unicode/umisc.h</includes>
    <class kind="class">BreakIterator</class>
  </compound>
  <compound kind="file">
    <name>bytestream.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>bytestream_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="std__string_8h" name="std_string.h" local="yes" imported="no">unicode/std_string.h</includes>
    <class kind="class">ByteSink</class>
    <class kind="class">CheckedArrayByteSink</class>
    <class kind="class">StringByteSink</class>
  </compound>
  <compound kind="file">
    <name>bytestrie.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>bytestrie_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ustringtrie_8h" name="ustringtrie.h" local="yes" imported="no">unicode/ustringtrie.h</includes>
    <class kind="class">BytesTrie</class>
    <class kind="class">BytesTrie::State</class>
    <class kind="class">BytesTrie::Iterator</class>
  </compound>
  <compound kind="file">
    <name>calendar.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>calendar_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="timezone_8h" name="timezone.h" local="yes" imported="no">unicode/timezone.h</includes>
    <includes id="ucal_8h" name="ucal.h" local="yes" imported="no">unicode/ucal.h</includes>
    <includes id="umisc_8h" name="umisc.h" local="yes" imported="no">unicode/umisc.h</includes>
    <class kind="class">Calendar</class>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UFieldResolutionTable</name>
      <anchorfile>calendar_8h.html</anchorfile>
      <anchor>ab9f6041161064a1936388e94e9788fe2</anchor>
      <arglist>[12][8]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>caniter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>caniter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">CanonicalIterator</class>
    <member kind="define">
      <type>#define</type>
      <name>CANITER_SKIP_ZEROES</name>
      <anchorfile>caniter_8h.html</anchorfile>
      <anchor>acce620fe9bc17fed20e14e1597a8a0b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chariter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>chariter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">ForwardCharacterIterator</class>
    <class kind="class">CharacterIterator</class>
  </compound>
  <compound kind="file">
    <name>choicfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>choicfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="fieldpos_8h" name="fieldpos.h" local="yes" imported="no">unicode/fieldpos.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <includes id="messagepattern_8h" name="messagepattern.h" local="yes" imported="no">unicode/messagepattern.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">ChoiceFormat</class>
  </compound>
  <compound kind="file">
    <name>coleitr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>coleitr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="tblcoll_8h" name="tblcoll.h" local="yes" imported="no">unicode/tblcoll.h</includes>
    <includes id="ucoleitr_8h" name="ucoleitr.h" local="yes" imported="no">unicode/ucoleitr.h</includes>
    <class kind="class">CollationElementIterator</class>
    <member kind="typedef">
      <type>struct UCollationElements</type>
      <name>UCollationElements</name>
      <anchorfile>coleitr_8h.html</anchorfile>
      <anchor>a5f2296c3961afacfbba2a5ee850ca1d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>coll.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>coll_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <includes id="normlzr_8h" name="normlzr.h" local="yes" imported="no">unicode/normlzr.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="uniset_8h" name="uniset.h" local="yes" imported="no">unicode/uniset.h</includes>
    <includes id="umisc_8h" name="umisc.h" local="yes" imported="no">unicode/umisc.h</includes>
    <includes id="uiter_8h" name="uiter.h" local="yes" imported="no">unicode/uiter.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <class kind="class">Collator</class>
    <class kind="class">CollatorFactory</class>
  </compound>
  <compound kind="file">
    <name>colldata.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>colldata_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <class kind="class">CEList</class>
    <class kind="class">StringList</class>
    <class kind="class">CollData</class>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BUFFER_SIZE</name>
      <anchorfile>colldata_8h.html</anchorfile>
      <anchor>a14fa824bf994f0e193fdf507563cfc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CELIST_BUFFER_SIZE</name>
      <anchorfile>colldata_8h.html</anchorfile>
      <anchor>a2f4144735e5ee545ac5bba7320048b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRING_LIST_BUFFER_SIZE</name>
      <anchorfile>colldata_8h.html</anchorfile>
      <anchor>abfdbb46f1d99b8e3fc04bc6fb2f5e12b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>curramt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>curramt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="measure_8h" name="measure.h" local="yes" imported="no">unicode/measure.h</includes>
    <includes id="currunit_8h" name="currunit.h" local="yes" imported="no">unicode/currunit.h</includes>
    <class kind="class">CurrencyAmount</class>
  </compound>
  <compound kind="file">
    <name>currpinf.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>currpinf_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">CurrencyPluralInfo</class>
  </compound>
  <compound kind="file">
    <name>currunit.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>currunit_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="measunit_8h" name="measunit.h" local="yes" imported="no">unicode/measunit.h</includes>
    <class kind="class">CurrencyUnit</class>
  </compound>
  <compound kind="file">
    <name>datefmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>datefmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="udat_8h" name="udat.h" local="yes" imported="no">unicode/udat.h</includes>
    <includes id="calendar_8h" name="calendar.h" local="yes" imported="no">unicode/calendar.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <class kind="class">DateFormat</class>
  </compound>
  <compound kind="file">
    <name>dbbi.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>dbbi_8h</filename>
    <includes id="rbbi_8h" name="rbbi.h" local="yes" imported="no">unicode/rbbi.h</includes>
    <member kind="typedef">
      <type>RuleBasedBreakIterator</type>
      <name>DictionaryBasedBreakIterator</name>
      <anchorfile>dbbi_8h.html</anchorfile>
      <anchor>a49ac7fc38ecc81fc0edd8d7a50b95c8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dcfmtsym.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dcfmtsym_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uchar_8h" name="uchar.h" local="yes" imported="no">unicode/uchar.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="unum_8h" name="unum.h" local="yes" imported="no">unicode/unum.h</includes>
    <class kind="class">DecimalFormatSymbols</class>
  </compound>
  <compound kind="file">
    <name>decimfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>decimfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="dcfmtsym_8h" name="dcfmtsym.h" local="yes" imported="no">unicode/dcfmtsym.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="fpositer_8h" name="fpositer.h" local="yes" imported="no">unicode/fpositer.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <class kind="class">DecimalFormat</class>
  </compound>
  <compound kind="file">
    <name>dtfmtsym.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dtfmtsym_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="calendar_8h" name="calendar.h" local="yes" imported="no">unicode/calendar.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="ures_8h" name="ures.h" local="yes" imported="no">unicode/ures.h</includes>
    <class kind="class">DateFormatSymbols</class>
  </compound>
  <compound kind="file">
    <name>dtintrv.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>dtintrv_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">DateInterval</class>
  </compound>
  <compound kind="file">
    <name>dtitvfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dtitvfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ucal_8h" name="ucal.h" local="yes" imported="no">unicode/ucal.h</includes>
    <includes id="smpdtfmt_8h" name="smpdtfmt.h" local="yes" imported="no">unicode/smpdtfmt.h</includes>
    <includes id="dtintrv_8h" name="dtintrv.h" local="yes" imported="no">unicode/dtintrv.h</includes>
    <includes id="dtitvinf_8h" name="dtitvinf.h" local="yes" imported="no">unicode/dtitvinf.h</includes>
    <includes id="dtptngen_8h" name="dtptngen.h" local="yes" imported="no">unicode/dtptngen.h</includes>
    <class kind="class">DateIntervalFormat</class>
    <class kind="struct">DateIntervalFormat::PatternInfo</class>
  </compound>
  <compound kind="file">
    <name>dtitvinf.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dtitvinf_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="udat_8h" name="udat.h" local="yes" imported="no">unicode/udat.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="ucal_8h" name="ucal.h" local="yes" imported="no">unicode/ucal.h</includes>
    <includes id="dtptngen_8h" name="dtptngen.h" local="yes" imported="no">unicode/dtptngen.h</includes>
    <class kind="class">DateIntervalInfo</class>
  </compound>
  <compound kind="file">
    <name>dtptngen.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dtptngen_8h</filename>
    <includes id="datefmt_8h" name="datefmt.h" local="yes" imported="no">unicode/datefmt.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="udat_8h" name="udat.h" local="yes" imported="no">unicode/udat.h</includes>
    <includes id="udatpg_8h" name="udatpg.h" local="yes" imported="no">unicode/udatpg.h</includes>
    <class kind="class">DateTimePatternGenerator</class>
  </compound>
  <compound kind="file">
    <name>dtrule.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>dtrule_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">DateTimeRule</class>
  </compound>
  <compound kind="file">
    <name>errorcode.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>errorcode_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">ErrorCode</class>
  </compound>
  <compound kind="file">
    <name>fieldpos.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>fieldpos_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">FieldPosition</class>
  </compound>
  <compound kind="file">
    <name>fmtable.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>fmtable_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <class kind="class">Formattable</class>
  </compound>
  <compound kind="file">
    <name>format.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>format_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="fmtable_8h" name="fmtable.h" local="yes" imported="no">unicode/fmtable.h</includes>
    <includes id="fieldpos_8h" name="fieldpos.h" local="yes" imported="no">unicode/fieldpos.h</includes>
    <includes id="fpositer_8h" name="fpositer.h" local="yes" imported="no">unicode/fpositer.h</includes>
    <includes id="parsepos_8h" name="parsepos.h" local="yes" imported="no">unicode/parsepos.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <class kind="class">Format</class>
  </compound>
  <compound kind="file">
    <name>fpositer.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>fpositer_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="fieldpos_8h" name="fieldpos.h" local="yes" imported="no">unicode/fieldpos.h</includes>
    <includes id="umisc_8h" name="umisc.h" local="yes" imported="no">unicode/umisc.h</includes>
    <class kind="class">FieldPositionIterator</class>
  </compound>
  <compound kind="file">
    <name>gregocal.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>gregocal_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="calendar_8h" name="calendar.h" local="yes" imported="no">unicode/calendar.h</includes>
    <class kind="class">GregorianCalendar</class>
  </compound>
  <compound kind="file">
    <name>icuplug.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>icuplug_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UPLUG_TOKEN</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a9ebfab37dc49e05e92c2855d9f535499</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UPLUG_NAME_MAX</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a997e2042a74e315546a530cfcfa2c689</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>UPlugTokenReturn</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a06027633088210b16f97fe8808354690</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UPlugTokenReturn(</type>
      <name>UPlugEntrypoint</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a18fc2c181bbf63f8c09bbb6fd180f4da</anchor>
      <arglist>)(UPlugData *plug, UPlugReason reason, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>struct UPlugData</type>
      <name>UPlugData</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a8ab87ad6fbdd4ebaeb84be954deeefe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UPlugReason</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1bbc55ed156cb76a839cb73c03b37e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_REASON_QUERY</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1bbc55ed156cb76a839cb73c03b37e51a9bd7f50a704eba1e0dac10ea2a9de8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_REASON_LOAD</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1bbc55ed156cb76a839cb73c03b37e51a33a9555aa913e2962b4d12b775cd51e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_REASON_UNLOAD</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1bbc55ed156cb76a839cb73c03b37e51a4f4e402d6a3de8486c642ba3ed708b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_REASON_COUNT</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1bbc55ed156cb76a839cb73c03b37e51a1ad486aa416e71df0b1932ff75cf46f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UPlugLevel</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_LEVEL_INVALID</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9ca07af9c4da9ef4dda7756ecb3ce0e39ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_LEVEL_UNKNOWN</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9ca859ce6b48afa0293b7efd40c10b2c1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_LEVEL_LOW</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9cafa33c66cbc81f460ff15a344988bf40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_LEVEL_HIGH</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9caa8959468203b731fe6976ca4cfa696e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPLUG_LEVEL_COUNT</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aea40d2ad75165edeca98e5ba28fccf9ca2ce23f95ec3831d2740c3f953cf485da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>uplug_setPlugNoUnload</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>abc59916f8d1180e77b2f01205ca90a17</anchor>
      <arglist>(UPlugData *plug, UBool dontUnload)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>uplug_setPlugLevel</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a9830ef26823832a39d2c3dffdcbef281</anchor>
      <arglist>(UPlugData *plug, UPlugLevel level)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UPlugLevel</type>
      <name>uplug_getPlugLevel</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aab6021810a76f5c42f9fe2f8685d0c6f</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UPlugLevel</type>
      <name>uplug_getCurrentLevel</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>ad6a61f0b3fb05e0bb7126a37a3c61140</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UErrorCode</type>
      <name>uplug_getPlugLoadStatus</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>ad366a4ecdf5ddd687a1eaec1199247ef</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>uplug_setPlugName</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a95386f5867fb8ec22d9ee1df103bc140</anchor>
      <arglist>(UPlugData *plug, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI const char *</type>
      <name>uplug_getPlugName</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aa7bf3679f660dc8bf72dba7368c8ac83</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI const char *</type>
      <name>uplug_getSymbolName</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>ad6cd449cc88f64a8b30f9d6903eda453</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI const char *</type>
      <name>uplug_getLibraryName</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a9661b29056783e2fbec1a16edf7df541</anchor>
      <arglist>(UPlugData *plug, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void *</type>
      <name>uplug_getLibrary</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a1783cb510c12bf6afd1de56acdcd7df4</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void *</type>
      <name>uplug_getContext</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aca9f3ab38d160726d8901b6e637c0a48</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>uplug_setContext</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a52257b1c0a3f5f00e33114a34f71b6e2</anchor>
      <arglist>(UPlugData *plug, void *context)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI const char *</type>
      <name>uplug_getConfiguration</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a80983c998cf9576621a0601140785ac4</anchor>
      <arglist>(UPlugData *plug)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UPlugData *</type>
      <name>uplug_nextPlug</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>aa6992e665fdcea0371ed4370d0ce94f6</anchor>
      <arglist>(UPlugData *prior)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UPlugData *</type>
      <name>uplug_loadPlugFromEntrypoint</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a9a599ff66b2458395bf5522a5522b27a</anchor>
      <arglist>(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI UPlugData *</type>
      <name>uplug_loadPlugFromLibrary</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>afac8be8d299f3cf9277b581c3e83641c</anchor>
      <arglist>(const char *libName, const char *sym, const char *config, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>U_CAPI void</type>
      <name>uplug_removePlug</name>
      <anchorfile>icuplug_8h.html</anchorfile>
      <anchor>a4885fe10c3fcac3ddc17e8b17998844a</anchor>
      <arglist>(UPlugData *plug, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>idna.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>idna_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="bytestream_8h" name="bytestream.h" local="yes" imported="no">unicode/bytestream.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <includes id="uidna_8h" name="uidna.h" local="yes" imported="no">unicode/uidna.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">IDNA</class>
    <class kind="class">IDNAInfo</class>
    <member kind="variable">
      <type>class U_COMMON_API</type>
      <name>IDNAInfo</name>
      <anchorfile>idna_8h.html</anchorfile>
      <anchor>a92177fef0d908f3a4d4eb7b31d2c4394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LayoutEngine.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LayoutEngine_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <class kind="class">LayoutEngine</class>
  </compound>
  <compound kind="file">
    <name>LEFontInstance.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LEFontInstance_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <class kind="class">LECharMapper</class>
    <class kind="class">LEFontInstance</class>
  </compound>
  <compound kind="file">
    <name>LEGlyphStorage.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LEGlyphStorage_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <class kind="class">LEGlyphStorage</class>
  </compound>
  <compound kind="file">
    <name>LELanguages.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LELanguages_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <member kind="enumeration">
      <name>LanguageCodes</name>
      <anchorfile>LELanguages_8h.html</anchorfile>
      <anchor>afa2c1f49af4f2efd2b34142bd9fd6a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>afkLanguageCode</name>
      <anchorfile>LELanguages_8h.html</anchorfile>
      <anchor>afa2c1f49af4f2efd2b34142bd9fd6a23a18c7dcedf6eac4ae25b657bb673ed9b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LEScripts.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LEScripts_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <member kind="enumeration">
      <name>ScriptCodes</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cansScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5aa28b0d73d319b999dfeef8fcefc4f45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>yiiiScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5aecc063c8021c7a87688515039038e068</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>braiScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5a3413d6eba5e7c604201c8ee095ce7df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hrktScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5a3769d3d92635670fb39a1932c2bd0c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bugiScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5acf566429e42aabbc2e00afaa5ca04ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>baliScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5a043675e92c1cf99986c34cdf3e926a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cariScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5a4fffd1ee03f3237589dfca6dbe155d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>armiScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5a3fc51e857d1104072acb94d593631883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bamuScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5ae67980bac1b9e054ba54a194e05bef22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bassScriptCode</name>
      <anchorfile>LEScripts_8h.html</anchorfile>
      <anchor>a042276b5cad94888c45fe47c4b62f0b5abb84f7629f6bbe4e6c688d733fbe66ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LESwaps.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LESwaps_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">LETypes.h</includes>
    <class kind="class">LESwaps</class>
    <member kind="define">
      <type>#define</type>
      <name>SWAPW</name>
      <anchorfile>LESwaps_8h.html</anchorfile>
      <anchor>ad8428b09ef55071a177a40090b02583d</anchor>
      <arglist>(value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWAPL</name>
      <anchorfile>LESwaps_8h.html</anchorfile>
      <anchor>ab399b3d20f67865ecd8b5db950ada400</anchor>
      <arglist>(value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LETypes.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layout/</path>
    <filename>LETypes_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">LEPoint</class>
    <member kind="define">
      <type>#define</type>
      <name>LE_GLYPH_MASK</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a36727a4822eb76ed78f48352ddb12067</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_GLYPH_SHIFT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae0bffd05a05d43cb9f883a1be9521655</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SUB_FONT_MASK</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>aed9c45d8afdd2dc19bbe0d69472dca82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SUB_FONT_SHIFT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a016a3f9670ca4538de765c7ee6784c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_CLIENT_MASK</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>adaa949f0597bb0d10ecee7b9dcce0382</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_CLIENT_SHIFT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a06da8d6dacc5324d839a782e400c0a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_GET_GLYPH</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a9e58eb571624c708aea2ddd9879b5096</anchor>
      <arglist>(gid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_GET_SUB_FONT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a1dcaf601d6861f10db3477ed473b8f2f</anchor>
      <arglist>(gid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_GET_CLIENT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae7be92dca35966b88097eeb488d23219</anchor>
      <arglist>(gid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SET_GLYPH</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>afd75c2289b4c8df37c37f01bd7ffc108</anchor>
      <arglist>(gid, glyph)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SET_SUB_FONT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a091eaab517254a06b5d91413f28aacd2</anchor>
      <arglist>(gid, font)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SET_CLIENT</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a5a2aaadb2653a87e20ce844e71825282</anchor>
      <arglist>(gid, client)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_ARRAY_SIZE</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a936b93d83fa1ea74c0e7348680cb1eac</anchor>
      <arglist>(array)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_MAKE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a8da8e4737fa6f1ec2c1fcfedc9a589f0</anchor>
      <arglist>(a, b, c, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_SUCCESS</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>aca04b2e2a70b237171c03237e328eeba</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE_FAILURE</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a337d510b146a0d8676ed426ee087112b</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>le_int32</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a3ae79f31399d76e3055d2a2745bd0d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>le_uint32</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a8ed46f4fc717cf0a94de62efe109ecae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>le_int16</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a3fa12fe9989aaa9578ea857c29f869a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>le_uint16</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a4d16715b42bdd9be2fa3b6ca600641ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>le_int8</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ad834ff3606a9f714fbb07533865db4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>le_uint8</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a9fbc3ea31db88ab0f10a595c864d385f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>le_bool</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a4b77bc254d0e88fdabffde9c03e6728f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>le_uint32</type>
      <name>LETag</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a9e22a06bf2336b583b317287cb94fcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>le_uint16</type>
      <name>TTGlyphID</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>aabc1ddc6511aa25a2ae84aca366014b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>le_uint32</type>
      <name>LEGlyphID</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae440e077586bced1a0d1c534643ffc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UChar</type>
      <name>LEUnicode16</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a64b40b70953d1a691c05c26bdbb96e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UChar32</type>
      <name>LEUnicode32</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a25ed173b2a50d1ab11df41caf054fdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UChar</type>
      <name>LEUnicode</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a903cb689308cdef41500411d096a2c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct LEPoint</type>
      <name>LEPoint</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a4e9de943c95006d17b088d25b7860d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum LEErrorCode</type>
      <name>LEErrorCode</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a8f6ef36abe4f965686815b5bdcae4c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LETableTags</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ACNT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a173e0fd93374dc9127e6ac0e7b3a2449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_AVAR_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682afcf9d0efce6097694ac16ba6b4f4a8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BASE_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a164b6ca117ef376bb9216f38777f5039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BDAT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ac81f0b28828a7672c491d4520a5a49b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BHED_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a617dcfca6b1092e9161b163f0bfa8244</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BLOC_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ae768c604ac505928ad0d68a601f3d027</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BSLN_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a2ac891510afae248e6bb8ca7caeceeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CFF__TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ae961dd5785452a699f2eb91a7ae68b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CMAP_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a40e169c4c72bfb3bd9b0a726ec99e802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CVAR_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a882b8f3d4211551fe5d2301280dc32fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CVT__TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a8d34ac61921e88ad38896e18da395ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_DSIG_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a2810f2ad834fe6126a85109b29e335ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_EBDT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a7d3a7ff1d01d32bbce99472d90155479</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_EBLC_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a14befb8fe24e5bd9bb55a71d013f9f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_EBSC_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a53a8fda07585b39854f1ee803459a8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FDSC_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ab882a29c044069099907e64915e640d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FEAT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682aec64f5f8d75272d7d716eba68b281a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FMTX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a508432cb637a60c90db48d0ff9063d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FPGM_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a8d8aa33d006a428d9bf9caa34c3db7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FVAR_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682acce6df51f3eb0e9a19794cc61723dea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GASP_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a9a2625f7de013841b1f9fede826fe14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GDEF_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682acb0e7ba28ea6a8a1f428149f7b6d44b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GLYF_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a567753bbd128230c834f5c4c572c9302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GPOS_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682af4a3b8f0a83981de8cc7e3fd332da598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GSUB_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682aa8e0b1da4376ca6822e7518d59346ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_GVAR_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ad0938ae4eeb27791217fa2132af8f313</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HDMX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a677baecf2f3585e229904bb1f9a230c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HEAD_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a199515b7435c0bd2a4548c2d2df05978</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HHEA_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682afc9c7b61575f543d70b34d7a7c63e3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HMTX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ab6d704c937f91a2258b1e1bd4c735d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HSTY_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a119049d3f7cd263eb9b09ac06c90449b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JUST_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a959e5b436b9a234a610d554d4e6c5880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JSTF_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a9bd31c1db047c7d4cda8a7f1fd08c61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_KERN_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682aed6b75c4898b894df8b193006c9cfca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LCAR_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682aaf6e02b62a90a50d4f80e193d63c854c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LOCA_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682aae3ba2433bd65ff53d911fa4b1e245ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LTSH_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682af95f2135071ce341bc31aae30b179caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAXP_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a067a278fc0a9b95e80a51f88129c9916</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MORT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a598427ebc1fcd030b89f37529c76a432</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MORX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a47a0a59bda4e600eed39f433cae74e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NAME_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a7f30f0ea164b6cdfe0ff6378613423ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_OPBD_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a4ec5760d1a491b71cee4b62f4a215893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_OS_2_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a89f450a0c7e6c7218971f0db7933e3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PCLT_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a9e8ee2498721d5b31133a77bba8109ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_POST_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a86356cd46cb60628fb6df82f0bd6499d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PREP_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a18e575b8fab6ad2b4db23f83c60455cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PROP_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a7c82af8bbe663376bb2b42dde521bc03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TRAK_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ab7bc229c4ab3c7a8378ddb261f448807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VDMX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a802abd4057e253ca65a1b579f24651e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VHEA_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682ac443c75e8a8f675922db242cf4a686cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VMTX_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a2385e216bfa1043d60294167f3347676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VORG_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682a3c4877c2913936fd37474c3468129fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ZAPF_TABLE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae9b2f4f3cee39cf3b69e7f05dbc7f682abb77361ccf4d617c6a11a62df1790f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LEFeatureTags</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_AALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0dae42d806afae72a7703d20c0d3bd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ABVF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8b0a3f2f1e77384ea69d92929c19c13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ABVM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa89757ccb97ca2f2a29f4b2e8821cb56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ABVS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa83580f6142fe1ae635b7519c1825d1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_AFRC_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa114a4966320bda82fba805c7897a5481</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_AKHN_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3e3832041d32bcfe4efa40609ffe579a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BLWF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa7c4454161d916f300f7a0dc19ef80b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BLWM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0359c419c1ca3b8d5b8d09507c68da17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_BLWS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa14501c73c3d56d78fa60e796b51ddd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caabc08a440285ce6c673f751d8a6257a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CASE_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaee5ce8acdcb851f149194939075a4d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CCMP_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaca1b353e8b7544225710cc05eb17a6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CJCT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3d583996707ef443798c8115d8acd537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CLIG_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caac79769c6b8dd934597991f4e633f71ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CPSP_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa9159f0bc0b531340fc72295859ad036e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CSWH_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa4508425c65a96b1efba2b88e56263726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_CURS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa1f767798f6b58ce9fd618fde2d20fcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_C2SC_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caace69429387a45ca50bd57eb3cb838fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_C2PC_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0744c70b8e6757425b07566bd0e1386b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_DIST_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa72e70847bf61c249330d80341cb71be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_DLIG_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaa14ba4372758ba178fa93be099ecf259</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_DNOM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caae7eec08bd1717eb6610fdb5cb758f17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_EXPT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caac6610896da1cfa5409ee9b377d089884</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8218b2348d2e61dec1215aae857c615b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FIN2_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caafd43c93e5e8609299f288f384cb0d741</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FIN3_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8e8936c7cfcba2de1db9392022165f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FINA_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8fa97450cddb53aa193c31950f93d076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FRAC_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caab871e6545a42a593a90485bec503dc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FWID_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa4825208c4782eb7d618c0ad6d00ac65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HALF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8e5737d9ec5b454b9519d210a61b8e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HALN_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa1b830a25c3e050631780f803be75c75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa971317021a502368768332e7f51ca67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HIST_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caab09736d01424a4dd7d83f1426599fcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HKNA_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaf88b3f6adc7a8a9f87f2866e3a72f903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HLIG_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa87c723f825ede42fd9e9059fa9cdce76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HNGL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa6930e025e47be487849fdb6c0ecb1ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_HWID_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caab4c05d387937e223f1798b6fa053f910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INIT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaf25643e18e44aacb6337e45b63d516d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ISOL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa30d0f880407d889d5cf9a9f0a3aaa57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ITAL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3e58a1791b8639b09d91b215d6325995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa31eb5d6d80181bb98d1265992b739131</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JP78_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa204cd2cae9c9502422479367a926ce2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JP83_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa34abdf0436a92ca1e194a8e77f419dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_JP90_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caad4240bf175553eeb627acffab43cbfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_KERN_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8789186639e4727c70f332d64a7f15cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LFBD_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caafd89019276e973c45771ab53016bf6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LIGA_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caabb99bb5b1e9633f8be0b20098f9df767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LJMO_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaabb1e51a87c0316f2007ce1e395a8bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LNUM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3da9e6dbb6b5d56d08554ffb16c2837e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_LOCL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3f6ab6ec130c82e247e8b0f61b8ec267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MARK_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa877d279d76def9f829f64e7536533b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MED2_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa7f1ec36569cdca913bdd25bcc12835fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MEDI_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa75542f13fbab23494ef174f20e81a9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MGRK_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caafd856eedba543367be8c83bd83ec985c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MKMK_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caac3036a2950cae5cc2b47b880bc3001e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MSET_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caacba8e00821cccb7d9f16d9970630b308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa9f3cbb06ec4127f90399286208cd3ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NLCK_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa30940f62c672c3eb4a152d57dd057c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NUKT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa15c1dac121e67c769c84851f687f6283</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NUMR_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa5305a0b37915bbd08a767909133e97aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ONUM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caab7d8f46c231e05a487aaf685f59d6f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_OPBD_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaaa8b5e15f121e6bf9bdfcd19c31bc630</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ORDN_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa47cf3db7486f21298916e7f22f924c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ORNM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa1e82547293a89be5a63fd97ac7e77592</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8e71dadc599f33d83549c706372952fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PCAP_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa31dc283edcb354549bf168062f112892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PNUM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa97e9c325e334978a8c5e235209876a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PREF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaf123ec0354b9df2bd1847ce73ee0b4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PRES_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa1b7caa81c90d9b3582edfec5f6ec3220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PSTF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caacf0cda1ae04ffebc64b2a19e5322218f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PSTS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa4f77a7bc57a90a7e64e6e16f20563725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_PWID_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caae1cfd03476716253c35e0c411b6782c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_QWID_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa8ac06e34d40d04ffeb367156b440e5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RAND_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0b63e6dc8f4db81c3306a414d310966d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RLIG_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa6b7f6ab356ec14b27b3ef1632d74a152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RPHF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa387f5fcdcede767f5287e0e611bef6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RKRF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caae426bbe1787af1826ccd3a086a24d09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RTBD_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa2a577c9c566ead3fb973991d5a98be74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RTLA_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa2c5582cda4bf60bfb7b4b829021edafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_RUBY_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa93e5cb652c696d48fa903b937295194b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa87c221c20db17e141aa1ff0f85aae100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SINF_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caacc79b29b7a98e5d4cb702aa1ef43d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SIZE_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caae313c08e5a81e1175da42a1be1e2a997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SMCP_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa9d10f1d073b2548df7f64a484587ce37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SMPL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa820e1e769c342e96272b7b8302ab8bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS01_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0bf18fb59994f8bb186d79a617512924</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS02_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caad509c36cd4631d92cdd283c4b2b64494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS03_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa2f2ad11912c28227427952c8a768c399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS04_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa5b98596d8318605bf8acef47719cd5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS05_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa9535467eaa2cfd8bff47c088f6d20b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS06_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caabb1a506e980b2a69971111b4c477f24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS07_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaaf8b965d163c075002f86ba046f56ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS08_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caafaf1759c409462b54355566299954d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS09_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa515cd908377e25df50c4e4ac80b87f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS10_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa389022ac87cb4c07bcb05d3eaf1db576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS11_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa07bf2c2faaa3d40877f9cd5fd8bfb07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS12_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa5ba1716aebbf4a5cc4ddc7414c7ee66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS13_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa6ba711ce7b16bd63718f1a9d2c09ec53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS14_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaded355ba63dbd403b9a3b8ecbc6238e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS15_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa187f8305dd3d4eee4e260a589cdccd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS16_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa63885ee43eda66167f0f25a759c5568d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS17_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa92ebe9721d07986e071f39b6ddf1efb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS18_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caabfcf9d9b1bccbe7a0634c51fdb550070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS19_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaba64c76169c7da0352f1ce3b3a20a716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SS20_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3d17368ec98505097b9dc3b0c7ea1ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SUBS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa2e3de2d4fec852bde033dec932664e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SUPS_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa622220e182d8cc0dfefae9a5a563b0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_SWSH_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caad6fa3a25ffc2321890d0fcf09c2fb83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TITL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa96532b9ba48b7d4320806e4254724723</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TJMO_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa90ebdbd229fc9eec2777a53c516dd2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TNAM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa0497ab483f6f2e65e74bf3598d203219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TNUM_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaa25bc0ab70c3a4b4120195e0511aa1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TRAD_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaaa15d4fd64673d3ae8f7214bdd3be54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_TWID_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caac459216ace8b06ae5f12088639c18d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_UNIC_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caad07aeeaac4b1ff596886ec78d9f29a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VALT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaffdfe51c715c8ba61965ca429e8c8fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VATU_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa3d1420b217140339165b2a4b604d4f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VERT_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa4aaa87db5dedae491d13cd8bb3f6ec0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VHAL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caae07f294f438957a3147b7486d82c2993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VJMO_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaa79df988efebccbb73782cd4c5bcf420</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VKNA_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa2612410230fdd0e5a99d502a90985438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VKRN_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caac4b6d90c4f213d9d771a1ce2bb18ea85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VPAL_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caaeca5182a662485a1ca14e544113cba1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_VRT2_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa72c2a8715718e4dc862923cc12f9ee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ZERO_FEATURE_TAG</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>ae5731a50608371fcd5f3c8acacb481caa468c84770e0b71d2a938bf15a92c14a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LEErrorCode</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NO_SUBFONT_WARNING</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934af01d1467eab52342071db804bb7c1d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NO_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934a04f5475334a016c6653b896b4ac85a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_ILLEGAL_ARGUMENT_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934a057757a0a9473ea91c35b43fa34ccae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MEMORY_ALLOCATION_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934ade7696535e69f93f059a42f0bc5c7841</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INDEX_OUT_OF_BOUNDS_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934ab495f9fb7ff04ef2e828c985aa018193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_NO_LAYOUT_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934a6ce2d42b67f5dfe46e6812aa18fa707a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INTERNAL_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934abe24672ae5d125dfb6ce50d2b87f3861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_FONT_FILE_NOT_FOUND_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934adb9b8c069bbccc422aa6dddad3c3f0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MISSING_FONT_TABLE_ERROR</name>
      <anchorfile>LETypes_8h.html</anchorfile>
      <anchor>a2f75d3bb5abf7f0a71adbf00826e1934a4b9021cad798a4bc7261619cd6de4ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>localpointer.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>localpointer_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
  </compound>
  <compound kind="file">
    <name>locdspnm.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>locdspnm_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="uscript_8h" name="uscript.h" local="yes" imported="no">unicode/uscript.h</includes>
    <includes id="uldnames_8h" name="uldnames.h" local="yes" imported="no">unicode/uldnames.h</includes>
    <class kind="class">LocaleDisplayNames</class>
  </compound>
  <compound kind="file">
    <name>locid.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>locid_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="putil_8h" name="putil.h" local="yes" imported="no">unicode/putil.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="strenum_8h" name="strenum.h" local="yes" imported="no">unicode/strenum.h</includes>
    <class kind="class">Locale</class>
  </compound>
  <compound kind="file">
    <name>measfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>measfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <class kind="class">MeasureFormat</class>
  </compound>
  <compound kind="file">
    <name>measunit.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>measunit_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="fmtable_8h" name="fmtable.h" local="yes" imported="no">unicode/fmtable.h</includes>
    <class kind="class">MeasureUnit</class>
  </compound>
  <compound kind="file">
    <name>measure.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>measure_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="fmtable_8h" name="fmtable.h" local="yes" imported="no">unicode/fmtable.h</includes>
    <class kind="class">Measure</class>
  </compound>
  <compound kind="file">
    <name>messagepattern.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>messagepattern_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">MessagePattern</class>
    <class kind="class">MessagePattern::Part</class>
    <member kind="define">
      <type>#define</type>
      <name>UMSGPAT_NO_NUMERIC_VALUE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>af8a7d74f8813a30c41f063dde64e3c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UMessagePatternApostropheMode</type>
      <name>UMessagePatternApostropheMode</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a56aa1f898bc4cb898a0cb2facb19b258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UMessagePatternPartType</type>
      <name>UMessagePatternPartType</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a26bb77f47a6057af80c25d97bf2a2595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UMessagePatternArgType</type>
      <name>UMessagePatternArgType</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a3f22f44bff63324c2a6591e7a7dde523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMessagePatternApostropheMode</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>af6e0757e0eb81c980b01ee5d68a9978b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_APOS_DOUBLE_OPTIONAL</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>af6e0757e0eb81c980b01ee5d68a9978ba67b6ac40cab95b17ecd559d24f1066c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_APOS_DOUBLE_REQUIRED</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>af6e0757e0eb81c980b01ee5d68a9978ba947d8779e9c59baf35a5eb82d8327d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMessagePatternPartType</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_MSG_START</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a4bd3165108d25c0aabaaa3715105efff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_MSG_LIMIT</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a981fcd6e08cc32f6844f1ebebe735add</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_SKIP_SYNTAX</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42ae8bd3978e3b14fa1b6918946420a262d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_INSERT_CHAR</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a0c93d5325ec8fbf16b4084e262d27c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_REPLACE_NUMBER</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42ac4387c3e4c2f1ccf8ba85c4c7ebf607f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_START</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42aa628d48a636ed1f2e919fbbf40ef973c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_LIMIT</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a6a3ee80a2a43880edda7c8e0ef40a37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_NUMBER</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a8af70d71e2c979c8d4e961681a4810de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_NAME</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42aa43b050de6dc11607370eced59f633cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_TYPE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a242bbe84918cbae58ebb7d092d547d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_STYLE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42ad33534e042bb62a80863ce5d4e3bfbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_SELECTOR</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a4c5bcf896e840fe14ab96ec6883fe413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_INT</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42ad850e66569eff3e9ffef20759d93b1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_PART_TYPE_ARG_DOUBLE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a020e83c308fc5d1b2b4a7029cc3d9b42a98883b70d5ed087231e24e92fbe8c574</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMessagePatternArgType</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_TYPE_NONE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103a419f02d51dc27433115e3b6715fbe3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_TYPE_SIMPLE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103a83d34af9ec6acd74a3e44b32b46c760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_TYPE_CHOICE</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103ae9806dab1d5f2143ad7df93025173095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_TYPE_PLURAL</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103a7066f3f8f4176fb06e6fab5c95869ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_TYPE_SELECT</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a2929f87500a04fd66021e3fda6c1f103a37134f17547a6466760b723e45a2f20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_NAME_NOT_NUMBER</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a7b6fc83818b6e89ef39f116bfd0d9dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMSGPAT_ARG_NAME_NOT_VALID</name>
      <anchorfile>messagepattern_8h.html</anchorfile>
      <anchor>a99fb83031ce9923c84392b4e92f956b5a7086b0b8fe7c4867c8df719f45928a50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>msgfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>msgfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="messagepattern_8h" name="messagepattern.h" local="yes" imported="no">unicode/messagepattern.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="plurfmt_8h" name="plurfmt.h" local="yes" imported="no">unicode/plurfmt.h</includes>
    <includes id="plurrule_8h" name="plurrule.h" local="yes" imported="no">unicode/plurrule.h</includes>
    <class kind="class">MessageFormat</class>
    <class kind="class">MessageFormat::PluralSelectorProvider</class>
    <class kind="class">MessageFormat::DummyFormat</class>
    <member kind="typedef">
      <type>struct UHashtable</type>
      <name>UHashtable</name>
      <anchorfile>msgfmt_8h.html</anchorfile>
      <anchor>a6c890111dda4b555e2a2ef52178b5129</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>normalizer2.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>normalizer2_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uniset_8h" name="uniset.h" local="yes" imported="no">unicode/uniset.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="unorm2_8h" name="unorm2.h" local="yes" imported="no">unicode/unorm2.h</includes>
    <class kind="class">Normalizer2</class>
    <class kind="class">FilteredNormalizer2</class>
  </compound>
  <compound kind="file">
    <name>normlzr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>normlzr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="chariter_8h" name="chariter.h" local="yes" imported="no">unicode/chariter.h</includes>
    <includes id="normalizer2_8h" name="normalizer2.h" local="yes" imported="no">unicode/normalizer2.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="unorm_8h" name="unorm.h" local="yes" imported="no">unicode/unorm.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">Normalizer</class>
  </compound>
  <compound kind="file">
    <name>numfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>numfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <includes id="unum_8h" name="unum.h" local="yes" imported="no">unicode/unum.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <class kind="class">NumberFormat</class>
    <class kind="class">NumberFormatFactory</class>
    <class kind="class">SimpleNumberFormatFactory</class>
  </compound>
  <compound kind="file">
    <name>numsys.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>numsys_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">NumberingSystem</class>
    <member kind="define">
      <type>#define</type>
      <name>NUMSYS_NAME_CAPACITY</name>
      <anchorfile>numsys_8h.html</anchorfile>
      <anchor>afcae10b787a42eccd892e1b341f200f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParagraphLayout.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layoutex/layout/</path>
    <filename>ParagraphLayout_8h</filename>
    <includes id="uscript_8h" name="uscript.h" local="yes" imported="no">unicode/uscript.h</includes>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">layout/LETypes.h</includes>
    <includes id="LEFontInstance_8h" name="LEFontInstance.h" local="yes" imported="no">layout/LEFontInstance.h</includes>
    <includes id="LayoutEngine_8h" name="LayoutEngine.h" local="yes" imported="no">layout/LayoutEngine.h</includes>
    <includes id="ubidi_8h" name="ubidi.h" local="yes" imported="no">unicode/ubidi.h</includes>
    <includes id="brkiter_8h" name="brkiter.h" local="yes" imported="no">unicode/brkiter.h</includes>
    <includes id="RunArrays_8h" name="RunArrays.h" local="yes" imported="no">layout/RunArrays.h</includes>
    <class kind="class">ParagraphLayout</class>
    <class kind="class">ParagraphLayout::Line</class>
    <class kind="class">ParagraphLayout::VisualRun</class>
    <class kind="struct">ParagraphLayout::StyleRunInfo</class>
  </compound>
  <compound kind="file">
    <name>parseerr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>parseerr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">UParseError</class>
  </compound>
  <compound kind="file">
    <name>parsepos.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>parsepos_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">ParsePosition</class>
  </compound>
  <compound kind="file">
    <name>platform.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/build/common/unicode/</path>
    <filename>platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>UCLN_NO_AUTO_CLEANUP</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ac4121ee78080b33f679decd1d6a465d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_DIRENT_H</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ad0181c704c81fb831e53eb64471e450b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_INTTYPES_H</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a12231197136b14909071ff67cc018855</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IOSTREAM_SOURCE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a93840015af510e7896410e1c1e5f62e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_STD_STRING</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a624afe6647d050134086f0d698f6d320</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_LIB_SUFFIX_C_NAME</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ad36c6ee643c5c6717f5ca0979d0b6865</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_LIB_SUFFIX_C_NAME_STRING</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a02aed1bea710d5e4660224426ad990b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_LIB_SUFFIX</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a0d415938877c18d6ee3fe93b13d5c5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_INT8_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a5051ecf45acca213b18f823923219e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_UINT8_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a1edf5d97723062e61a597fa3be010c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_INT16_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a3573bb375257def55a38cd11639eaf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_UINT16_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>af296000645c83a448c5e24d5e6c5afea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_INT32_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ab9794f839bb33a2b1d535ba2dbdd138e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_UINT32_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>abcd60c96017bf30d3c442cc09544850c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_INT64_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ab0d568f466537833d890bc011a64ba93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_UINT64_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ae1e8ea77f844a9882514a4be9f78325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_NAMESPACE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a125c03c5d7aa1016e6cb585cbcee77d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_BIG_ENDIAN</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a427930203a10fd614e4c8bb3809c01ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ICU_USE_THREADS</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a12fe07b4e320a21c5e507deebdb7b13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DEBUG</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a6c52ccf93af09c326e3159bd0612b966</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_RELEASE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a7a069e81a186f1e489379665fced7f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DISABLE_RENAMING</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>aa5b13ad0bb8a635c3f76ef40d1bf6ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_OVERRIDE_CXX_ALLOCATION</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a9ebf67ac651933234388f16add656f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_PLACEMENT_NEW</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a0f8af19e82b45be1de86ad402c164541</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ENABLE_TRACING</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>afaef0298cdba8c61df451aee5187e6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ENABLE_DYLOAD</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>af5b1515cddf1cb38cb291c4fd95be04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CHECK_DYLOAD</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ac0b4b25375192306e3a1218852900524</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DEFAULT_SHOW_DRAFT</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>af609f762c11f3241e4bf4690219e3815</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_WCHAR_H</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>ad94b7bccb609111f733a5deb7e778c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SIZEOF_WCHAR_T</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a9d7490781b9ae8c2767933925a99d399</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_WCSCPY</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a46c13c1212478a6c8b6e0a8194ef49bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GNUC_UTF16_STRING</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a62cbcce920b734697432774123215dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DECLARE_UTF16</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a785588c277fab8dc509115efe8dd864f</anchor>
      <arglist>(string)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_NL_LANGINFO_CODESET</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a7705a5cf710effd5cbca1615d62c9d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NL_LANGINFO_CODESET</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a1018c83a041e717c269c50bf1724bf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TZSET</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a0f15d18ad73f184ac89bb28a9bc0f367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TZNAME</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a41c3ae9863e6afd796c7f9820b7ff10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_MMAP</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a4c651ce398c37fa61def6dd11ee243b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_POPEN</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>aa6a5ba62642aae2756641aab50226a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_EXPORT</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a7d78411159504c2d6770763f924a1792</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_EXPORT2</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a72bf6d8ec0640a37b1915e5d853b2016</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IMPORT</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a4099e2ee510ce74ddacfc2010306b8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_INLINE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a640c3a986901e3824818119b71f25f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ALIGN_CODE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a13f03038f26c97ab622b357d31e17d08</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_GCC_ATOMICS</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a2c1c26dcb160c8ef61bb0e5bfbd0d83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MAKE</name>
      <anchorfile>platform_8h.html</anchorfile>
      <anchor>a7b0370ea92c7a467556085afadaa7e3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>playout.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layoutex/layout/</path>
    <filename>playout_8h</filename>
    <includes id="ubidi_8h" name="ubidi.h" local="yes" imported="no">unicode/ubidi.h</includes>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">layout/LETypes.h</includes>
    <includes id="plruns_8h" name="plruns.h" local="yes" imported="no">plruns.h</includes>
    <member kind="typedef">
      <type>void</type>
      <name>pl_paragraph</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a1906d8b1227129a7717a45b98eb47e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pl_line</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>aa0299717d429526413f527ecb3627d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pl_visualRun</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a82426ed114f524fa6a398faea9901377</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pl_paragraph *</type>
      <name>pl_create</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a4195eb2ddfa32c7219ebaed3d4875122</anchor>
      <arglist>(const LEUnicode chars[], le_int32 count, const pl_fontRuns *fontRuns, const pl_valueRuns *levelRuns, const pl_valueRuns *scriptRuns, const pl_localeRuns *localeRuns, UBiDiLevel paragraphLevel, le_bool vertical, LEErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_close</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a90e50608ad6e47f5a83c1ec0611a025c</anchor>
      <arglist>(pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>le_bool</type>
      <name>pl_isComplex</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a816f537e2657d704050ff520b87a6d4b</anchor>
      <arglist>(const LEUnicode chars[], le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiLevel</type>
      <name>pl_getParagraphLevel</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a5ee8d68a8f564eff4b8f0bd42fb35d99</anchor>
      <arglist>(pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>pl_getTextDirection</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>add47cbf4a408161d9c7ac2aba113dc0e</anchor>
      <arglist>(pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getAscent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a60b7db040812caf999affa47a64c8654</anchor>
      <arglist>(const pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getDescent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>acb99fd0b7613a1b70ef15607cc17503f</anchor>
      <arglist>(const pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLeading</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ad29d243c96551da13e46dea7762be767</anchor>
      <arglist>(const pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_reflow</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a89b26f7697f7c793171572c3c27e6097</anchor>
      <arglist>(pl_paragraph *paragraph)</arglist>
    </member>
    <member kind="function">
      <type>pl_line *</type>
      <name>pl_nextLine</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ab3b43c93c0f7012eb6cc1cfd59fb9f82</anchor>
      <arglist>(pl_paragraph *paragraph, float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_closeLine</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a3853bf7172907c3751025f5c9231ce50</anchor>
      <arglist>(pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_countLineRuns</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ab04ab230f5a60e45416311deecbe290f</anchor>
      <arglist>(const pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLineAscent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>aba43a634d954754c39a394406f491cb1</anchor>
      <arglist>(const pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLineDescent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a811e06ac49f814c85e1e46a60a9f8ae2</anchor>
      <arglist>(const pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLineLeading</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>aedc3176b255cc9869c53543fe144a600</anchor>
      <arglist>(const pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLineWidth</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a9a6ed76f934db6f5c4c4576587585300</anchor>
      <arglist>(const pl_line *line)</arglist>
    </member>
    <member kind="function">
      <type>const pl_visualRun *</type>
      <name>pl_getLineVisualRun</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ab024a4df5031ed6d0093ae95dc7c898d</anchor>
      <arglist>(const pl_line *line, le_int32 runIndex)</arglist>
    </member>
    <member kind="function">
      <type>const le_font *</type>
      <name>pl_getVisualRunFont</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>afe16471321543e7bc6a131860226e6be</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>pl_getVisualRunDirection</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>afaa30e93bacb05bfda79cedf07c526e9</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getVisualRunGlyphCount</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ac54dfb21ae665198a9b2f07a6f410678</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>const LEGlyphID *</type>
      <name>pl_getVisualRunGlyphs</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a15e2cf7dec87ffa3053b30caef690810</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>pl_getVisualRunPositions</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>aa00ee1dc95e46c926932ed9542d7e770</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>const le_int32 *</type>
      <name>pl_getVisualRunGlyphToCharMap</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>ac37b522b9755fbe1771e90c36cf34946</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getVisualRunAscent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a16872ad2ccab8c3f410355b881bb6bbd</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getVisualRunDescent</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>a0470a240eec7407d7ee691b67417e89d</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getVisualRunLeading</name>
      <anchorfile>playout_8h.html</anchorfile>
      <anchor>af50f9e03efeee3382536ac4a7f73abbe</anchor>
      <arglist>(const pl_visualRun *run)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plruns.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layoutex/layout/</path>
    <filename>plruns_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ubidi_8h" name="ubidi.h" local="yes" imported="no">unicode/ubidi.h</includes>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">layout/LETypes.h</includes>
    <member kind="typedef">
      <type>void</type>
      <name>pl_fontRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a79af9ea9fda0905fa7f4c3af58855f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pl_valueRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a23e5c60496775eecf676b3eb19a577a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pl_localeRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a22705ccd0260b47ed7c5ee361857bb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pl_fontRuns *</type>
      <name>pl_openFontRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>aa5af0880ecaea1fd49dc728ebb7b3660</anchor>
      <arglist>(const le_font **fonts, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type>pl_fontRuns *</type>
      <name>pl_openEmptyFontRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a2ddfd0c10e5598c89f7beb01a27bee05</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_closeFontRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ac2226597ec9889edbfc5eaad938eb04b</anchor>
      <arglist>(pl_fontRuns *fontRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getFontRunCount</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a2ac0c66e22295e79b61539eefce50015</anchor>
      <arglist>(const pl_fontRuns *fontRuns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_resetFontRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>af4dc84434f53e2b0e1bd7d9808d3d29d</anchor>
      <arglist>(pl_fontRuns *fontRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getFontRunLastLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a26eb505063ef781f1e1506fa1986317c</anchor>
      <arglist>(const pl_fontRuns *fontRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getFontRunLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a5229e08d15de1bb3a85514534c96d267</anchor>
      <arglist>(const pl_fontRuns *fontRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>const le_font *</type>
      <name>pl_getFontRunFont</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>afcc037cdb849ee5fe52f134cd7ce4177</anchor>
      <arglist>(const pl_fontRuns *fontRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_addFontRun</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ac23fad014ae915b4e563a7891ad10017</anchor>
      <arglist>(pl_fontRuns *fontRuns, const le_font *font, le_int32 limit)</arglist>
    </member>
    <member kind="function">
      <type>pl_valueRuns *</type>
      <name>pl_openValueRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a444753bbcf6e86b0c5b689fbf1c78765</anchor>
      <arglist>(const le_int32 *values, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type>pl_valueRuns *</type>
      <name>pl_openEmptyValueRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a5fda3dcc72d3845f05c5a5f1e7d75607</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_closeValueRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a90ae2a832133344b704f53021b60c31f</anchor>
      <arglist>(pl_valueRuns *valueRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getValueRunCount</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ad8ed13c97529fd6ed9c6627563865dc4</anchor>
      <arglist>(const pl_valueRuns *valueRuns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_resetValueRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a62bfb3909c1c353b1f5b1b8ed9149661</anchor>
      <arglist>(pl_valueRuns *valueRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getValueRunLastLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>add5cf3bf467ddb2010858d3cbdc26689</anchor>
      <arglist>(const pl_valueRuns *valueRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getValueRunLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>aa84adc796b9d9d321d6c1b9d1207fdc9</anchor>
      <arglist>(const pl_valueRuns *valueRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getValueRunValue</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a0a8af36cde11daece78db9da31d0c1eb</anchor>
      <arglist>(const pl_valueRuns *valueRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_addValueRun</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a021f25f199db15da691bf1c772146eee</anchor>
      <arglist>(pl_valueRuns *valueRuns, le_int32 value, le_int32 limit)</arglist>
    </member>
    <member kind="function">
      <type>pl_localeRuns *</type>
      <name>pl_openLocaleRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>aa2e535069480f4229eacda29e06d6d9e</anchor>
      <arglist>(const char **locales, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type>pl_localeRuns *</type>
      <name>pl_openEmptyLocaleRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a13dca1eec584c75734869d4f713ad6b7</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_closeLocaleRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ac608ae2dcb6af9d164b9c0892a226360</anchor>
      <arglist>(pl_localeRuns *localeRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLocaleRunCount</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>aac6d180ab9156e3b4dcf32429833d91b</anchor>
      <arglist>(const pl_localeRuns *localeRuns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pl_resetLocaleRuns</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a5dca8032536743accd3c350883461723</anchor>
      <arglist>(pl_localeRuns *localeRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLocaleRunLastLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a82e79b11bff08dabb8bcd08804fe29e1</anchor>
      <arglist>(const pl_localeRuns *localeRuns)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_getLocaleRunLimit</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>a4f55da3916f3950fd25eac6492e326ca</anchor>
      <arglist>(const pl_localeRuns *localeRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>pl_getLocaleRunLocale</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ac2e2ce868bd8da03ff8fbb01d3834692</anchor>
      <arglist>(const pl_localeRuns *localeRuns, le_int32 run)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>pl_addLocaleRun</name>
      <anchorfile>plruns_8h.html</anchorfile>
      <anchor>ae21d8951dd8a2ce8a02bf5e37b6ac18d</anchor>
      <arglist>(pl_localeRuns *localeRuns, const char *locale, le_int32 limit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plurfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>plurfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="messagepattern_8h" name="messagepattern.h" local="yes" imported="no">unicode/messagepattern.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="plurrule_8h" name="plurrule.h" local="yes" imported="no">unicode/plurrule.h</includes>
    <class kind="class">PluralFormat</class>
    <class kind="class">PluralFormat::PluralSelector</class>
    <class kind="class">PluralFormat::PluralSelectorAdapter</class>
  </compound>
  <compound kind="file">
    <name>plurrule.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>plurrule_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="format_8h" name="format.h" local="yes" imported="no">unicode/format.h</includes>
    <class kind="class">PluralRules</class>
    <member kind="define">
      <type>#define</type>
      <name>UPLRULES_NO_UNIQUE_VALUE</name>
      <anchorfile>plurrule_8h.html</anchorfile>
      <anchor>ac45294a81116247928355c6dd1bb850c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>putil.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>putil_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IEEE_754</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a811bdd92dac6c777e47039cbd73ea32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FILE_SEP_CHAR</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a4d41826cae0108d7ce4c480c733631c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FILE_ALT_SEP_CHAR</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a86281839c42e8f044313eed5f1417d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_PATH_SEP_CHAR</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a5e053f4748f1e82d84c3bac48b3ccb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FILE_SEP_STRING</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a957d91eea919db7dd317dbaddd4ba090</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FILE_ALT_SEP_STRING</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>aea13f8d98aa39d79cfcf3b9007879139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_PATH_SEP_STRING</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a91afb504ca1d147907144a873fabb3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_getDataDirectory</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a191ab876d121aff107437e6876090647</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_setDataDirectory</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>ab03241e29fc619a4b3f7737e98aa08ef</anchor>
      <arglist>(const char *directory)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uprv_getDefaultCodepage</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>ad8c57f00ead8ef2acedf1cc8f0aa0009</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uprv_getDefaultLocaleID</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a39024c8992985e875a76a48a4f9ae217</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_charsToUChars</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>ad2ba2f88b01ea212f2bfbe2c6b0854a7</anchor>
      <arglist>(const char *cs, UChar *us, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_UCharsToChars</name>
      <anchorfile>putil_8h.html</anchorfile>
      <anchor>a105f24a806d2c849064db0a37ed84a22</anchor>
      <arglist>(const UChar *us, char *cs, int32_t length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pwin32.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>pwin32_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>U_INT64_IS_LONG_LONG</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>aae7951fe9926a47be176726b9bf0a7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_BIG_ENDIAN</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a427930203a10fd614e4c8bb3809c01ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DECLARE_UTF16</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a785588c277fab8dc509115efe8dd864f</anchor>
      <arglist>(string)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_WCHAR_H</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>ad94b7bccb609111f733a5deb7e778c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SIZEOF_WCHAR_T</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a9d7490781b9ae8c2767933925a99d399</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_WCSCPY</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a46c13c1212478a6c8b6e0a8194ef49bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TZSET</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a0f15d18ad73f184ac89bb28a9bc0f367</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TIMEZONE</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a411e825049357b6dde5c9bd9177c6fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TZNAME</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a41c3ae9863e6afd796c7f9820b7ff10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DAYLIGHT</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a28a242dae3ecf48d78d161d93d008745</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_MMAP</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a4c651ce398c37fa61def6dd11ee243b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_POPEN</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>aa6a5ba62642aae2756641aab50226a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_EXPORT</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a7d78411159504c2d6770763f924a1792</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_EXPORT2</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a72bf6d8ec0640a37b1915e5d853b2016</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IMPORT</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>a4099e2ee510ce74ddacfc2010306b8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ALIGN_CODE</name>
      <anchorfile>pwin32_8h.html</anchorfile>
      <anchor>aefc1a28afb95e79d6d164955502c4f9b</anchor>
      <arglist>(val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbbi.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>rbbi_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="brkiter_8h" name="brkiter.h" local="yes" imported="no">unicode/brkiter.h</includes>
    <includes id="udata_8h" name="udata.h" local="yes" imported="no">unicode/udata.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="schriter_8h" name="schriter.h" local="yes" imported="no">unicode/schriter.h</includes>
    <includes id="uchriter_8h" name="uchriter.h" local="yes" imported="no">unicode/uchriter.h</includes>
    <class kind="class">RuleBasedBreakIterator</class>
  </compound>
  <compound kind="file">
    <name>rbnf.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>rbnf_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="coll_8h" name="coll.h" local="yes" imported="no">unicode/coll.h</includes>
    <includes id="dcfmtsym_8h" name="dcfmtsym.h" local="yes" imported="no">unicode/dcfmtsym.h</includes>
    <includes id="fmtable_8h" name="fmtable.h" local="yes" imported="no">unicode/fmtable.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="strenum_8h" name="strenum.h" local="yes" imported="no">unicode/strenum.h</includes>
    <class kind="class">RuleBasedNumberFormat</class>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_RBNF</name>
      <anchorfile>rbnf_8h.html</anchorfile>
      <anchor>a58bcc4332aee7488f85c5adbbb9bbcde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>URBNFRuleSetTag</name>
      <anchorfile>rbnf_8h.html</anchorfile>
      <anchor>a2ef7bd419418b4628b33a7270c11f68d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rbtz.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>rbtz_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="basictz_8h" name="basictz.h" local="yes" imported="no">unicode/basictz.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">RuleBasedTimeZone</class>
  </compound>
  <compound kind="file">
    <name>regex.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>regex_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="utext_8h" name="utext.h" local="yes" imported="no">unicode/utext.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="uregex_8h" name="uregex.h" local="yes" imported="no">unicode/uregex.h</includes>
    <class kind="class">RegexPattern</class>
    <class kind="class">RegexMatcher</class>
    <member kind="define">
      <type>#define</type>
      <name>RegexPatternDump</name>
      <anchorfile>regex_8h.html</anchorfile>
      <anchor>adb99cedafe6d353311aac44514f846be</anchor>
      <arglist>(pat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rep.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>rep_8h</filename>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">Replaceable</class>
  </compound>
  <compound kind="file">
    <name>resbund.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>resbund_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ures_8h" name="ures.h" local="yes" imported="no">unicode/ures.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <class kind="class">ResourceBundle</class>
  </compound>
  <compound kind="file">
    <name>RunArrays.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/layoutex/layout/</path>
    <filename>RunArrays_8h</filename>
    <includes id="LETypes_8h" name="LETypes.h" local="yes" imported="no">layout/LETypes.h</includes>
    <includes id="LEFontInstance_8h" name="LEFontInstance.h" local="yes" imported="no">layout/LEFontInstance.h</includes>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="locid_8h" name="locid.h" local="yes" imported="no">unicode/locid.h</includes>
    <class kind="class">RunArray</class>
    <class kind="class">FontRuns</class>
    <class kind="class">LocaleRuns</class>
    <class kind="class">ValueRuns</class>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL_CAPACITY</name>
      <anchorfile>RunArrays_8h.html</anchorfile>
      <anchor>a5446a5bbb68bb93392b04dfbfa0095af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CAPACITY_GROW_LIMIT</name>
      <anchorfile>RunArrays_8h.html</anchorfile>
      <anchor>a455292ae142c1e3123a29ab245695923</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>schriter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>schriter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="chariter_8h" name="chariter.h" local="yes" imported="no">unicode/chariter.h</includes>
    <includes id="uchriter_8h" name="uchriter.h" local="yes" imported="no">unicode/uchriter.h</includes>
    <class kind="class">StringCharacterIterator</class>
  </compound>
  <compound kind="file">
    <name>search.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>search_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="chariter_8h" name="chariter.h" local="yes" imported="no">unicode/chariter.h</includes>
    <includes id="brkiter_8h" name="brkiter.h" local="yes" imported="no">unicode/brkiter.h</includes>
    <includes id="usearch_8h" name="usearch.h" local="yes" imported="no">unicode/usearch.h</includes>
    <class kind="class">SearchIterator</class>
    <member kind="typedef">
      <type>struct USearch</type>
      <name>USearch</name>
      <anchorfile>search_8h.html</anchorfile>
      <anchor>ab9a54441959795454ae0406609767131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>selfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>selfmt_8h</filename>
    <includes id="messagepattern_8h" name="messagepattern.h" local="yes" imported="no">unicode/messagepattern.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="class">SelectFormat</class>
  </compound>
  <compound kind="file">
    <name>simpletz.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>simpletz_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="basictz_8h" name="basictz.h" local="yes" imported="no">unicode/basictz.h</includes>
    <class kind="class">SimpleTimeZone</class>
  </compound>
  <compound kind="file">
    <name>smpdtfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>smpdtfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="datefmt_8h" name="datefmt.h" local="yes" imported="no">unicode/datefmt.h</includes>
    <class kind="class">SimpleDateFormat</class>
    <class kind="struct">SimpleDateFormat::NSOverride</class>
  </compound>
  <compound kind="file">
    <name>sortkey.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>sortkey_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="coll_8h" name="coll.h" local="yes" imported="no">unicode/coll.h</includes>
    <class kind="class">CollationKey</class>
  </compound>
  <compound kind="file">
    <name>std_string.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>std__string_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_STD_NS</name>
      <anchorfile>std__string_8h.html</anchorfile>
      <anchor>a73e47f5cea79eedc63d611880ea2d75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_STD_NSQ</name>
      <anchorfile>std__string_8h.html</anchorfile>
      <anchor>a09ea9d17cd51b895003ea80a4e07b6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_STD_NS_USE</name>
      <anchorfile>std__string_8h.html</anchorfile>
      <anchor>a7f0911ea6eb0d4d0d1e9549ffe08b575</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strenum.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>strenum_8h</filename>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">StringEnumeration</class>
  </compound>
  <compound kind="file">
    <name>stringpiece.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>stringpiece_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="std__string_8h" name="std_string.h" local="yes" imported="no">unicode/std_string.h</includes>
    <class kind="class">StringPiece</class>
    <member kind="function">
      <type>U_EXPORT UBool</type>
      <name>operator==</name>
      <anchorfile>stringpiece_8h.html</anchorfile>
      <anchor>a7652049cbac0bfeae2cd2aa4514a3352</anchor>
      <arglist>(const StringPiece &amp;x, const StringPiece &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>stringpiece_8h.html</anchorfile>
      <anchor>abf0ccab9536bab551afc07de65eb5d95</anchor>
      <arglist>(const StringPiece &amp;x, const StringPiece &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stsearch.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>stsearch_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="tblcoll_8h" name="tblcoll.h" local="yes" imported="no">unicode/tblcoll.h</includes>
    <includes id="coleitr_8h" name="coleitr.h" local="yes" imported="no">unicode/coleitr.h</includes>
    <includes id="search_8h" name="search.h" local="yes" imported="no">unicode/search.h</includes>
    <class kind="class">StringSearch</class>
  </compound>
  <compound kind="file">
    <name>symtable.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>symtable_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">SymbolTable</class>
  </compound>
  <compound kind="file">
    <name>tblcoll.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tblcoll_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="coll_8h" name="coll.h" local="yes" imported="no">unicode/coll.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <includes id="sortkey_8h" name="sortkey.h" local="yes" imported="no">unicode/sortkey.h</includes>
    <includes id="normlzr_8h" name="normlzr.h" local="yes" imported="no">unicode/normlzr.h</includes>
    <class kind="class">RuleBasedCollator</class>
  </compound>
  <compound kind="file">
    <name>timezone.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>timezone_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="ures_8h" name="ures.h" local="yes" imported="no">unicode/ures.h</includes>
    <includes id="ucal_8h" name="ucal.h" local="yes" imported="no">unicode/ucal.h</includes>
    <class kind="class">TimeZone</class>
  </compound>
  <compound kind="file">
    <name>tmunit.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tmunit_8h</filename>
    <includes id="measunit_8h" name="measunit.h" local="yes" imported="no">unicode/measunit.h</includes>
    <class kind="class">TimeUnit</class>
  </compound>
  <compound kind="file">
    <name>tmutamt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tmutamt_8h</filename>
    <includes id="measure_8h" name="measure.h" local="yes" imported="no">unicode/measure.h</includes>
    <includes id="tmunit_8h" name="tmunit.h" local="yes" imported="no">unicode/tmunit.h</includes>
    <class kind="class">TimeUnitAmount</class>
  </compound>
  <compound kind="file">
    <name>tmutfmt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tmutfmt_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="tmunit_8h" name="tmunit.h" local="yes" imported="no">unicode/tmunit.h</includes>
    <includes id="tmutamt_8h" name="tmutamt.h" local="yes" imported="no">unicode/tmutamt.h</includes>
    <includes id="measfmt_8h" name="measfmt.h" local="yes" imported="no">unicode/measfmt.h</includes>
    <includes id="numfmt_8h" name="numfmt.h" local="yes" imported="no">unicode/numfmt.h</includes>
    <includes id="plurrule_8h" name="plurrule.h" local="yes" imported="no">unicode/plurrule.h</includes>
    <class kind="class">TimeUnitFormat</class>
    <member kind="typedef">
      <type>enum UTimeUnitFormatStyle</type>
      <name>UTimeUnitFormatStyle</name>
      <anchorfile>tmutfmt_8h.html</anchorfile>
      <anchor>a082436426d89a0c7fc83ca94e1e11fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UTimeUnitFormatStyle</name>
      <anchorfile>tmutfmt_8h.html</anchorfile>
      <anchor>ace3ab3a9adff9b70f2e8f153e0f18e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTMUTFMT_FULL_STYLE</name>
      <anchorfile>tmutfmt_8h.html</anchorfile>
      <anchor>ace3ab3a9adff9b70f2e8f153e0f18e3fae9da691edeb42d9fd00f872c5aec0cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTMUTFMT_ABBREVIATED_STYLE</name>
      <anchorfile>tmutfmt_8h.html</anchorfile>
      <anchor>ace3ab3a9adff9b70f2e8f153e0f18e3fa1de2b8fbe4639aecc8b19ec5b7837a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTMUTFMT_FORMAT_STYLE_COUNT</name>
      <anchorfile>tmutfmt_8h.html</anchorfile>
      <anchor>ace3ab3a9adff9b70f2e8f153e0f18e3facb2233346493c90d46d57b2f086b74cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>translit.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>translit_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="utrans_8h" name="utrans.h" local="yes" imported="no">unicode/utrans.h</includes>
    <includes id="strenum_8h" name="strenum.h" local="yes" imported="no">unicode/strenum.h</includes>
    <class kind="class">Transliterator</class>
    <class kind="union">Transliterator::Token</class>
  </compound>
  <compound kind="file">
    <name>tzrule.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tzrule_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="dtrule_8h" name="dtrule.h" local="yes" imported="no">unicode/dtrule.h</includes>
    <class kind="class">TimeZoneRule</class>
    <class kind="class">InitialTimeZoneRule</class>
    <class kind="class">AnnualTimeZoneRule</class>
    <class kind="class">TimeArrayTimeZoneRule</class>
  </compound>
  <compound kind="file">
    <name>tztrans.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>tztrans_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">TimeZoneTransition</class>
  </compound>
  <compound kind="file">
    <name>ubidi.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ubidi_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uchar_8h" name="uchar.h" local="yes" imported="no">unicode/uchar.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_DEFAULT_LTR</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a165ae276878c7a54fd8b067db0d12f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_DEFAULT_RTL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a0b4d6ac752ab7a8a33eb825e9c76683d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_MAX_EXPLICIT_LEVEL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a531b2d2bfa7655df6bf86d1236a1928a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_LEVEL_OVERRIDE</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a5e4049fa946dd8e0a1b3c01e5c1c3711</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_MAP_NOWHERE</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a6bdc9eb61fd6146789e9827bdbded171</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_KEEP_BASE_COMBINING</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a2e022ccd0d2c55a21c2aa233c30ecd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_DO_MIRRORING</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a0b1370dda1e3ad8ef9c94fd28320153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_INSERT_LRM_FOR_NUMERIC</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>adad66f9132bc4e4621427091acfc0f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_REMOVE_BIDI_CONTROLS</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a039000c1e298cbad5909d07a55ca5312</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UBIDI_OUTPUT_REVERSE</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4a10c3aac68ceca1569bac717156cef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_BIDI_CLASS_DEFAULT</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ab74f3e4fed22db8d521e42f6a882b7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UBiDiDirection</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a68a6b5fdcbf80aaa51b5bd39f7f31102</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_LTR</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a68a6b5fdcbf80aaa51b5bd39f7f31102a3378628e1b7851cd6d00e7f74d29f6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_RTL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a68a6b5fdcbf80aaa51b5bd39f7f31102a73e659e3118b58f822cc1384e7fcd8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_MIXED</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a68a6b5fdcbf80aaa51b5bd39f7f31102a5cc55b0dc99fa2ef003c7a8beb00844d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_NEUTRAL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a68a6b5fdcbf80aaa51b5bd39f7f31102a4ec7a06cf7b96d2df5d39ac54765be12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UBiDiReorderingMode</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_DEFAULT</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfac366446a9080bf062aca0080e9effc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_NUMBERS_SPECIAL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa447996fecd0eefb0d12ce247cb511e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_GROUP_NUMBERS_WITH_R</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa0cd75b3d1d8abc971554a2a7d459c6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_RUNS_ONLY</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa103b373c5933dd91cbfb2382b77bde8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_INVERSE_NUMBERS_AS_L</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa6d23bae87c6e629866a3b87e11250e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_INVERSE_LIKE_DIRECT</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa8ca4fe9b9d87e67c37c8a80bed3147aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfa0c426985f03689d0c4a2aade0e48c69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_REORDER_COUNT</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a88693e5a8ad4be974dc90ec6b8db56dfae19ca6f8614a91e49454b21264f6a379</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UBiDiReorderingOption</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4505e4adc8da792501414b770f49f386</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_OPTION_DEFAULT</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4505e4adc8da792501414b770f49f386ae3c7e82fa51ecfccacb2d85fb6dc60fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_OPTION_INSERT_MARKS</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4505e4adc8da792501414b770f49f386a23405ee9a1f1b254cc692132712ef9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_OPTION_REMOVE_CONTROLS</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4505e4adc8da792501414b770f49f386aeeff5ec55e7544a4ee713c53715fc502</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBIDI_OPTION_STREAMING</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4505e4adc8da792501414b770f49f386aa2760cf6aad6086eeca7a022ad9c59d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>UBiDiLevel</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ab2460a19f323ab9787a79a95db91a606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UBiDiDirection</type>
      <name>UBiDiDirection</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a0d13f55bcc7116169db68b10733545f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UBiDi</type>
      <name>UBiDi</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>aeed24292bbed966df93f088bc6791f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UCharDirection</type>
      <name>UBiDiClassCallback</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a77893628988f90ea58198aaac9c6fcea</anchor>
      <arglist>(const void *context, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBiDi *</type>
      <name>ubidi_open</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4b0163f0f98e1c0f8915f1a26813c07f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UBiDi *</type>
      <name>ubidi_openSized</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a3d75a7eb9ecf1d5280dc2807efd64716</anchor>
      <arglist>(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_close</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a3c30f10761d8cfb6974e3b7dc6c35df5</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setInverse</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a836b2eaf83ca712cf28e69cd4ba934f4</anchor>
      <arglist>(UBiDi *pBiDi, UBool isInverse)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ubidi_isInverse</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a794e61b06b5eedaeff7c7e72fa78a8ba</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_orderParagraphsLTR</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ab7b9785b85169b3830034029729c672e</anchor>
      <arglist>(UBiDi *pBiDi, UBool orderParagraphsLTR)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ubidi_isOrderParagraphsLTR</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a612d1977d09d1b30a8a41296a85ccba4</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setReorderingMode</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>afe123acc1196c4d7363f968ca6af6faa</anchor>
      <arglist>(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiReorderingMode</type>
      <name>ubidi_getReorderingMode</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a98a1b2869aab8c9dec5effa7749e0369</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setReorderingOptions</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a25dd2aba9db100133217b9fe76de01de</anchor>
      <arglist>(UBiDi *pBiDi, uint32_t reorderingOptions)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ubidi_getReorderingOptions</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a5186ae76f6abfcbaf700d2dc7625516e</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setContext</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a1e38e9d7036f4aa7cc5aea5a435b3e63</anchor>
      <arglist>(UBiDi *pBiDi, const UChar *prologue, int32_t proLength, const UChar *epilogue, int32_t epiLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setPara</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>abdfe9e113a19dd8521d3b7ac8220fe11</anchor>
      <arglist>(UBiDi *pBiDi, const UChar *text, int32_t length, UBiDiLevel paraLevel, UBiDiLevel *embeddingLevels, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setLine</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ac7d96b281cd6ab2d56900bfdc37c808a</anchor>
      <arglist>(const UBiDi *pParaBiDi, int32_t start, int32_t limit, UBiDi *pLineBiDi, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>ubidi_getDirection</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>af31ec52194764c663c224f5171e95ea3</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>ubidi_getBaseDirection</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>aeb1fd15743833278cc11906cd5a48aef</anchor>
      <arglist>(const UChar *text, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ubidi_getText</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>afc55abde2c543bdd5f4031e75d38bb02</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getLength</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a8f51ac46083e7ce52b6bea4bc7ac14a8</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiLevel</type>
      <name>ubidi_getParaLevel</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a6724e673e9ff8f0ee47bd24e47ceb95a</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_countParagraphs</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a8f4b5bb9a8e37d8065490af4e6825563</anchor>
      <arglist>(UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getParagraph</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a5cd3d78464b8e3b71886a643f70f25ab</anchor>
      <arglist>(const UBiDi *pBiDi, int32_t charIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_getParagraphByIndex</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a62377f811a750130246dfb49c1cc6dc0</anchor>
      <arglist>(const UBiDi *pBiDi, int32_t paraIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiLevel</type>
      <name>ubidi_getLevelAt</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ad363767eacb66359de7c639a722338c8</anchor>
      <arglist>(const UBiDi *pBiDi, int32_t charIndex)</arglist>
    </member>
    <member kind="function">
      <type>const UBiDiLevel *</type>
      <name>ubidi_getLevels</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ae498c62057ff75f31ca8cbdbf9cae4b7</anchor>
      <arglist>(UBiDi *pBiDi, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_getLogicalRun</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>aaa99079b617dcc6c15910558306b7145</anchor>
      <arglist>(const UBiDi *pBiDi, int32_t logicalPosition, int32_t *pLogicalLimit, UBiDiLevel *pLevel)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_countRuns</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a18c2f5cfaf8c8717759d6e0feaa58c99</anchor>
      <arglist>(UBiDi *pBiDi, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>ubidi_getVisualRun</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>ae923ec697e2eb77652fca9f1fcddc894</anchor>
      <arglist>(UBiDi *pBiDi, int32_t runIndex, int32_t *pLogicalStart, int32_t *pLength)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getVisualIndex</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a17696c56f06e1a48270f0ff3b69edd79</anchor>
      <arglist>(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getLogicalIndex</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a95ad84e638be70e73b23809fc132582f</anchor>
      <arglist>(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_getLogicalMap</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a279cb5ce73e8ce2f820fd3c1fb8bb15c</anchor>
      <arglist>(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_getVisualMap</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>af54771dbad2e4988fe9b00e55eede2e2</anchor>
      <arglist>(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_reorderLogical</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a18113b39aa14585407c8f003c0f86d56</anchor>
      <arglist>(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_reorderVisual</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a01009fa9de9e31b124d5e8bdc2cf2a3e</anchor>
      <arglist>(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_invertMap</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>af5d1e5272fb2eec21e89a026fb665610</anchor>
      <arglist>(const int32_t *srcMap, int32_t *destMap, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getProcessedLength</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>abf3d2acd9d73fb4a3a25deb0ebca28d5</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_getResultLength</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a3247782277731ee82cfb3ba700f598a8</anchor>
      <arglist>(const UBiDi *pBiDi)</arglist>
    </member>
    <member kind="function">
      <type>UCharDirection</type>
      <name>ubidi_getCustomizedClass</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a7e2bbf0e64c56a5e53f3e3524865ff76</anchor>
      <arglist>(UBiDi *pBiDi, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_setClassCallback</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a4acd99089d2c4f31495210a5462bcb21</anchor>
      <arglist>(UBiDi *pBiDi, UBiDiClassCallback *newFn, const void *newContext, UBiDiClassCallback **oldFn, const void **oldContext, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubidi_getClassCallback</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a0cafa2a8c29c03918c3a2cdf4ccea778</anchor>
      <arglist>(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_writeReordered</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a26790ff71c59f223ded4047da5626725</anchor>
      <arglist>(UBiDi *pBiDi, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubidi_writeReverse</name>
      <anchorfile>ubidi_8h.html</anchorfile>
      <anchor>a2b0dd2bc3a984509545449d76cb1ed2e</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ubrk.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ubrk_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="utext_8h" name="utext.h" local="yes" imported="no">unicode/utext.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UBRK_DONE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a7c31c1e5091fb47ab85db522c7536252</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_BRK_SAFECLONE_BUFFERSIZE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ab17dc88e0028fd85c622889eea22a6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UBreakIterator</type>
      <name>UBreakIterator</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>adb85bb46d5f93c87098e11deab50bef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UBreakIteratorType</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_CHARACTER</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588ba446d025be7ca2f64dfac303b0a55c0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588ba17772e8ee70d3de4064c71417c574f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_LINE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588ba73e81a0d478daeb2c6de8a63cac1070c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_SENTENCE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588bab1b31cbd0fb0b298b87cb67da729ba62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_TITLE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a026dec40289da8261d787daf3baa588ba3d79f0b0db32243e6b85b0b5036f9831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UWordBreak</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_NONE</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a8229f94661c6289a6497018ef341801a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_NONE_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a54839e74f8aa4ffd4ea7b9d86f3de050</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_NUMBER</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a3ec03137beddd2ce1d611cc7798b6e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_NUMBER_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a82e563b42b89e0a49c097d40a54c8621</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_LETTER</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a945eb6dd49881b36d4e2c9f592d97197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_LETTER_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a66ad49e358ce8a4fba6d6161ec678dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_KANA</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a69f55c4740ce6f96ad9b61d859de201f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_KANA_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a7d507a35a3813629c11340a3f0f10fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_IDEO</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a295f3da24ba9978b5787c1494079c8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_WORD_IDEO_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>af9836cc79482f82ac12eefb1f70b14b9a8097221024f5c65d58951ad488d57474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULineBreakTag</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8de005c411b5e5306850f4246d1d7ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_LINE_SOFT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8de005c411b5e5306850f4246d1d7ccda6a91dd50489f1fbc5c8c32c29fcc3fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_LINE_SOFT_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8de005c411b5e5306850f4246d1d7ccdaef314dd1a053a6f2ab57c06f3a3d5f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_LINE_HARD</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8de005c411b5e5306850f4246d1d7ccdad02d1bfcd98382e53c9e83db37fba492</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_LINE_HARD_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8de005c411b5e5306850f4246d1d7ccdae767435243d44e5a22c1db90dd3a8f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USentenceBreakTag</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad03d8e27f121bcf11eaed0a288786a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_SENTENCE_TERM</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad03d8e27f121bcf11eaed0a288786a71addbcb13addb315fc0814a6fb1284c339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_SENTENCE_TERM_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad03d8e27f121bcf11eaed0a288786a71a650703353df53947eb3b996e3e5239f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_SENTENCE_SEP</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad03d8e27f121bcf11eaed0a288786a71aca695be696e0e48676c109de60bcbbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBRK_SENTENCE_SEP_LIMIT</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad03d8e27f121bcf11eaed0a288786a71af573420e1d53a811d6c5c4a07a4f5c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UBreakIterator *</type>
      <name>ubrk_open</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a4e5fd80d818fb4ec23330d8935b2754d</anchor>
      <arglist>(UBreakIteratorType type, const char *locale, const UChar *text, int32_t textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBreakIterator *</type>
      <name>ubrk_openRules</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a11826cb21213916c2d91579b673d8949</anchor>
      <arglist>(const UChar *rules, int32_t rulesLength, const UChar *text, int32_t textLength, UParseError *parseErr, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBreakIterator *</type>
      <name>ubrk_safeClone</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a6901f59d9c74bc8e16b9994cb1be7679</anchor>
      <arglist>(const UBreakIterator *bi, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubrk_close</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a5e398fb0fe194683a000b3989c041fda</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubrk_setText</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8c8a6679a8ce36ba5d035b99748c8339</anchor>
      <arglist>(UBreakIterator *bi, const UChar *text, int32_t textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubrk_setUText</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ac91bfeb92a3e489e3188f02597f4c9c7</anchor>
      <arglist>(UBreakIterator *bi, UText *text, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_current</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a4f8b67527c5c9d9205a3446506ffeefc</anchor>
      <arglist>(const UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_next</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a17158fccedcf72481eaca61fffab4ce6</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_previous</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a318c950f25ee89a66c989feced3a41f0</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_first</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a2ae638e98af0830b66ff058b48e7dbcd</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_last</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a24ffb5cee86ffe1ee8aa0d53093b352f</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_preceding</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>accaaccc55135961f45541bcbab580f9d</anchor>
      <arglist>(UBreakIterator *bi, int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_following</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a4724e6d07ea2f27b99a1bba60e4ef76c</anchor>
      <arglist>(UBreakIterator *bi, int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ubrk_getAvailable</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a12fc845896682221749f03e7dc21e3e0</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_countAvailable</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a8b587f3b0df1b680f4ca3f1d1f151f7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ubrk_isBoundary</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a701db54fd2c91c07490cb02ebdd54fa6</anchor>
      <arglist>(UBreakIterator *bi, int32_t offset)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_getRuleStatus</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>a4314a5dd63efde9b372ded64b6f0c732</anchor>
      <arglist>(UBreakIterator *bi)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ubrk_getRuleStatusVec</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>acf355cf304090ca6efb10c4318bde45e</anchor>
      <arglist>(UBreakIterator *bi, int32_t *fillInVec, int32_t capacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ubrk_getLocaleByType</name>
      <anchorfile>ubrk_8h.html</anchorfile>
      <anchor>ad95a44383cba60e20188025ab18c09fe</anchor>
      <arglist>(const UBreakIterator *bi, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucal.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ucal_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UCAL_UNKNOWN_ZONE_ID</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a0682edd5dfe37d2abe4bb9fb5a9733d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>UCalendar</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>afb45437aa9182d9fdcd96a2119e1e144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarType</type>
      <name>UCalendarType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>aeb82adf34aef02bbf8812623c2476060</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarDateFields</type>
      <name>UCalendarDateFields</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a28411d3f471b1720fe688466983d2298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarDaysOfWeek</type>
      <name>UCalendarDaysOfWeek</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a550de202361f87c31be2c566ab0f8ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarMonths</type>
      <name>UCalendarMonths</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>abd7f7265f470ed43d9823ae80bb908b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarAMPMs</type>
      <name>UCalendarAMPMs</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>aa43be2256b8b849142434d499a11250c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum USystemTimeZoneType</type>
      <name>USystemTimeZoneType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac2782d4c319d095ed86e4931f49e880a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarDisplayNameType</type>
      <name>UCalendarDisplayNameType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a56a25733a15ea9e894b43d9dcb2b44be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarAttribute</type>
      <name>UCalendarAttribute</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>afd668c58b07e90db871679752528b341</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarLimitType</type>
      <name>UCalendarLimitType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac122fc97b5e965a32c68d288b636caaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCalendarWeekdayType</type>
      <name>UCalendarWeekdayType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5465b37f73d5098a53e0e4b19d4f1ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a80db55a10d0808a9f9b61e105b9d32fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_TRADITIONAL</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a80db55a10d0808a9f9b61e105b9d32fbaf40f59ee818a37ecfa599e89eb0c334d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DEFAULT</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a80db55a10d0808a9f9b61e105b9d32fbab760bad9d085a7a294617c828ef08160</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_GREGORIAN</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a80db55a10d0808a9f9b61e105b9d32fba164278e20451a4f30269beac1a7ee3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarDateFields</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ERA</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a0ddda11f9012d9b033adab7e5d99a8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_YEAR</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a3e2b44660e01084c8b4990f281554ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MONTH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a9546c33a33caefb88822bd22d4667fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEK_OF_YEAR</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912ab4fa05d61c729a269a6b6bad11387eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEK_OF_MONTH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a3585d4fa3f681dbda0e9ac8826e36d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DATE</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a8086caf60ea1b9ca1f3ce590da84869e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DAY_OF_YEAR</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a4269b2063a9d820c4d6a81e573e72a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DAY_OF_WEEK</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912ad922feccd72ca5e2ef90bb74a61f8070</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DAY_OF_WEEK_IN_MONTH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a8ed09799953a8b540f50ae856be93fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_AM_PM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912ad94a5edcb9a6dd1c2480f4da8151bf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_HOUR</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912ac878e7ce810cf85e33b5a2e53e26c590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_HOUR_OF_DAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a022b239bf42bff7814930817c7190b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MINUTE</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a581a19cc0c5ff9ba238088cdb062c861</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SECOND</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a8bf78aa14924fb5eacd123ed11eedb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MILLISECOND</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912abc240c53c10619668e22f5cc08dc9555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ZONE_OFFSET</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a956400c61f7ff988019c663580d4984c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DST_OFFSET</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912adeaf79a310cfb7f9036a431b9ae0ff2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_YEAR_WOY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a581404a7c0401eb1dbb5dc01f0f0ef8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DOW_LOCAL</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912afdf3076e740fbe439f89dd3214f0704b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_EXTENDED_YEAR</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a0612bde412d2c2ca9d3210937cc01f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_JULIAN_DAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912a747a5a465beccf87a42a91f7948d5518</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MILLISECONDS_IN_DAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912afc6b7fa25f397758f03ad799ff057ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_IS_LEAP_MONTH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912adc4087f0cb61ac13578cff55c6ad753e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_FIELD_COUNT</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912adbfdd6e6b1bc1be830c7f1ba29f2c68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DAY_OF_MONTH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a02fe23bf33319052733c00c7a09ea912acba35fb282eacc2434e3229a3f64ef7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarDaysOfWeek</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SUNDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a9db1e73b33252ffcd5d5a4197b68f805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MONDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a5b068ab70005ef07850e561b57d6bdd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_TUESDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4ab64dd41ed18baeb2b150537abe744300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEDNESDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a15a79079833f1119c2ed93edf6b02c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_THURSDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a58049393d8ffb9b243ab7dd46b0b605a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_FRIDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a9ee63f42c2e84d0b6c743ca021097374</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SATURDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a62d9fe551bd48e4141fce52b917119a4a358e7ba575ccb0ef2b531ac7945cff2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarMonths</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_JANUARY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596ad2803ac4940572b4d1fc390861d9759c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_FEBRUARY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596ad9122013c38c7d414c6428fd4d9d8ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MARCH</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596af65658af9cb3b9b829ae218318d8c11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_APRIL</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a5053c7488e7a8b39af59408377d40ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a2c0d943daf44e035240e215d9d52b463</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_JUNE</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a61e354d2e762e2f65cc2241f3860cff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_JULY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a8ca4ce198fa1ea4285d2a2198d418ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_AUGUST</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a892d007d133f3d5d07831fe621b0597b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SEPTEMBER</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596ab0540bee00a697ff57961d1bd58f67da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_OCTOBER</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596afcc006296cc7b9b3b04c9a26c44181c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_NOVEMBER</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a5bf40eb18049fa52944f56f73a56d5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DECEMBER</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a1f72a7edd4372272ab30f84670cd763b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_UNDECIMBER</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>af13a67d4d259962e1840471f3a8e6596a2ee2afdd3972c479165f030634645ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarAMPMs</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a71d1396f68a0ccc8bd7e5e0fe006b6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_AM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a71d1396f68a0ccc8bd7e5e0fe006b6a7a8e263e26565f79225bea76abe8c39633</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_PM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a71d1396f68a0ccc8bd7e5e0fe006b6a7ae95c19de4c6f88c1a5ac28816c2a2c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USystemTimeZoneType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a246d867677ec1a02775072aa0b5b018a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ZONE_TYPE_ANY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a246d867677ec1a02775072aa0b5b018aac426fea7a765899ccfe2f31165292bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ZONE_TYPE_CANONICAL</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a246d867677ec1a02775072aa0b5b018aaba339e618d112c8ccbe6f333e9494d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ZONE_TYPE_CANONICAL_LOCATION</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a246d867677ec1a02775072aa0b5b018aaf7528bf8127f3e48076949c279be6c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarDisplayNameType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae9370947c6da3c8ee5ee034307ac5d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_STANDARD</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae9370947c6da3c8ee5ee034307ac5d03a36a8a634859870566e8b5cc464ce2341</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SHORT_STANDARD</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae9370947c6da3c8ee5ee034307ac5d03a842b1349f0d44070af11a2eef0351785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_DST</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae9370947c6da3c8ee5ee034307ac5d03a89cff48ba2493249328e43c6e93505de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_SHORT_DST</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae9370947c6da3c8ee5ee034307ac5d03a50794c17996d69d2666ce6704dab3a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarAttribute</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a27f00939dd2931f252c5bc6409b83227</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_LENIENT</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a27f00939dd2931f252c5bc6409b83227aeea5fa7f20994cc894b5ba747c2332fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_FIRST_DAY_OF_WEEK</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a27f00939dd2931f252c5bc6409b83227a72d3e8c1713ca82417133ff6eaf50a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MINIMAL_DAYS_IN_FIRST_WEEK</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a27f00939dd2931f252c5bc6409b83227a4d1acaedb5fbcdf78f0ed0c15bf2d0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarLimitType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MINIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5aa274d987e6cb730dc6711a378faa654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_MAXIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5ab80ad3ad8e6242e0c605d853432e3679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_GREATEST_MINIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5a3db8def982b824fa3603182a5c82f4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_LEAST_MAXIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5acb2cdcd3fdff6dbec96db2e2d626ad7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ACTUAL_MINIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5a255825275dfe67f2cd05171c98a0b619</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_ACTUAL_MAXIMUM</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a6e54e12f217d36570b70fafcbb557ca5a0d12baa240dc171eed50cd2148a289e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCalendarWeekdayType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5d1f042c84dc291891c208d4c7dcd933</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEKDAY</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5d1f042c84dc291891c208d4c7dcd933a504468a7025689a67ae0929220cad567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEKEND</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5d1f042c84dc291891c208d4c7dcd933abce2190f0f34ede2ee3915021850d14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEKEND_ONSET</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5d1f042c84dc291891c208d4c7dcd933abee3ccd0c66b3075f5c77681841aea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCAL_WEEKEND_CEASE</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5d1f042c84dc291891c208d4c7dcd933ab60b882dfc55b2706aae4735d3b6e918</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucal_openTimeZoneIDEnumeration</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>aa12068e8d91b210c95c3bfbf6ad46bb3</anchor>
      <arglist>(USystemTimeZoneType zoneType, const char *region, const int32_t *rawOffset, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucal_openTimeZones</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>abbc29eb77035c731c6c5d18b77733069</anchor>
      <arglist>(UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucal_openCountryTimeZones</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>acac88ce8fa1cfb5585d1db7d93566fea</anchor>
      <arglist>(const char *country, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getDefaultTimeZone</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac5243211dec55651f308c34a011eb337</anchor>
      <arglist>(UChar *result, int32_t resultCapacity, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setDefaultTimeZone</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a2544550264fccc52c97b53a2febf29cb</anchor>
      <arglist>(const UChar *zoneID, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getDSTSavings</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a3907928a0963ad035a221f6feb4f62cd</anchor>
      <arglist>(const UChar *zoneID, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>ucal_getNow</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>adb6d89737a72e1b1edf99d65f78b0040</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UCalendar *</type>
      <name>ucal_open</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac9d3d4893f5b22a90edff24bedaf361c</anchor>
      <arglist>(const UChar *zoneID, int32_t len, const char *locale, UCalendarType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_close</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae4402ac532c51fd6206f93fdc51b1dea</anchor>
      <arglist>(UCalendar *cal)</arglist>
    </member>
    <member kind="function">
      <type>UCalendar *</type>
      <name>ucal_clone</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a4febd3ddfcdace16e1c005bd7d17a10c</anchor>
      <arglist>(const UCalendar *cal, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setTimeZone</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae5612988cb9dc282ccda82fda38602b2</anchor>
      <arglist>(UCalendar *cal, const UChar *zoneID, int32_t len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getTimeZoneDisplayName</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>aea22f4437959a297c21793281caea68a</anchor>
      <arglist>(const UCalendar *cal, UCalendarDisplayNameType type, const char *locale, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucal_inDaylightTime</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a0894e66c0e54efaee7d7a74769ef7768</anchor>
      <arglist>(const UCalendar *cal, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setGregorianChange</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a8b0c9820b1d2ccc6fc499766f9867aad</anchor>
      <arglist>(UCalendar *cal, UDate date, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>ucal_getGregorianChange</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac6f9d60d827a403bb3d50accdd9027da</anchor>
      <arglist>(const UCalendar *cal, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getAttribute</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae38dffa3217680e56e30e5d1bca673ab</anchor>
      <arglist>(const UCalendar *cal, UCalendarAttribute attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setAttribute</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ab8e316b5587dc752a9f87ab7f1423af5</anchor>
      <arglist>(UCalendar *cal, UCalendarAttribute attr, int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucal_getAvailable</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a891876cc878c71f1938225622cf279f3</anchor>
      <arglist>(int32_t localeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_countAvailable</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>abb607b7866f13a0330e62ad86049275f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>ucal_getMillis</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a533d4cbb14bcea658867cc19dbf117e7</anchor>
      <arglist>(const UCalendar *cal, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setMillis</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a54e866c1e202544059e92d1ce7cd8853</anchor>
      <arglist>(UCalendar *cal, UDate dateTime, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setDate</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>acca7f62f6e8eb75cabf2dd9f0778f7b4</anchor>
      <arglist>(UCalendar *cal, int32_t year, int32_t month, int32_t date, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_setDateTime</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a8810072e357d43f6d9d4a792ff0be93e</anchor>
      <arglist>(UCalendar *cal, int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucal_equivalentTo</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a4a978d3bd77eb69b173df4c0f07fb619</anchor>
      <arglist>(const UCalendar *cal1, const UCalendar *cal2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_add</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a764bd099486548c088bfe3356a713e0f</anchor>
      <arglist>(UCalendar *cal, UCalendarDateFields field, int32_t amount, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_roll</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a8b72b685f1c8d5decadaf32b22b51a2d</anchor>
      <arglist>(UCalendar *cal, UCalendarDateFields field, int32_t amount, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_get</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a61fc6f963b0cc02d97a26317d1c363be</anchor>
      <arglist>(const UCalendar *cal, UCalendarDateFields field, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_set</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae7652b5273a7de51cd6d2f24927a765a</anchor>
      <arglist>(UCalendar *cal, UCalendarDateFields field, int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucal_isSet</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>acfcbb957b9cea4531d541a8985ab63ce</anchor>
      <arglist>(const UCalendar *cal, UCalendarDateFields field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_clearField</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ae76331aadf36b244b2ab1ad5e4929be7</anchor>
      <arglist>(UCalendar *cal, UCalendarDateFields field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucal_clear</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a434b8c72e2c22018caa3a04a328ad193</anchor>
      <arglist>(UCalendar *calendar)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getLimit</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a5f43bd7f846d9dbc94a9a46af26e7ab7</anchor>
      <arglist>(const UCalendar *cal, UCalendarDateFields field, UCalendarLimitType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucal_getLocaleByType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ad487ddaaac28a622ae2b3cf2383fd3ae</anchor>
      <arglist>(const UCalendar *cal, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucal_getTZDataVersion</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a0ad2dccc88f8b7017d039f1b68ba8996</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getCanonicalTimeZoneID</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a84f79f30804a091f5436ac4e29be0c37</anchor>
      <arglist>(const UChar *id, int32_t len, UChar *result, int32_t resultCapacity, UBool *isSystemID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucal_getType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac3da68a172e0dff2097004c811a49b13</anchor>
      <arglist>(const UCalendar *cal, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucal_getKeywordValuesForLocale</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>ac9f7339dd9f4fbd3463c14721bfee2b7</anchor>
      <arglist>(const char *key, const char *locale, UBool commonlyUsed, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCalendarWeekdayType</type>
      <name>ucal_getDayOfWeekType</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a52650ccf4dae0f42dd82624a94087c61</anchor>
      <arglist>(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getWeekendTransition</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>a173b23a92aadc703aa33f85705af7a06</anchor>
      <arglist>(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucal_isWeekend</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>adca13bcdf7e68c3e4dfad46e56e05f93</anchor>
      <arglist>(const UCalendar *cal, UDate date, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucal_getFieldDifference</name>
      <anchorfile>ucal_8h.html</anchorfile>
      <anchor>afa329a125bf67670736446673dd03290</anchor>
      <arglist>(UCalendar *cal, UDate target, UCalendarDateFields field, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucasemap.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucasemap_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ustring_8h" name="ustring.h" local="yes" imported="no">unicode/ustring.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_TITLECASE_NO_LOWERCASE</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>aab9de6ad843adcbc21001f7f93f1e888</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TITLECASE_NO_BREAK_ADJUSTMENT</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>afc65fa226cac9b8eeef0e877b8a7744e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UCaseMap</type>
      <name>UCaseMap</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a2c127e061c4bc5f4ccc9defbe01f9dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UCaseMap *</type>
      <name>ucasemap_open</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a40df152b19d07dba4cc9d5b3015b27d1</anchor>
      <arglist>(const char *locale, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucasemap_close</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>acf25fdcf78936f8e0567a68962c0ddf8</anchor>
      <arglist>(UCaseMap *csm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucasemap_getLocale</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a3a7a9d9d7dbe7f723d666a9dc1556c6b</anchor>
      <arglist>(const UCaseMap *csm)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ucasemap_getOptions</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a811753309b4eb249429c7a7f86accae1</anchor>
      <arglist>(const UCaseMap *csm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucasemap_setLocale</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a907584719eb4fb3678fcb885c5f06059</anchor>
      <arglist>(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucasemap_setOptions</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a06ddc797846dfd55bc4bd81ff30a5e56</anchor>
      <arglist>(UCaseMap *csm, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const UBreakIterator *</type>
      <name>ucasemap_getBreakIterator</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a2d3ecd2ab71395582ac92e263e0b50e0</anchor>
      <arglist>(const UCaseMap *csm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucasemap_setBreakIterator</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a1928a194cb0d8b6ca3617d61f534cbc5</anchor>
      <arglist>(UCaseMap *csm, UBreakIterator *iterToAdopt, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucasemap_toTitle</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>ab8002df7573b0dbf6e0a19ff3cc09b5d</anchor>
      <arglist>(UCaseMap *csm, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucasemap_utf8ToLower</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a8d14045335e130a16b68213194a04cc0</anchor>
      <arglist>(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucasemap_utf8ToUpper</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a817d31c95e792462407a119b5fdbedc7</anchor>
      <arglist>(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucasemap_utf8ToTitle</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a4ef18fcd15be677e4b17bf70fda02551</anchor>
      <arglist>(UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucasemap_utf8FoldCase</name>
      <anchorfile>ucasemap_8h.html</anchorfile>
      <anchor>a7a3a403ca36e0ff7a4e5ecf821f2583c</anchor>
      <arglist>(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucat.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucat_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ures_8h" name="ures.h" local="yes" imported="no">unicode/ures.h</includes>
    <member kind="typedef">
      <type>UResourceBundle *</type>
      <name>u_nl_catd</name>
      <anchorfile>ucat_8h.html</anchorfile>
      <anchor>aed738919b18b3fd7b151e17bceacec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>u_nl_catd</type>
      <name>u_catopen</name>
      <anchorfile>ucat_8h.html</anchorfile>
      <anchor>afe472e1a9a4c25b22a9f87cec0bbdba2</anchor>
      <arglist>(const char *name, const char *locale, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_catclose</name>
      <anchorfile>ucat_8h.html</anchorfile>
      <anchor>a3e32a3e1448005a25348c3171dcb9ba6</anchor>
      <arglist>(u_nl_catd catd)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>u_catgets</name>
      <anchorfile>ucat_8h.html</anchorfile>
      <anchor>a30ad4812639065de8885401560ad1733</anchor>
      <arglist>(u_nl_catd catd, int32_t set_num, int32_t msg_num, const UChar *s, int32_t *len, UErrorCode *ec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uchar.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uchar_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_UNICODE_VERSION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a93daa836df5a0e99a2e8ee2906097640</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCHAR_MIN_VALUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a84c7cd41819e33fc28e9e42e141d3804</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCHAR_MAX_VALUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a49aa7be70c9ddddedeb3011ff731da71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3f694e48867909fbe555586f2b3565be</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_CN_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a73b5cf593fd2b9113a01fe2680ebd5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LU_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7b373e44a3e2b28fda5348c6a6f67c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LL_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>afee5e0cb9225463b5da4100ec6cef2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LT_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae3fe6c6463fe33e0936a117c2c9d9b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LM_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a73782834a65040eea2e726f1e822197a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LO_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6eb810ada998bd1c3ca1deac46a16c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_MN_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5c9e999af3654c7d4ce6a66076983176</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_ME_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a0463df54d00859819a102b8da2e3496a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_MC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a1e755eda242738f6dc2c07bb415d9bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_ND_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aeae7d4be225afcbe3103ebc5c74bcc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_NL_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a9c7f33d14e264ae304ea97f9d4663542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_NO_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a10918ad07d16f1efe067f1bbe61b614f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_ZS_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>af9d1eb74a598c9962065c52288f3495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_ZL_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ada93781f5c5d70d6df1f56dbb6c733c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_ZP_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a2424f5ef5ad445658343fd3d72a0a437</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_CC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ac9967543aeeb117a693024631aa88fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_CF_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ac9c4ce178b2022b64f0b78e1199968d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_CO_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aa81ed168f22b90e80eb970086d93fc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_CS_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ade0c0652e3d88669ba5046a4192732e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PD_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a9af8ad501c0d63497bffc9c591525bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PS_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a195a4de4bce39a796d57307e8d3b02f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PE_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3b5947f4cfb4651b8241d8fe3400ab5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7b8bd5c65bcbf9e6b108d2265eeca5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PO_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a4d08f25203aea61769e4dd78dd87acb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_SM_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a98f20a44aa0166029aaafbbeda54bcca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_SC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a41b58ac3311ec01c3be814b0e885bcfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_SK_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae157638d64195971c48a703c178e935f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_SO_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ac01bb11b6f03cd01a73d8484cb0d1139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PI_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aabe0e783715b7baa18641ff0dd2c6588</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_PF_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ad73e32d54459e1de9c95da6efd1561b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_L_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3e4a5ff1377d1c531e0fc6070a03f58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_LC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>acb7be5625b2b34f26e492bb375d573f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_M_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>af3b58403cd495ab97ddd788b3af56a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_N_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a118cb5c6256247bbc32aca354d8a7fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_Z_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a2b2b4860edb348255768524e1408f85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_C_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>af30c5f15eee2701d6591d4c62b80f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_P_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a84973d3e336d9858aac0bc31d39ffc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GC_S_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a41a9e680080701b7cc319b480a21a72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NO_NUMERIC_VALUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a0358d9cce8fdd3255867affe2a8b21ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_GET_GC_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6def30b7d6d22c7de63c2a80596ee847</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FOLD_CASE_DEFAULT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7c41915be9809fd815a5c7d581ad1ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FOLD_CASE_EXCLUDE_SPECIAL_I</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a2d074cf9ee160fbcaec63740c4f9689e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UBlockCode</type>
      <name>UBlockCode</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a4c61cfc9b2618d65922c4d3a7777da4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UCharEnumTypeRange</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a91179dc423e3c36314700f25d9c15507</anchor>
      <arglist>(const void *context, UChar32 start, UChar32 limit, UCharCategory type)</arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UEnumCharNamesFn</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50b6e37d674bfb029f256c69178be8ba</anchor>
      <arglist>(void *context, UChar32 code, UCharNameChoice nameChoice, const char *name, int32_t length)</arglist>
    </member>
    <member kind="enumeration">
      <name>UProperty</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_ALPHABETIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a024fdf3509c03b601694289a4ee5e8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BINARY_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aa0043677ce563a0048e0f4c3b2383869</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_ASCII_HEX_DIGIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a5d7ae152624126297a7782befee8eda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BIDI_CONTROL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac3f4218237b962201f9e6c2a7f523d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BIDI_MIRRORED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a72ed372ee7ac1fddb0e7da5d51fae51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DASH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a590a0a55fba6c4e6dd3a0654209b1449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DEFAULT_IGNORABLE_CODE_POINT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a98d438b185732c4de1eb5080e2d914e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DEPRECATED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a92e9bf6d1a755949ea63362691304339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DIACRITIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a49198042b074f5453277afc2ed7cbee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_EXTENDER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199af2f2b4cea267638e42ab25f68d87accb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_FULL_COMPOSITION_EXCLUSION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199afadb9731624715c5aa61079d39fe1512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GRAPHEME_BASE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a7d12dd136327ef119ca89261589f2129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GRAPHEME_EXTEND</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a21ad5a1198cc3a40ee11ab1d2c0fe1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GRAPHEME_LINK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a201fe8e55ec2cadad243c8ada2b20985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_HEX_DIGIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a463b6b2ad85b1ed752f116432a5eae88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_HYPHEN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a544cc8935dd7d43ff98debd3d6e416e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_ID_CONTINUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a64bc02ae54ded6489ff69dadd7c21314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_ID_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199acc16dc3b016bd6b3e50ead592cbe1b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_IDEOGRAPHIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199adc04ccb3a235d3354eb5f216efe83994</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_IDS_BINARY_OPERATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a9d138a77a450fd25e3ca22c93e067b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_IDS_TRINARY_OPERATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aca526417f802a948daee8ef35ca9cf6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_JOIN_CONTROL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac1cbb9080e03d2351b44698ddcf34aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_LOGICAL_ORDER_EXCEPTION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aeed4114446b6e691b781785880ccdf4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_LOWERCASE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199afb9b26d3ccf385a0797c8e01e065a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_MATH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a8c0bf3b6edf5412a7ff417e7c522d22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NONCHARACTER_CODE_POINT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac26a205bd572f7db7cadd899cfcc7bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_QUOTATION_MARK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ab68e69e7abce9b12fe27f9fa4dd8d605</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_RADICAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a561638eb084070f7d30ad03cdb1ccd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SOFT_DOTTED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a18cd0200bd4adeb89e970ed61ebce08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_TERMINAL_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aa7cadf6faeb23e3c485467b9b584c984</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_UNIFIED_IDEOGRAPH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199adf426ef1cbb1e44f8e4b8e250cb5f5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_UPPERCASE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a88973cf8433a7a040f443ae283bce17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_WHITE_SPACE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a18479cfb612231359123f5fdc34dea60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_XID_CONTINUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a4ae0b3975b2b0429d4b619ce8356ee51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_XID_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a23f48682d5355646ceb7b353d7a6575b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CASE_SENSITIVE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae3156debc89072569efeb31a468c3150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_S_TERM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a182d2a8063c369cefeea633e4cef142b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_VARIATION_SELECTOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a397dea03f2274bcbcefbd5c02a8493fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFD_INERT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ad5e33f65b51e39c66f5e5794912c774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFKD_INERT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a651c292dd45821dc6d93b1675eea612a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFC_INERT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ab945a37d358f20e025b6cf5d9ab7ab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFKC_INERT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a27181c676a64b55049a3e3a395feaf1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SEGMENT_STARTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a1200d63bfdb0379aa9cdbe8e14d71a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_PATTERN_SYNTAX</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a205bbd5b37e7ab0a2bd0a90fe6ffe644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_PATTERN_WHITE_SPACE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a2ed22b1528d3a7e683eebb6ac74e10da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_POSIX_ALNUM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ab51921b81e89f16a4c8315c5ae155d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_POSIX_BLANK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ad02178ce9d01eec5269f8265780fbce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_POSIX_GRAPH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a03b9bffe08ccef166e9e446cad93e78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_POSIX_PRINT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ad6e8f26e4c2bc910880612dadb10bfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_POSIX_XDIGIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aff2d4e286ec2c25c8cb993b5899e2ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CASED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a233c3cc6004c23a6913abc7dcd6311bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CASE_IGNORABLE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a75338f94bbfe956670062302fd2f7d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_LOWERCASED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac56cf38a6b3caf8406c2d3788fb6aef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_UPPERCASED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a94b2935cc0b8c348c932e8ffcd4fc411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_TITLECASED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a91983f8ee8a6c4aaa0d03985f437001d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_CASEFOLDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a972aff01e8e4a5b739594aad748a41b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_CASEMAPPED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aff0512a331ec0058777e74344c524b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae10c76a75d366d2aa5703bc9141cdc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BINARY_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac62c7e6245ad64ea6b662c9b93831273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BIDI_CLASS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae450519a287b310d4fd6be913570456f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_INT_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a9a83218b934d99e67c2fc8e1b9dd081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BLOCK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a0a974120a7611cd6b9fd157597bfeede</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CANONICAL_COMBINING_CLASS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a1875da152d31c940d1ee207cc44e5049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DECOMPOSITION_TYPE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aaa4aebc4d6cb7345b9619a79a8c4becf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_EAST_ASIAN_WIDTH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a75f71740824af5465c3d877944247da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GENERAL_CATEGORY</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a9a38e06ca9f450ec19e4099634fe5035</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_JOINING_GROUP</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aedd694bb9a8cd3365b6752dec61044f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_JOINING_TYPE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ab601c7f01ff5058f86b058c312350f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_LINE_BREAK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aaf840995277cf561207dd6c78893e949</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NUMERIC_TYPE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a8d7ef62df5dc9907e933f0861d0ba53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SCRIPT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a90caec0b659490ed28426379521ba2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_HANGUL_SYLLABLE_TYPE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aacb47aa5805e5883a21b8f4ace5ae171</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFD_QUICK_CHECK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a9ce7a59b8e4be47688d958953918486e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFKD_QUICK_CHECK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a86ac054a25b7029ae91c07c6f7049a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFC_QUICK_CHECK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae244d4067a35eef3b28be9a5b4e26b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NFKC_QUICK_CHECK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a4cb54f4492a96d71b7cc5d9495a5e1ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_LEAD_CANONICAL_COMBINING_CLASS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a686db169e8d6dc82233ebdfdee777b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_TRAIL_CANONICAL_COMBINING_CLASS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a477985deea2b2c42f3af4c7174c60d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GRAPHEME_CLUSTER_BREAK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a016b2b830288044668d8dab694b84a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SENTENCE_BREAK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ad99b5967b842d111500607e9ab62eb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_WORD_BREAK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199acc2498be24acbc2cac1eb1ccd049fcc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_INT_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a27df8ebc1c9a9054667e8c3f1175ff15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_GENERAL_CATEGORY_MASK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aa8f9665b587b10a6cda67f13f7e0c0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_MASK_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aa9c34a027b7cbb2285cec8916607346f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_MASK_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae657cdbaa73c7c1ae76c78d79333b393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NUMERIC_VALUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a3c877820cc4a8a01c6cc5e8bce97bb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DOUBLE_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a45f9128d5d87d92e195677565ad7c8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_DOUBLE_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199acc8d2f596dd3e8616b52fec0a95b561c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_AGE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199acc1964f46b583bc93f90db2b74a87507</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_STRING_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199af64428037bd6845bfbd2bd8a4eb822da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_BIDI_MIRRORING_GLYPH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a6548fa86c7ed15209628f50cec54baf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_CASE_FOLDING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a8a7d6c8a8a9b2a117315c2d55462a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_ISO_COMMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a90205bae5d104d64d9f3de6a75862ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_LOWERCASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199abf0fb4383102c9fbe8f321c9793f883d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_NAME</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a86ff29f588f13ab00626366823cacc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SIMPLE_CASE_FOLDING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ac0a9b7f58dad11d90df27e1d033c6eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SIMPLE_LOWERCASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ad1cde5eb5e67a1e365fa82b4d97ae026</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SIMPLE_TITLECASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a477872baaa4ef8593a1d4e12e7da0083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SIMPLE_UPPERCASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ab3292daffe8dc86f852cd93e2b782581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_TITLECASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199aaaf14bc41bb0d46793300e7c24d82fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_UNICODE_1_NAME</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a72aa23c18c5fddce0751ad9a89e3c329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_UPPERCASE_MAPPING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199ae37c95852ba7190fbc1ad394764908ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_STRING_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a76a393866f6e31ec7e2ce38accb1a07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_SCRIPT_EXTENSIONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199af91256385f2c4656335340d9e1f8b8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_OTHER_PROPERTY_START</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a17cbf591bd5e222e99eb689b9d74d3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_OTHER_PROPERTY_LIMIT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a2e3b955304a84b3dacea766f1666fdaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCHAR_INVALID_CODE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae40d616419e74ecc7c80a9febab03199a0caeeb3b232166fb042a2ce8b0867c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCharCategory</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNASSIGNED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea72b916debd3da37f14165010614edb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_GENERAL_OTHER_TYPES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea17181808eb2e207aec907a87472ef550</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UPPERCASE_LETTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea4ce051eb4caadf23572591453b9c8018</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LOWERCASE_LETTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eac5781d06deb9e1b1f06ddcde0f703e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_TITLECASE_LETTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea1c8d8196c554b72d28ec17ed343e09a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MODIFIER_LETTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea52939628d53f6e709b49e1d5a0bff954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_OTHER_LETTER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea860926fc0eeb007135b862ee907d3d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_NON_SPACING_MARK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea8be92bce0af8b0082772c5ac21e4f0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ENCLOSING_MARK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea63d08d450041d79f21b892954aadd38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_COMBINING_SPACING_MARK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea798403b244bd1522cf0458da78eeaa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DECIMAL_DIGIT_NUMBER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eac4be41e796e2ab406e6cdfc53cf7f23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LETTER_NUMBER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ead087951289c1232a08e8aa7e8bba7093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_OTHER_NUMBER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea9e86f106bcc19e9d4a4f4b198ea1da45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_SPACE_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea0c75a42ce861885cd55c99a429de013c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LINE_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eaaf39159afd99b7df729b77ca505f8dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PARAGRAPH_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea5469aba2cd158f6b584e6ee5e2bfea09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CONTROL_CHAR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea7ba1e6139e25f27221c51f2d2f0a9d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FORMAT_CHAR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea01b7d97d771bafe0c4c21d3544cd7309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PRIVATE_USE_CHAR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea29cd69f1541a3ce7bdc274d63d4e5d16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_SURROGATE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eaffe65d58aecf0b3e6a6b34ccad6d00a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DASH_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eab3ec1dcb92550114a732e56d5a60bf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_START_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea945da22358c45bafaf416e4140c12a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_END_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea9b9a1bcf5b94751e843b1fe9cd676684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CONNECTOR_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea966cc874061de0bba2ecef0fb717f974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_OTHER_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea5b10136688c41fd7ad9650aef98a88fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MATH_SYMBOL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eac33ad42e90025817ec44d9d1296b4442</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CURRENCY_SYMBOL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea7843d72485c8d0b0301f3277dd4c44ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MODIFIER_SYMBOL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea16d52e17abad1b7899fae347087cbdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_OTHER_SYMBOL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea36cbd85a4a48f5e5a24a607d624df003</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INITIAL_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25ea6ef1f92f231e1df9a0cfedbe42a6bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FINAL_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eac9dc978ee62350e2e8338096f0809229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CHAR_CATEGORY_COUNT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a6a2dbc531efce8d77fdb4c314e7fc25eac34e330b2eb4e6459c41d03ba8d5d6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCharDirection</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LEFT_TO_RIGHT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a3a7b8179c88b573095c5653907ce3036</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RIGHT_TO_LEFT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a20acdc6c32ad0c6101870529dacc90d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_EUROPEAN_NUMBER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593ac409eaa36a7cd3d3992642abffb5fb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_EUROPEAN_NUMBER_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a951ee2fbdfb406d124e63fe5aca4a465</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_EUROPEAN_NUMBER_TERMINATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a153f3cea3e33c95107ed5d4f01281761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ARABIC_NUMBER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a64e442326460926fcffe67ff55f5d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_COMMON_NUMBER_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a305dc34d5aa69a77a5bd9f360883bd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BLOCK_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593ac66d823f20d59d951c1568f1f9f37baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_SEGMENT_SEPARATOR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a12e3c39a7fa5db2274c5497cdc8ac7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_WHITE_SPACE_NEUTRAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a7a2147dba025182bfd072e60dc769b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_OTHER_NEUTRAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a6ea79f68f9aa5b67786bfdda5df7ef96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LEFT_TO_RIGHT_EMBEDDING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593ae70193524a7494c1b5b67eb396402da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LEFT_TO_RIGHT_OVERRIDE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593aa4cc32ac83b7d0336d23fdda53b73176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RIGHT_TO_LEFT_ARABIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a1e117d42da767d003134ee332eac096c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RIGHT_TO_LEFT_EMBEDDING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a9505049ce656e57c4a1d2bc1d154c0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RIGHT_TO_LEFT_OVERRIDE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a8d031c348240495c7cbe19b7b82b8dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_POP_DIRECTIONAL_FORMAT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a6de07f2a59c099f7edb5d7c66f0820f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DIR_NON_SPACING_MARK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a4f407f189cbd0e0f96be846e9ad6654f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BOUNDARY_NEUTRAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a173b7d1bb464f1ae96715f2c6efd7e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CHAR_DIRECTION_COUNT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a50325108b69e7d08315b5854f85f0593a6ef7d8987718e33961e6a15739343af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UBlockCode</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_NO_BLOCK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7c4e83b970958ed00cb7c59f24d9df91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BASIC_LATIN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3022e8914f355aa35e472f3425b8e81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_1_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad471a0e994a6b93eb6298de7c8482e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_EXTENDED_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4be2a8392534d1bf4cbeddb02148ba77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_EXTENDED_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac7726a00016a5ddf654c4c0a942db0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_IPA_EXTENSIONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4542afdbef1008b479133fecc75d2e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SPACING_MODIFIER_LETTERS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a5af4c444aef9f0d0167ccda50f8b4beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COMBINING_DIACRITICAL_MARKS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af9a2494cf9616dda5d4515c0d69f4385</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GREEK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a64d33e208db4fbc11b1c941bc6d87004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYRILLIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a0c781eb861bc3cbe6630466e6178c996</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARMENIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a32518844bb1a22ef64bd1051e23b8245</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HEBREW</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a0a63bb54618eb775a6e2a19e95db797d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARABIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af28c2bbfb3db721eb142f2cb3356c14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SYRIAC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901acb4eb46765f546b610b5e6f06171e8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_THAANA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac7b4c37284cfd9df7d72d15cff1e2f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_DEVANAGARI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac26ba8f9848bada1f5351eae928f0851</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BENGALI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6854e137486d8106b99128708718cd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GURMUKHI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3030490dd5e646869e781e4454576ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GUJARATI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af89fe0ccf0244c90dcd611a15590d0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ORIYA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7bd2cc0f592ccceda3a559c4ef6952c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAMIL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3fb8028d840252d146572d041757a76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TELUGU</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab92a93b54ac8af92b97a4b67b1e60628</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KANNADA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac03285ebc31bbba8631638475cf4f354</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MALAYALAM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aac80b8dd5c84cebf61cae32a2ab7af57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SINHALA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab64253a6a3fe0e364030046e1077206a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_THAI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af9dd8881a25cae9cf85dbb9ff01df736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LAO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4cfee85894a7b3445f1c9d4600d23e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TIBETAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a960cbc55c7cbaca9cd1ddea16979fc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MYANMAR</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a85979011b5f0044ed5ff750679599ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GEORGIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac26335afe9f3d64b9838170724460ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANGUL_JAMO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a329c7faa605e9ef54ce4e99b3f51233f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ETHIOPIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac939660d7eac8d2eb7612677e514b0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CHEROKEE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa67c247a877e9ad42701e3db84b550ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8923692cfb3086fd8db312dfe56fa9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OGHAM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a1bb44e6bec64d33965069c50800b021e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_RUNIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a9de9cc3621afbce2d869bbac203e2464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KHMER</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a08b430ec85307acc5560ceb7cf6a38eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MONGOLIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a5351fb9464f2572c2478abdebfe35652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_EXTENDED_ADDITIONAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a84fcfed2fae7fd4c4f4bc13ddc3a818b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GREEK_EXTENDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901accea5fdddfebf9168153c2fa9e3e3daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GENERAL_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a5f143ad5c7406c7f89fca2baf5d9cf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a264d6d8ad2c595294dd944b7d2b4cf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CURRENCY_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a19450b8cfbf710469c33495a70594853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COMBINING_MARKS_FOR_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8800e16938d527bd78728d522c074b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LETTERLIKE_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af27084a4a9675c9384a03256272d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_NUMBER_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3c4b9711c95cabb97b79181047ab9fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARROWS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a15b2c1cf7ae03429abfec85927213763</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MATHEMATICAL_OPERATORS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7aa09e8a0ff089e3d06d5d4566979aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_TECHNICAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a60d5f7299c6eda7e8c7c7ec8991e2e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CONTROL_PICTURES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a64bf488ae85d0ce7c27c071ec01a6f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OPTICAL_CHARACTER_RECOGNITION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a055d61bd1f5c9014974dd96eeafbdb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ENCLOSED_ALPHANUMERICS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a730218e61d9c6bc24c155006f2b969e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BOX_DRAWING</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a183fa45df1cbd55259174e18d5bd499f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BLOCK_ELEMENTS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a420d29dfe8828c796b8711b570c9ab61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GEOMETRIC_SHAPES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adfd4cc438f774bc555bd53f87ca7d6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a19834f60077dc8d5d9ac6c0a6856d53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_DINGBATS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a579f3f9df58938eba34b313a769f66a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BRAILLE_PATTERNS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7964d49d880df886fad9bcefe63ab9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_RADICALS_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a99c3c3775b537b8876949f098a23c8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KANGXI_RADICALS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa4ddf40f9a89dc7ba981dbab63049d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2ffda88af5c8b0cae1ba748deac44b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a16ecca43ca6b3e82fd7512ed893ecdc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HIRAGANA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abfc2e7e455045900128f406633c2f889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KATAKANA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac4d2712e197d61bef9eb83668d10442f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BOPOMOFO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8972093158188aa5c4332560ed67af17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANGUL_COMPATIBILITY_JAMO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a9206144c263a23a82c29209e01889607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KANBUN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abfa95d3eb12816b8af369c0165c838aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BOPOMOFO_EXTENDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa3ced8ea69f3820d105cfe23103ccd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a592f284c7e5573fc613a17ffc93e5de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_COMPATIBILITY</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a946e2b5a1615058394a244669bdf89ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad3a988bb0fb258d95f2a8558a087ba9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_UNIFIED_IDEOGRAPHS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac8e0a46f65001cfa15bedc3410c84a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_YI_SYLLABLES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab8181c39d68d56e6f6c1a2e6a7b3af19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_YI_RADICALS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7ea7b54c7f86c8cc1810972042ed1ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANGUL_SYLLABLES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a93975c95f5dacd92f43a7fd6a1a7adbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HIGH_SURROGATES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a64ed1a9993c3ddef07ddd137231785d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HIGH_PRIVATE_USE_SURROGATES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6dede69d2175d60cb72b15fc13fb1e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LOW_SURROGATES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a928c37e1ecac9eb215ed75e6cc170629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PRIVATE_USE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8efc9d39daba33016a9cc00b5c66600e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PRIVATE_USE_AREA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a31494c450d57b0979457663a10f15345</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ace7017c307747be100dad1a234fc7dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ALPHABETIC_PRESENTATION_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af11baf95fa858d706a4363966a25008d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARABIC_PRESENTATION_FORMS_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a9fc0ab3a0baea057be2dd716080b354d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COMBINING_HALF_MARKS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a73536d5b7a36f1fcd11c99ff33211831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_COMPATIBILITY_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901acd2660ac3003e2a0b937f88971a27dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SMALL_FORM_VARIANTS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a80eb404744e2c8684f76fa0edc70a677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARABIC_PRESENTATION_FORMS_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a9c0fc5666266d7e0a40db3e1b3800634</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SPECIALS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a0e95c66e88f2c6121aaf1b0ab8f279f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a138a042e5a69c2657d1a8472211d608c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OLD_ITALIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aaafa84bc79b77c0ca76b5a7cfe01cf8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GOTHIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ae81abd303ede4ab5398b4b387bc2611c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_DESERET</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abd59dc443778a7fd81e064fb57c8e437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BYZANTINE_MUSICAL_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af5f39ff091e8d633a9a505fcaaeec82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MUSICAL_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af17bfcee9527f03b6a6d1ffdc2158a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3683f9468196add6a875a7a82b54f037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a0802445296eac3e75aff8ce69cdf7a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af957e7cdecb29504948b79c2d0425e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAGS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a277baf42eff3a5d78e4e2c958c031826</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYRILLIC_SUPPLEMENTARY</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af358c7f31da5857b5a9221f80b2c9963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYRILLIC_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aada128227cd225dc34c0b4b3e67fd987</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAGALOG</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a244561f5aa331a27ecc66806fb82dfae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANUNOO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4c0b492849a9d9da989d71f5c5ece4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BUHID</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6b62df1d66a2438d4ad68a53d4b7f0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAGBANWA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a615bde6b1d03cc88aa0a33da3c0843b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad881718ffc1af20998d115a71c989c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTAL_ARROWS_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a502ee6fe857cac251428f210571185d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTAL_ARROWS_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ae2cd8092582a68f03fc4893064659722</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a835861496e1d87031be9a43fb1963ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8be28d496ccd03f8a706168569ca5c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KATAKANA_PHONETIC_EXTENSIONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a89cb0cf8a2280a078bd45c50ba08626f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_VARIATION_SELECTORS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901afc1bdb4f56ee2326b696b7b838fbf49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abc72efe702ec619d857abc16bf0901c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aac0f380bd99698ecbbb1561425818813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LIMBU</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2b1ab46d2e7da2a9d722c90576803c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAI_LE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ae57c29e44ca798926a23d45c6d1b2496</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KHMER_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aacedf364de2b89faa14218e245964d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PHONETIC_EXTENSIONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adc21745871d149076502af563bec4268</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a944eb0a9a3a62f5676e8774d50fb3aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_YIJING_HEXAGRAM_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a0b405955468512b73c27f422bb3db044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LINEAR_B_SYLLABARY</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a58e2a7e7279ed37f1f46b3926e45c39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LINEAR_B_IDEOGRAMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a69e0204312b8cb4f5fdc7943369a9eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_AEGEAN_NUMBERS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6697e91e827eed1e2606a0f324c633e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_UGARITIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af7ed384f7fa85efc8e9497292bf7b396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SHAVIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901affe05eb5135ee51b363a9871ca031783</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OSMANYA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7624268c8a6b53a14a17a1c81a9bdfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYPRIOT_SYLLABARY</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa97745fb5ddd7308982a6af1dfbf1369</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAI_XUAN_JING_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6127a9ed9710d7eebe79caaea27612bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_VARIATION_SELECTORS_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a439f189062006ca618964d4a83cfdb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab01160b311b79020b1b38796187f682b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ANCIENT_GREEK_NUMBERS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a1aac0b65e5f74fad6c83d4f76ed6bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ARABIC_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a92e02d8d4ac68c1c6aab2636dc7d44f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BUGINESE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7fcada650725d81669db60e683f8ffe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_STROKES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a1b0d9f61ffbfbf4845f29594a1fef547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a433bddc0f3d7418d6d70149ed810923c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COPTIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a90eb175095fc3681e58972d6449a27e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ETHIOPIC_EXTENDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8cfa7df713135aa1ca4a4bdbfab9648b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ETHIOPIC_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa9de3bf46a8c92eb8e9b2d4ee4f48f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GEORGIAN_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8f20feacd6e3a05b15329f49a714771d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_GLAGOLITIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a51c480ceba97e00383883eb52553c155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KHAROSHTHI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aaae0d915ba3b9f1f52e5e1dfe2a749d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MODIFIER_TONE_LETTERS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac7c1aec6579f984d3e69d43839dd3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_NEW_TAI_LUE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab78aa27149f89a5b396f07017882d958</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OLD_PERSIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ade2470f642266019e9eb85126e7eb539</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2c41cb599f737828725eef69610c735c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUPPLEMENTAL_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a22419af15b759beb0805cc2b42936902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SYLOTI_NAGRI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa867b87d44d0b67f30cc01d93921e7db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TIFINAGH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8355c5788aff1c0ed24e6d53a3100df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_VERTICAL_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a338588aa6878cabda47e875129e0ee18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_NKO</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a53647013ca365c12d56c54ca74397b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BALINESE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a09b82ef528970e8e9724bc6bb76c876b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_EXTENDED_C</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adfd4ec3a5a5c885d7f8dfcd181b8b453</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LATIN_EXTENDED_D</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8414a61469263f85f31283ef48887d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PHAGS_PA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901add7567f91209fa75d65c7cbe75b4f461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PHOENICIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad85b1dfe5351b55b23d8067b1f618249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CUNEIFORM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a63b44bb3f0f5c63f869b43dfdeab1925</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a42a5ee9f7511113abc8b78cdbb5fda8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COUNTING_ROD_NUMERALS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a656438ef992e9dee09082d7e055906d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SUNDANESE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a72b99eb44be2d7ed2cfcaebc60b89e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LEPCHA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a42f784271223eb0bf90b853eb2f236e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OL_CHIKI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a85a9982ae78c24ad615e49591f630dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYRILLIC_EXTENDED_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4dc9b3ef8b9e8804e6c3ec1af1f1126b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_VAI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adbf81936a4f083aaca9440e138f6eee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CYRILLIC_EXTENDED_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a5e4fd2f88ed9d5279831b75d1fc96e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SAURASHTRA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abf59c1fc5cd7d1dd67ab7b917aec969a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KAYAH_LI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901acfd0b52238b948843d7993fb1165cfd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_REJANG</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a240e90d3507c10e170e6b938f15cdb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CHAM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a3dd9868a153394ce952cf836ed020535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ANCIENT_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af73bb2e92770e8fa81ca18e9e74c0cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PHAISTOS_DISC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad36c0941c490fb2abc3ede58d9d6e5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LYCIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a53e54ceb64c82c2635f4af9da39f3917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CARIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a95cbd4325ad339bef92fd92d2021b229</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LYDIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2b763a450e3a47b6944b8ec3df03ebb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MAHJONG_TILES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2d398286bb3a59f86b8d65cf02a61e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_DOMINO_TILES</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a43b6e5109685207148a1bfe6d1595805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_SAMARITAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4e5499cc9a53ea12a5aa25d103c716ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a02fde6d79d2c92c325c996d9205680d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAI_THAM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2d1d462c1f7fb3bc7bcf63013dc88236</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_VEDIC_EXTENSIONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ad18c584f51e5cf3205451915447c9a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_LISU</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a24cae886690c0e03efd1ccc1d7c1e3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BAMUM</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901afc286ac5cdc5ab55acb0175e7a450047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COMMON_INDIC_NUMBER_FORMS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a70ac350cea02ef09462bf953bf326d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_DEVANAGARI_EXTENDED</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901abb42ca4b8bf7c10da50400dcf1b96468</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANGUL_JAMO_EXTENDED_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901af40f89d7ab7cc3b0c1f0fa302d32af35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_JAVANESE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aad4994ee50d6f7c3d231b86c95492072</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MYANMAR_EXTENDED_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adaad34606001f4a885ac0c5b7e03dd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TAI_VIET</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ac5e52ff3edbfb8232cb93810b9dee076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MEETEI_MAYEK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8518c0f3bd15c39546dbfea7c301ca38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_HANGUL_JAMO_EXTENDED_B</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a4de1c27271f5c6f2350f3793465d2339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_IMPERIAL_ARAMAIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a78117b97956b96b4d6b0448b0efc643e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OLD_SOUTH_ARABIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aabf6a1c1c782f8fa18a25717e2f05515</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_AVESTAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8e64b3f49589c03635f79ff82c3ad28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_INSCRIPTIONAL_PARTHIAN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a51d13a381270c9ef2b63522c2c8efe00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_INSCRIPTIONAL_PAHLAVI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a08751738c28bb1b1c8d3964e21edfc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_OLD_TURKIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a97e49326df407829aa8d1088e85b8e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_RUMI_NUMERAL_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a6d8b7833a6affe1fdec185485eb086c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KAITHI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901adee8981b9446a9633931d630a75be844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_EGYPTIAN_HIEROGLYPHS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a44c3c91248c27fe80f068cddc0360d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a422ff10f6fccd3c01a612bd05ccb2438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a9fdcce37102311a3faae26e20a99586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2994474308d76686c3076bb119c483cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MANDAIC</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a7468dd11583b49a646c6529c47d67123</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BATAK</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ab1f4eb04e74bf2943cd3c43c689a21a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ETHIOPIC_EXTENDED_A</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ae88f173d248f4e34617319165e8a578c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BRAHMI</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa774b9e3ad4b123d278c19fcce113ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_BAMUM_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aad8de649dc8d42c54aa3672da615c225</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_KANA_SUPPLEMENT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901aa6196434b93716502ad8537ceb0b8bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_PLAYING_CARDS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2d640cc85fdd83bf296d4f321edd8b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a882f894acc4872ad223dca9805ba871f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_EMOTICONS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2373433d4833a57624e9365134dd451b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_TRANSPORT_AND_MAP_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a2f8cbfbb4437ee1ef2bb56a58ea90310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_ALCHEMICAL_SYMBOLS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ada49cc457a17bafb07275a681d5ffbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a8646b13c034f4a5f165d24e59b085103</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_COUNT</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901a04e4577a8946c1c6b032ee1a17728eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UBLOCK_INVALID_CODE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a19f1662c9c33c31593612d05777ea901ae5731350b69c838e308ce5204be6de90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UEastAsianWidth</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a95cc2ca2f9cfd6d0c63eee2c65951333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCharNameChoice</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a2ba37edcca62eff48226e8096035addf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CHAR_NAME_ALIAS</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a2ba37edcca62eff48226e8096035addfa68c4cb8d73f0836f2e85cee9f63d55b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UPropertyNameChoice</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5056494c7d5a2c7185f3c464f48fe5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDecompositionType</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ae2c56994fcf28062c7e77beb671533f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UJoiningType</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3ce1ce20e7f3b8534eb3490ad3aba3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UJoiningGroup</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_TEH_MARBUTA_GOAL</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65a9a3f6b2ee4c43cdd4abd680f034449a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_FE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65a02a0861065930eefe8314e84d17cede4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_KHAPH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65aa926608208fd77ebe07b3358531ddf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_ZHAIN</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65a6773363567a4f985f6a82cc67ca7e6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_BURUSHASKI_YEH_BARREE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65a03ae89e957c45fcc75a87cae8230931b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_FARSI_YEH</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65a23e63ed519ef35051ca51df3dc3d43ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_JG_NYA</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7887844ec0872e6e9a283e0825fcae65afa9679b18edaa195a121a3ca46544b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UGraphemeClusterBreak</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>abb9bae7d2a1c80ce342be4647661fde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UWordBreakValues</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>af70ee907368e663f8dd4b90c7196e15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USentenceBreak</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a89e9e463c3bae1d2d46b1dbb6f90de0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULineBreak</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5d1abdf05be22cb9599f804a8506277c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_LB_INSEPARABLE</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5d1abdf05be22cb9599f804a8506277ca7439f90d95dc4dcbccbf66550fcf624d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumericType</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>adec3e7a6ae3a00274c019b3b2ddaecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UHangulSyllableType</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7cb09027c37ad73571cf541caf002c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_hasBinaryProperty</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a25c5c820d4141e4099acc15ca83572a5</anchor>
      <arglist>(UChar32 c, UProperty which)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isUAlphabetic</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a43cbdd6f7dc28705600c8234e4d47f6f</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isULowercase</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a8321c9ba617ed00787f20c4b23a254bc</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isUUppercase</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5a3a93fb4c540526becf071cb51632fb</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isUWhiteSpace</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3450f489a9a41e5bb199aded7a2b74d3</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getIntPropertyValue</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a3376f0d34bb23c54671859f1978b4226</anchor>
      <arglist>(UChar32 c, UProperty which)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getIntPropertyMinValue</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ab9343bf1e738a224bcbade2923b4631c</anchor>
      <arglist>(UProperty which)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getIntPropertyMaxValue</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a86e0fc00710c85191a34a5fe2a78bed0</anchor>
      <arglist>(UProperty which)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>u_getNumericValue</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a36982efc84143b9bb5a11bf54b86af48</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_islower</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aa26a51b768147fbf34029f8141132815</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isupper</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ac5f188ebe18ac54921c9f6bcb89ab42f</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_istitle</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a35c14b53bb64eeb639c0f780c98aa263</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isdigit</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a22c51e37cc509e43b60dcdfeecf9cad0</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isalpha</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a86cc4f937e33bcea3772c6faf3e293c1</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isalnum</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5dff81615fcb62295bf8b1c63dd33a14</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isxdigit</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aaeaf4400cc9bc47bd804b2623969d758</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_ispunct</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a48f5250c4981e01cbf4eb96b8f6e9a7b</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isgraph</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a51a643f80fb02bed12dd705e9f6545ea</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isblank</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a8c7d4040f39c42a33029d2190da507f5</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isdefined</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a665a0f2c81b3acfe32c3c3b29e8f3f93</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isspace</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a9e5a0b4c0d3f1ce71e185afc12cb1645</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isJavaSpaceChar</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a636e27052ff1cd96a9aaf9ef58006273</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isWhitespace</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5cef869b23e8d8e649963457cccca68e</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_iscntrl</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a1295bd387a68fe6df79fedce367c18dd</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isISOControl</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a959f11ab4d0f2bc4bd85daebfb1b38cc</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isprint</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>afa9b7fb8cced8d7bedbe2c9eae45f544</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isbase</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5318e1134e76733f2e8819004b11b774</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UCharDirection</type>
      <name>u_charDirection</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a007e7ad9be3d14528ad22f02f635c178</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isMirrored</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a247cf6facc44c6eb29faa3d23842b741</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_charMirror</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a684ca600e7d30c28ba7d4649bbd9123e</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>u_charType</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>abac78638e20ed7a2ab471b35a1858d02</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_enumCharTypes</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a4859bcf36f1ea9255e69e5e744766815</anchor>
      <arglist>(UCharEnumTypeRange *enumRange, const void *context)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>u_getCombiningClass</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a1158d75dd2d6896022577fa67029ce3c</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_charDigitValue</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>afd684aeceb3d5c45028fd3e89d91a193</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBlockCode</type>
      <name>ublock_getCode</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a4e77b605d178b6b79638e5bea57927df</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_charName</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aa488f2a373998c7decb0ecd3e3552079</anchor>
      <arglist>(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getISOComment</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5f93d6a17a2187e631917dd141222e41</anchor>
      <arglist>(UChar32 c, char *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_charFromName</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a02d95691ae880cfdfb4e75d11f87794d</anchor>
      <arglist>(UCharNameChoice nameChoice, const char *name, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_enumCharNames</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5a195b212903ac6ea0a2326222570d9c</anchor>
      <arglist>(UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_getPropertyName</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a12e574f001530dec06f2278b6b6e1168</anchor>
      <arglist>(UProperty property, UPropertyNameChoice nameChoice)</arglist>
    </member>
    <member kind="function">
      <type>UProperty</type>
      <name>u_getPropertyEnum</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a88cdfeb803e44eadc07108e1abca1749</anchor>
      <arglist>(const char *alias)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_getPropertyValueName</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a8f28cda9b9263ecb32ca15df46617bf9</anchor>
      <arglist>(UProperty property, int32_t value, UPropertyNameChoice nameChoice)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getPropertyValueEnum</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7552276fa5f84a0c658a09ff84e135e6</anchor>
      <arglist>(UProperty property, const char *alias)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isIDStart</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aab4a33416444a5115d65859c08d8e940</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isIDPart</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a7a6e47c583e81ae789575269f041daae</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isIDIgnorable</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a74a05fd7b3408d0131e3c2b74ddc6f9e</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isJavaIDStart</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a8f1b3b24d5209aad113bde23aaff0cfc</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_isJavaIDPart</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aab61880ca86d215738785214ad84425d</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_tolower</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a5391a8d4eb3f16f92b55c19f2e88c9cb</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_toupper</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a83d2b12f13e3caf02851e3dddcab3332</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_totitle</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ad87ddb5586a24f546b196ec2e2fc4c26</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_foldCase</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a92925c095397f6af772717acec165d01</anchor>
      <arglist>(UChar32 c, uint32_t options)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_digit</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a37039001002e5ab9ad98018bb2dfe4a8</anchor>
      <arglist>(UChar32 ch, int8_t radix)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_forDigit</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>aad1615d1aa700c26a31306aef688d190</anchor>
      <arglist>(int32_t digit, int8_t radix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_charAge</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>ad1720a9c1a8a414df394ade7571aec0d</anchor>
      <arglist>(UChar32 c, UVersionInfo versionArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_getUnicodeVersion</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a21774d8302b4ee7b1c92554b62e04653</anchor>
      <arglist>(UVersionInfo versionArray)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_getFC_NFKC_Closure</name>
      <anchorfile>uchar_8h.html</anchorfile>
      <anchor>a459e5b3a98db03e0131fd9c1c9f8202d</anchor>
      <arglist>(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucharstrie.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucharstrie_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="ustringtrie_8h" name="ustringtrie.h" local="yes" imported="no">unicode/ustringtrie.h</includes>
    <class kind="class">UCharsTrie</class>
    <class kind="class">UCharsTrie::State</class>
    <class kind="class">UCharsTrie::Iterator</class>
  </compound>
  <compound kind="file">
    <name>uchriter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uchriter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="chariter_8h" name="chariter.h" local="yes" imported="no">unicode/chariter.h</includes>
    <class kind="class">UCharCharacterIterator</class>
  </compound>
  <compound kind="file">
    <name>uclean.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uclean_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="typedef">
      <type>void *</type>
      <name>UMTX</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>af125d56147c708c2d8ecc5327449c41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UMtxInitFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a302ac3ea859a593dea50f9a1b06ce5b1</anchor>
      <arglist>(const void *context, UMTX *mutex, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UMtxFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a67a2314f542b9f495ef0b2ac1cfd5192</anchor>
      <arglist>(const void *context, UMTX *mutex)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UMtxAtomicFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a21713ef0c8987c243f315dab6db8e2b8</anchor>
      <arglist>(const void *context, int32_t *p)</arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>UMemAllocFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a7a7b058f29daf7fcac9a5c27584b1710</anchor>
      <arglist>(const void *context, size_t size)</arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>UMemReallocFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a1b6b46b156cc0874de4c1f9ae202e6e7</anchor>
      <arglist>(const void *context, void *mem, size_t size)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UMemFreeFn</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a0ef0908b72449d65c915e6c3d173886a</anchor>
      <arglist>(const void *context, void *mem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_init</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>ab6a4215b45b2162889aa1ff01e491d4c</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_cleanup</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a93f27d0ddc7c196a1da864763f2d8920</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_setMutexFunctions</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>ad286bdc5cbaf91e6b6e8f9c565455ec0</anchor>
      <arglist>(const void *context, UMtxInitFn *init, UMtxFn *destroy, UMtxFn *lock, UMtxFn *unlock, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_setAtomicIncDecFunctions</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a677b75b566af2a41202e255262ff38c3</anchor>
      <arglist>(const void *context, UMtxAtomicFn *inc, UMtxAtomicFn *dec, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_setMemoryFunctions</name>
      <anchorfile>uclean_8h.html</anchorfile>
      <anchor>a5dea766c5e726833400dc0ee24a2bc6a</anchor>
      <arglist>(const void *context, UMemAllocFn *a, UMemReallocFn *r, UMemFreeFn *f, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucnv.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucnv_8h</filename>
    <includes id="ucnv__err_8h" name="ucnv_err.h" local="yes" imported="no">unicode/ucnv_err.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_MAX_CONVERTER_NAME_LENGTH</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a3ab00bb423db8533da12c35848e4c281</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_MAX_FULL_FILE_NAME_LENGTH</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1a579f67d05b09f731df5a68eb80b851</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_SI</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a082aba7f50746ff6135a4ca2a00f6d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_SO</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ad3918524388c8100107273806bd58c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_OPTION_SEP_CHAR</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a420028eb5f83222307bf16632857b148</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_OPTION_SEP_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a8f221dc37208cc5c5e9b1d72a7103435</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_VALUE_SEP_CHAR</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a92803b44385721ec771befc01b5e8e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_VALUE_SEP_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a33cd53c804d95e14388398843e6edc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_LOCALE_OPTION_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a867b3f44513565bca406eebe2f87ee99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_VERSION_OPTION_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ac7b80fb72078403f8bdba322b63a5a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_SWAP_LFNL_OPTION_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a0588f7014923ad969821941f9dd51040</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CNV_SAFECLONE_BUFFERSIZE</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ab6ef5c3c7c83982313e415e697a26089</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_GET_MAX_BYTES_FOR_STRING</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aa3d7e4ae84f8a95b9735ed3491cdb77e</anchor>
      <arglist>(length, maxCharSize)</arglist>
    </member>
    <member kind="typedef">
      <type>struct USet</type>
      <name>USet</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adce3fef7c15d7c78196bf977ac96ec9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>UConverterToUCallback</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a6ab3c37739c284414ea7db54714ef4b5</anchor>
      <arglist>)(const void *context, UConverterToUnicodeArgs *args, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>UConverterFromUCallback</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a19a12c807f3343357bb917d53db0e9b6</anchor>
      <arglist>)(const void *context, UConverterFromUnicodeArgs *args, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="enumeration">
      <name>UConverterType</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UNSUPPORTED_CONVERTER</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a8ba1940e34a58186b231679da1272904</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_SBCS</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a81e595b85ba86dd7fde25f2a1c59bfc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_DBCS</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902af7ed8ed108be1286bd0e01818dae0dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_MBCS</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ac0f17aec1772eeca6c86d13191b6c852</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LATIN_1</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a1211937ef4e044d96014a77c04915554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF8</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a6a63fa949b29c7a55cc7cf5eecc3c89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF16_BigEndian</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aac97a8806bad1e28965f045cdbd8e305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF16_LittleEndian</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a824cb728f9beb71051820f49f74fa4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF32_BigEndian</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a1c8fa4af063d027b5bc2baa03bc29da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF32_LittleEndian</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aa776a4cccf14778c20230da58aa1c38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_EBCDIC_STATEFUL</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ab5b73d6ee548bda138fc56829800111b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_ISO_2022</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a11368f51e102406facd6da0a3ee7d606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_1</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902af2c460935eca00105ad7dc2622d74100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_2</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aaafb05c0fda0e6530807fedabf82c261</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_3</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a6020a8e2cc71c9f8d8a64d729db9adb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_4</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ac71afd7dc6b8a304638e52f8a8bed20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_5</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ab126f5ee7a9c722ed0425973cea76df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_6</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a443a68687c6c38b7d683fa4070a953bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_8</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aa8001a5fc7d37fa386c3d147106a6a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_11</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a0be612a93cffc67fc042b1bc168ed205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_16</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a98bc32e41e4d6e7bd75275c7f9738113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_17</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a41ffccf0b679631558a2547d2e445cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_18</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ad7a7305473e98bb7a9b4bf1f23406599</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_19</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a16ff6cda2e1211eceadda889dbb359ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_LMBCS_LAST</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aee49b0c0e4b4fc4eb16627fce1620938</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_HZ</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a086920821721b34d9260723ec86d5a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_SCSU</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ace8cd9e435b4a5579286931a57c0bd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_ISCII</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a59030fe051a4961ab474d0d91017ad47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_US_ASCII</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aaadc5fba9e00621313dd6c9a5be3a84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF7</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902ad4a8edc0956f24d724441118a8f2226c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_BOCU1</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902add63c4e0987f7622db1f2c2052dd7da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF16</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902aab2340e8dc51c36dd8f0b48b07ac82c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UTF32</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a4eed53e3582d767aa03cd3ba3828515f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_CESU8</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902afceba4bdab9c135cccabc255e580980b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_IMAP_MAILBOX</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a690c232e8a75021df389c39f03869d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_COMPOUND_TEXT</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>adb0b44c6bd828c9d4cc2defcbba0f902a15555ec1e53dfa419dc6231f326ef79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UConverterPlatform</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aba5ba7fbc2f113618ba57f4d9825ff85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UConverterUnicodeSet</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a402221896b6d7153b14a5ff8dadde806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_ROUNDTRIP_SET</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a402221896b6d7153b14a5ff8dadde806ab08c09dd129a92d08725b5260b49cbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_ROUNDTRIP_AND_FALLBACK_SET</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a402221896b6d7153b14a5ff8dadde806a38d95100b8b58d2c66c4c83b30d99499</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_SET_COUNT</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a402221896b6d7153b14a5ff8dadde806a33cced69d47e6de3cbfd79d17f88fcaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ucnv_compareNames</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a6f998746d8a8a8afd837f04dbb1ab64a</anchor>
      <arglist>(const char *name1, const char *name2)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>ucnv_open</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a485c78d4149165f504effa2287717e41</anchor>
      <arglist>(const char *converterName, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>ucnv_openU</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a82e86d5341b39c543c269c70b8310f3e</anchor>
      <arglist>(const UChar *name, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>ucnv_openCCSID</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a9df0109e866c32078ab96fd2fe994b15</anchor>
      <arglist>(int32_t codepage, UConverterPlatform platform, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>ucnv_openPackage</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a7e3fc1e59ac1404120f242b8911cadbb</anchor>
      <arglist>(const char *packageName, const char *converterName, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>ucnv_safeClone</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a11a66c267dce12a78dac2690d983d69e</anchor>
      <arglist>(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_close</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1718689bf60724fdfa08c51aa0cc5ea0</anchor>
      <arglist>(UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getSubstChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a118a87477ffa827d00dd50727da02e31</anchor>
      <arglist>(const UConverter *converter, char *subChars, int8_t *len, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setSubstChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ac160b1b44ac9b5124ec083810709603a</anchor>
      <arglist>(UConverter *converter, const char *subChars, int8_t len, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setSubstString</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>af87333c550d699794ab84151ed9007c6</anchor>
      <arglist>(UConverter *cnv, const UChar *s, int32_t length, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getInvalidChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ae8c925ce8f47ab08c53f9e3b3b9664f4</anchor>
      <arglist>(const UConverter *converter, char *errBytes, int8_t *len, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getInvalidUChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a341f4716c12e62d24cc8431eb9dfecdd</anchor>
      <arglist>(const UConverter *converter, UChar *errUChars, int8_t *len, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_reset</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ace43ec88f1615422f3c5c972ae79deba</anchor>
      <arglist>(UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_resetToUnicode</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a8711b61a6cd41d84cf522042b3aebaed</anchor>
      <arglist>(UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_resetFromUnicode</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aba8147239dca1fe5773de4905f2f74c2</anchor>
      <arglist>(UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>ucnv_getMaxCharSize</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a11007a7bcc41b1030cda0ee28fe78195</anchor>
      <arglist>(const UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>ucnv_getMinCharSize</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a12edd465a611c41e418632f5d5f2dbe4</anchor>
      <arglist>(const UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_getDisplayName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a36c33bb6459c126f64e5472c6e5023a6</anchor>
      <arglist>(const UConverter *converter, const char *displayLocale, UChar *displayName, int32_t displayNameCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aac2e332117c919a01516c726c051dd55</anchor>
      <arglist>(const UConverter *converter, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_getCCSID</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a0500738a0f4a552725725f9fe964e430</anchor>
      <arglist>(const UConverter *converter, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverterPlatform</type>
      <name>ucnv_getPlatform</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aa14f20f0ffa7f602690956cf3a5c87e2</anchor>
      <arglist>(const UConverter *converter, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UConverterType</type>
      <name>ucnv_getType</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a94a8af5dd3516cea50c2829e6c35b397</anchor>
      <arglist>(const UConverter *converter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getStarters</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aa970dda00a55c1751b7fe0bb34b04015</anchor>
      <arglist>(const UConverter *converter, UBool starters[256], UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getUnicodeSet</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aec7c273c8ce917ff75224e25914c53be</anchor>
      <arglist>(const UConverter *cnv, USet *setFillIn, UConverterUnicodeSet whichSet, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getToUCallBack</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>af45faec39053767f4a7a779586c24223</anchor>
      <arglist>(const UConverter *converter, UConverterToUCallback *action, const void **context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getFromUCallBack</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a2a2dcbf10e3b08a97ed0b06466d9e8a5</anchor>
      <arglist>(const UConverter *converter, UConverterFromUCallback *action, const void **context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setToUCallBack</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ab1f96fe9de8e2ee39159f748a8d33a4b</anchor>
      <arglist>(UConverter *converter, UConverterToUCallback newAction, const void *newContext, UConverterToUCallback *oldAction, const void **oldContext, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setFromUCallBack</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a59fdaf2cf5dc57d738ed7a7657f6b03a</anchor>
      <arglist>(UConverter *converter, UConverterFromUCallback newAction, const void *newContext, UConverterFromUCallback *oldAction, const void **oldContext, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_fromUnicode</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a4a1f09772549fbcd7dd782297212c19f</anchor>
      <arglist>(UConverter *converter, char **target, const char *targetLimit, const UChar **source, const UChar *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_toUnicode</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>afbea5eb35a5ec1517a548ffc868a5599</anchor>
      <arglist>(UConverter *converter, UChar **target, const UChar *targetLimit, const char **source, const char *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_fromUChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a31bd5a5af440108a1a51bb0234ad32ac</anchor>
      <arglist>(UConverter *cnv, char *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_toUChars</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1493c21231f237e6197c027229389ff8</anchor>
      <arglist>(UConverter *cnv, UChar *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>ucnv_getNextUChar</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>aaf391b89870fd88b3da838eff1bd6ba6</anchor>
      <arglist>(UConverter *converter, const char **source, const char *sourceLimit, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_convertEx</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>af4c967c5afa207d064c24e19256586b6</anchor>
      <arglist>(UConverter *targetCnv, UConverter *sourceCnv, char **target, const char *targetLimit, const char **source, const char *sourceLimit, UChar *pivotStart, UChar **pivotSource, UChar **pivotTarget, const UChar *pivotLimit, UBool reset, UBool flush, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_convert</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a2bdb6b1d3ac4069808348eb6961ce63d</anchor>
      <arglist>(const char *toConverterName, const char *fromConverterName, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_toAlgorithmic</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1b619c24f88f8b10f97b64ab1dc4fc86</anchor>
      <arglist>(UConverterType algorithmicType, UConverter *cnv, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_fromAlgorithmic</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a5cd24dc4d6c2fbec8c6481309459b7d5</anchor>
      <arglist>(UConverter *cnv, UConverterType algorithmicType, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_flushCache</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ab0c427930c575dac20c0166ad4ef0986</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_countAvailable</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a50a330a3628673c9a6a7eb6be30b94ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getAvailableName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a22feff7d04fe7a9dc62d1f7ecb4eb647</anchor>
      <arglist>(int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucnv_openAllNames</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a23282ab66962108aa8eba7096e4499ed</anchor>
      <arglist>(UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>ucnv_countAliases</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ab3db46e3d4319ea85ebfde031e2e1bcb</anchor>
      <arglist>(const char *alias, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getAlias</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a686d4e3d2905f3e2819577391fd08c2c</anchor>
      <arglist>(const char *alias, uint16_t n, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_getAliases</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ae16a53f19829be2f5227d0259e3120eb</anchor>
      <arglist>(const char *alias, const char **aliases, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucnv_openStandardNames</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ab6901c3ca8e871ef1efaa14d7f653d40</anchor>
      <arglist>(const char *convName, const char *standard, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>ucnv_countStandards</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a78bdc2c475baff8029a6a9782b862384</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getStandard</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a96c90729859689a2ae7c29f3f7f1306a</anchor>
      <arglist>(uint16_t n, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getStandardName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a2e1030c73ab423ec40b7b947320936c2</anchor>
      <arglist>(const char *name, const char *standard, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getCanonicalName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1601f0d125e4b695ad1f84d6db441e6e</anchor>
      <arglist>(const char *alias, const char *standard, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_getDefaultName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a611d8da795489692511b07525a2f8b95</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setDefaultName</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1a2aaa1bd664b8b53da8cb50f1025bf9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_fixFileSeparator</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a2962e5b30828db79345b5250cf411f90</anchor>
      <arglist>(const UConverter *cnv, UChar *source, int32_t sourceLen)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucnv_isAmbiguous</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ac38aa0a9daa58ca49dda17b2b7d40b8c</anchor>
      <arglist>(const UConverter *cnv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_setFallback</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a117c45b5c1d746c6f532f44985b686e4</anchor>
      <arglist>(UConverter *cnv, UBool usesFallback)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucnv_usesFallback</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a036433918c08965c4c687892036db3eb</anchor>
      <arglist>(const UConverter *cnv)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucnv_detectUnicodeSignature</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>ad43176e199992be4069b67177ce6d3ce</anchor>
      <arglist>(const char *source, int32_t sourceLength, int32_t *signatureLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_fromUCountPending</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a1d848a6a75fc14c38485ecd908694ac0</anchor>
      <arglist>(const UConverter *cnv, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnv_toUCountPending</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a607e2305f45490a01fd8a32261e32e0c</anchor>
      <arglist>(const UConverter *cnv, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucnv_isFixedWidth</name>
      <anchorfile>ucnv_8h.html</anchorfile>
      <anchor>a7dde59e660b06fe6a47cc55b38e0a68e</anchor>
      <arglist>(UConverter *cnv, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucnv_cb.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucnv__cb_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ucnv_8h" name="ucnv.h" local="yes" imported="no">unicode/ucnv.h</includes>
    <includes id="ucnv__err_8h" name="ucnv_err.h" local="yes" imported="no">unicode/ucnv_err.h</includes>
    <member kind="function">
      <type>void</type>
      <name>ucnv_cbFromUWriteBytes</name>
      <anchorfile>ucnv__cb_8h.html</anchorfile>
      <anchor>aedc62c69262f4600b8822ff2c6e9e9a2</anchor>
      <arglist>(UConverterFromUnicodeArgs *args, const char *source, int32_t length, int32_t offsetIndex, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_cbFromUWriteSub</name>
      <anchorfile>ucnv__cb_8h.html</anchorfile>
      <anchor>a990ef0fed110f7aef812cbf695cee377</anchor>
      <arglist>(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_cbFromUWriteUChars</name>
      <anchorfile>ucnv__cb_8h.html</anchorfile>
      <anchor>a264e1a4c911822b1bd6cea0745638904</anchor>
      <arglist>(UConverterFromUnicodeArgs *args, const UChar **source, const UChar *sourceLimit, int32_t offsetIndex, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_cbToUWriteUChars</name>
      <anchorfile>ucnv__cb_8h.html</anchorfile>
      <anchor>abc92f1034969edf613e1bcafd5ae769b</anchor>
      <arglist>(UConverterToUnicodeArgs *args, const UChar *source, int32_t length, int32_t offsetIndex, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnv_cbToUWriteSub</name>
      <anchorfile>ucnv__cb_8h.html</anchorfile>
      <anchor>a5a888b4e94100c12a88339ae3587688a</anchor>
      <arglist>(UConverterToUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucnv_err.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucnv__err_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">UConverterFromUnicodeArgs</class>
    <class kind="struct">UConverterToUnicodeArgs</class>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_SUB_STOP_ON_ILLEGAL</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>aa8c288f6eb55d9ea66fea6c296b47028</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_SKIP_STOP_ON_ILLEGAL</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>acc126b90eb4ad4c56a80a410cd2e6618</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_ICU</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>ac495873fd8482ea549bf3a69f05238e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_JAVA</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a27a6288fd441632f5831059717edc8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_C</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>af009753d9ac156cc4f6d903750e19180</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_XML_DEC</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a5d8707ebd95f15f906a9cc09bc8d77f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_XML_HEX</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a02c50a2a3e9816a0c7a10e0255ab62af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_UNICODE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>aa869e106eab36abe55a280db2d8baafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCNV_ESCAPE_CSS2</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a62720bbcd309a8318c29e668cb103e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UConverter</type>
      <name>UConverter</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a0c2dcfbf71ad577f5285869e1ceb26b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UConverterCallbackReason</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_UNASSIGNED</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aaf238357c53179269ee75cc7d34debb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_ILLEGAL</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aa618bbe4096e7c602bc8479215a0887ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_IRREGULAR</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aa214a453e0f6abf7dbed73388ec98a0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_RESET</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aa89548282ccc762b64c9ef81ee3322cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_CLOSE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aad0ea944d62e4f53f31d68c19f8afd662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCNV_CLONE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a19e1a4d55a7679634e84b241b00de01aafaf767d3f63c2341d448b5e0315cac42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_FROM_U_CALLBACK_STOP</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a1e9f87a69d75288c0f93bd77a6f2c9db</anchor>
      <arglist>(const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_TO_U_CALLBACK_STOP</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a28e0f36c3873f1fc2ec17e3f62068822</anchor>
      <arglist>(const void *context, UConverterToUnicodeArgs *toUArgs, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_FROM_U_CALLBACK_SKIP</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a04733e710f31b9a3094af40a89f131aa</anchor>
      <arglist>(const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_FROM_U_CALLBACK_SUBSTITUTE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>abeb5d13b73cfb87078e73fc328d3bedb</anchor>
      <arglist>(const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_FROM_U_CALLBACK_ESCAPE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a7491b95493c8cbc92030827e8fe3f118</anchor>
      <arglist>(const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_TO_U_CALLBACK_SKIP</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>af506570ede010370e14d0faaa2856345</anchor>
      <arglist>(const void *context, UConverterToUnicodeArgs *toUArgs, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_TO_U_CALLBACK_SUBSTITUTE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>ad0fe791083c74b1a8d9e13c760619162</anchor>
      <arglist>(const void *context, UConverterToUnicodeArgs *toUArgs, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UCNV_TO_U_CALLBACK_ESCAPE</name>
      <anchorfile>ucnv__err_8h.html</anchorfile>
      <anchor>a63a4c59d5fb9d40b4f5e705b7800791c</anchor>
      <arglist>(const void *context, UConverterToUnicodeArgs *toUArgs, const char *codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode *err)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucnvsel.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ucnvsel_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <includes id="utf16_8h" name="utf16.h" local="yes" imported="no">unicode/utf16.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <includes id="ucnv_8h" name="ucnv.h" local="yes" imported="no">unicode/ucnv.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>struct UConverterSelector</type>
      <name>UConverterSelector</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>a4bc48420c52373dc8016be5391bcc723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UConverterSelector *</type>
      <name>ucnvsel_open</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>a0b2460b9690ded5c739a77d25b68383b</anchor>
      <arglist>(const char *const *converterList, int32_t converterListSize, const USet *excludedCodePoints, const UConverterUnicodeSet whichSet, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucnvsel_close</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>a2866ab1e5b479153d8c9ea4d0b2eee1a</anchor>
      <arglist>(UConverterSelector *sel)</arglist>
    </member>
    <member kind="function">
      <type>UConverterSelector *</type>
      <name>ucnvsel_openFromSerialized</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>ae7dd7980455be33af8a36c8559915b78</anchor>
      <arglist>(const void *buffer, int32_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucnvsel_serialize</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>a9b173a92d3e5206f3fc965523483ddc5</anchor>
      <arglist>(const UConverterSelector *sel, void *buffer, int32_t bufferCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucnvsel_selectForString</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>ab3e9d09c18b3c0955fa9c1117cec24c6</anchor>
      <arglist>(const UConverterSelector *sel, const UChar *s, int32_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucnvsel_selectForUTF8</name>
      <anchorfile>ucnvsel_8h.html</anchorfile>
      <anchor>a8542180e560702a880255314d226c30d</anchor>
      <arglist>(const UConverterSelector *sel, const char *s, int32_t length, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucol.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ucol_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="unorm_8h" name="unorm.h" local="yes" imported="no">unicode/unorm.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <includes id="uscript_8h" name="uscript.h" local="yes" imported="no">unicode/uscript.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_COL_SAFECLONE_BUFFERSIZE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ab8706ece0706f5f3f2b2c3a9797ec01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UCollator</type>
      <name>UCollator</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a3c4eeb412a5fd72762e6245aa75ca081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UColAttributeValue</type>
      <name>UCollationStrength</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a6a967f36248b0a1bc7654f538ee8ba96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCollationResult</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8b4e71db8109af87f84ac1576e2b245d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_EQUAL</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8b4e71db8109af87f84ac1576e2b245dad62021a93c87f18e7d7400aeae76afbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_GREATER</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8b4e71db8109af87f84ac1576e2b245dab077d467fc9b8d2f5cdebdf04e9912ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_LESS</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8b4e71db8109af87f84ac1576e2b245da3ff43a44b34460a1ca53bbe88b35a624</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UColAttributeValue</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_DEFAULT</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa4463bb61ef754d062635567e42561a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_PRIMARY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aab304299c75f57c98a7d7de36e226c36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_SECONDARY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aac4748251d9391c813bec59234e74efb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_TERTIARY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa3723e1767f0718b1a74a9dfdabd9de77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_DEFAULT_STRENGTH</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aafd51e6b6d3a6930fa57e96f5352ecb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_QUATERNARY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa8a79d0941ea478c1360bd590748c9f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_IDENTICAL</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa506f0c7653777a4b344f7a5f633af26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_OFF</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa798c0f324ab1a796c44fc1ac5961580d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_ON</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aad6c6d3813dc17544960944d861893ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_SHIFTED</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa9d8c0e91ba648450330ca9dcb4d00079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_NON_IGNORABLE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aac90c0ea41c9c79eeb0054060b4f598dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_LOWER_FIRST</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aab81cb97ed24b4d28dff15521e74d3000</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_UPPER_FIRST</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acc801048729e684bcabed328be85f77aa20c4404d3b43e984d3afecfed7fbf3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UColReorderCode</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_DEFAULT</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a21f7a26a846970611988c3bd5540e292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_NONE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a18077893b37324c1d5753c60a437d9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_OTHERS</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a1053091a40da5ad91fca2530e17e5f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_SPACE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a961b335efb535ce3b480c927a82cfd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_FIRST</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887ac1cdea67134c7f0815454cf0e4914b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_PUNCTUATION</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a7403925d0681a31ae6548ff12308d8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_SYMBOL</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a46e6d81b83777db4bf754fa8175533ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_CURRENCY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887ae2dd17d6e761e782a4c3131e89a4fa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_DIGIT</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a574ecd4c743af4bc92c4316462bd9e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_REORDER_CODE_LIMIT</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ae491f1262ff311f19e74830eb685f887a33a969251c0d8437609c6cdd40c11da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UColAttribute</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_FRENCH_COLLATION</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca580844224ecd5721b5bf4716426a268a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_ALTERNATE_HANDLING</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826cae979ae2dd00543d6ac89936fcc500f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_CASE_FIRST</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca04e048554399e8d90e0f84ab8a059c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_CASE_LEVEL</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca5439a6821b5e3b9de592098dabef1f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_NORMALIZATION_MODE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826caef5f0957c1d75026720fe4e1fafabc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_DECOMPOSITION_MODE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca62a765fae5bc78a300665939f3770803</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_STRENGTH</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca46616a060f4d1d81196f27b51ef5f9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_HIRAGANA_QUATERNARY_MODE</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca60b94665bb1469bfed55543e3e9e3651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_NUMERIC_COLLATION</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a583fbe7fc4a850e2fcc692e766d2826ca2efca83794416797ef04abda570c6f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UColRuleOption</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a46363290036b8dffd6862c35e7b5872f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_TAILORING_ONLY</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a46363290036b8dffd6862c35e7b5872fac2d59cd7a59b9be9fe1b38dc4de593f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_FULL_RULES</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a46363290036b8dffd6862c35e7b5872fa6e027e190a33aa58b026afd48a97b67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UColBoundMode</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa3b11e0e399df62d3048174b8309657c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_BOUND_LOWER</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa3b11e0e399df62d3048174b8309657ca07971cd4fb76b1ac281462f5b2a70fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_BOUND_UPPER</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa3b11e0e399df62d3048174b8309657ca398433c7f3d342924c2cc3d537dd75ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCOL_BOUND_UPPER_LONG</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa3b11e0e399df62d3048174b8309657cab3acc199e3c1c44251a2b7f2d13633a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>ucol_open</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a4721e4c0a519bb0139a874e191223590</anchor>
      <arglist>(const char *loc, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>ucol_openRules</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa128ea0ed3869415c1c96a9a2c997c2d</anchor>
      <arglist>(const UChar *rules, int32_t rulesLength, UColAttributeValue normalizationMode, UCollationStrength strength, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>ucol_openFromShortString</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a39ccd61fb814dc0d2e759bc0cfe4c80d</anchor>
      <arglist>(const char *definition, UBool forceDefaults, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getContractions</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a60a1437827161a2f33a4dd44e27ef02a</anchor>
      <arglist>(const UCollator *coll, USet *conts, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_getContractionsAndExpansions</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a395afb2b873efee82430ac0ab2388250</anchor>
      <arglist>(const UCollator *coll, USet *contractions, USet *expansions, UBool addPrefixes, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_close</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a68fce4fae47371bfece8a288ef05f11f</anchor>
      <arglist>(UCollator *coll)</arglist>
    </member>
    <member kind="function">
      <type>UCollationResult</type>
      <name>ucol_strcoll</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa194d8b0092106c0fea4070060790694</anchor>
      <arglist>(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucol_greater</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa9eb676fde40581f43cc7eb24b597e0e</anchor>
      <arglist>(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucol_greaterOrEqual</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ad04f5b8001a319c71f1dc2da06519091</anchor>
      <arglist>(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucol_equal</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ad592bf65b8b5859ea06ab565f0e6e869</anchor>
      <arglist>(const UCollator *coll, const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength)</arglist>
    </member>
    <member kind="function">
      <type>UCollationResult</type>
      <name>ucol_strcollIter</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ad62f08d678b62cf17825f3237ff0315c</anchor>
      <arglist>(const UCollator *coll, UCharIterator *sIter, UCharIterator *tIter, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCollationStrength</type>
      <name>ucol_getStrength</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>abc4eaea4396300af64c5891fc6c4c0a6</anchor>
      <arglist>(const UCollator *coll)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_setStrength</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>adcbb3eee538142a06a89e066400dd9b7</anchor>
      <arglist>(UCollator *coll, UCollationStrength strength)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getReorderCodes</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a6e3ad662b7141615599dbe11c3c0e328</anchor>
      <arglist>(const UCollator *coll, int32_t *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_setReorderCodes</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a7473236c4a96983fc1c53c9ab566c2e3</anchor>
      <arglist>(UCollator *coll, const int32_t *reorderCodes, int32_t reorderCodesLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getEquivalentReorderCodes</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a3d52959dc92e90d2bccc800fab679e65</anchor>
      <arglist>(int32_t reorderCode, int32_t *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getDisplayName</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa29f34789ceeada3021c1219c93d7653</anchor>
      <arglist>(const char *objLoc, const char *dispLoc, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucol_getAvailable</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a0e375872b21ab6286258638dcf3817c0</anchor>
      <arglist>(int32_t localeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_countAvailable</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>abd3f9bd0c933c74cb36723f524c91d19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucol_openAvailableLocales</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a29eccc8e4136301e7c6b5e295cefda9e</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucol_getKeywords</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a5a8d9b9578d6238395ddb748e2ebe1dd</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucol_getKeywordValues</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a1a647734f3924283c92f6fbbafcc40eb</anchor>
      <arglist>(const char *keyword, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucol_getKeywordValuesForLocale</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a2b188d4076f7603844bb7896f1cc0e43</anchor>
      <arglist>(const char *key, const char *locale, UBool commonlyUsed, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getFunctionalEquivalent</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>af8d6d6df31c7fad5a4f93cc8beb6eeaf</anchor>
      <arglist>(char *result, int32_t resultCapacity, const char *keyword, const char *locale, UBool *isAvailable, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ucol_getRules</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8085a8ab866292a6ff92720b861aa5a6</anchor>
      <arglist>(const UCollator *coll, int32_t *length)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getShortDefinitionString</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a762daeafd0df7cc65fd120a1e802cbbe</anchor>
      <arglist>(const UCollator *coll, const char *locale, char *buffer, int32_t capacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_normalizeShortDefinitionString</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a4527a9eefdd7e071fff9d87b2e418cfa</anchor>
      <arglist>(const char *source, char *destination, int32_t capacity, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getSortKey</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a1f83f9c96a0950e2c22bd5c5c31ff6bf</anchor>
      <arglist>(const UCollator *coll, const UChar *source, int32_t sourceLength, uint8_t *result, int32_t resultLength)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_nextSortKeyPart</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a8c8ed92bb13577d6cd9a129b38a05d69</anchor>
      <arglist>(const UCollator *coll, UCharIterator *iter, uint32_t state[2], uint8_t *dest, int32_t count, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getBound</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>acbaf099e596089c777f297a39d2af753</anchor>
      <arglist>(const uint8_t *source, int32_t sourceLength, UColBoundMode boundType, uint32_t noOfLevels, uint8_t *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_getVersion</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>af756972781ac556a62e48cbd509ea4a6</anchor>
      <arglist>(const UCollator *coll, UVersionInfo info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_getUCAVersion</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a0c83c7005da2dbb920437165d6248ce5</anchor>
      <arglist>(const UCollator *coll, UVersionInfo info)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_mergeSortkeys</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a18de00ad7c0da5b2f23dfa5facdc3901</anchor>
      <arglist>(const uint8_t *src1, int32_t src1Length, const uint8_t *src2, int32_t src2Length, uint8_t *dest, int32_t destCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_setAttribute</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a3a2302e315d5b474f94354cffedeecd7</anchor>
      <arglist>(UCollator *coll, UColAttribute attr, UColAttributeValue value, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UColAttributeValue</type>
      <name>ucol_getAttribute</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>af96cc7dc7da7981d2d12356b104e058a</anchor>
      <arglist>(const UCollator *coll, UColAttribute attr, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ucol_setVariableTop</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a0e9c28a8b8b88890722daca111207688</anchor>
      <arglist>(UCollator *coll, const UChar *varTop, int32_t len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ucol_getVariableTop</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a802cc1a4f7f3e9de7089802294377867</anchor>
      <arglist>(const UCollator *coll, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_restoreVariableTop</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ad10de03e206f2b9dceb59b59e75bc7d8</anchor>
      <arglist>(UCollator *coll, const uint32_t varTop, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>ucol_safeClone</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a917cd8e16df3b35bbe97dd96d881f227</anchor>
      <arglist>(const UCollator *coll, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getRulesEx</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a318cfd0bef6d92a7aab8bef55a4e1bf7</anchor>
      <arglist>(const UCollator *coll, UColRuleOption delta, UChar *buffer, int32_t bufferLen)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucol_getLocale</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a9df9e4a23459301d723f16600ca2a7b3</anchor>
      <arglist>(const UCollator *coll, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucol_getLocaleByType</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>ade40592efde5935d3c0cd6f940d4c2e4</anchor>
      <arglist>(const UCollator *coll, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>ucol_getTailoredSet</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a1982f184bca8adaa848144a1959ff235</anchor>
      <arglist>(const UCollator *coll, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UColAttributeValue</type>
      <name>ucol_getAttributeOrDefault</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>aa298da2d5cc29b990f38ab4d872b0cc8</anchor>
      <arglist>(const UCollator *coll, UColAttribute attr, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucol_equals</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>afb32cdae292758ce09c06d052d17806c</anchor>
      <arglist>(const UCollator *source, const UCollator *target)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getUnsafeSet</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a05602ef69e9303eab4f27f082da78cdf</anchor>
      <arglist>(const UCollator *coll, USet *unsafe, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_forgetUCA</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a622f6a657b9e66de99ab90126d20e0c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_prepareShortStringOpen</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>af94c268dea700c8772e7955dc2a75759</anchor>
      <arglist>(const char *definition, UBool forceDefaults, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_cloneBinary</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a2719995a75ebed7aacc1419bb2b781db</anchor>
      <arglist>(const UCollator *coll, uint8_t *buffer, int32_t capacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>ucol_openBinary</name>
      <anchorfile>ucol_8h.html</anchorfile>
      <anchor>a467ea0dde69a6990f6ecbb7e30da6003</anchor>
      <arglist>(const uint8_t *bin, int32_t length, const UCollator *base, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucoleitr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ucoleitr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UCOL_NULLORDER</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a07efa63d179b459db763ffcfe16fdef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCOL_PROCESSED_NULLORDER</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>aeccb9dc10190906d7c09285ab1d02bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UCollationElements</type>
      <name>UCollationElements</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a5f2296c3961afacfbba2a5ee850ca1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UCollationElements *</type>
      <name>ucol_openElements</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a1b02b847bb095a5525ed4b7f55a69eb5</anchor>
      <arglist>(const UCollator *coll, const UChar *text, int32_t textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_keyHashCode</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a705331b3ca250e3f5f74accfee861fa4</anchor>
      <arglist>(const uint8_t *key, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_closeElements</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a38185a0b06fe59058c4ed4a87c6d7ff9</anchor>
      <arglist>(UCollationElements *elems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_reset</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>af9b4a63d9bba05b4635c0d2626b45a37</anchor>
      <arglist>(UCollationElements *elems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_forceHanImplicit</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a3ff5c01970b57cd1f26c886613fcec6c</anchor>
      <arglist>(UCollationElements *elems, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_next</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>afac0d24bf026d9ea4933cef911022370</anchor>
      <arglist>(UCollationElements *elems, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_previous</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>ad6718e09e014e8dcde9f0bae75fe96f5</anchor>
      <arglist>(UCollationElements *elems, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>ucol_nextProcessed</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>ad4e6efc24ee31f2429a97611342b82c8</anchor>
      <arglist>(UCollationElements *elems, int32_t *ixLow, int32_t *ixHigh, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>ucol_previousProcessed</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a7dae07b3d61162039e0fdcf1bf549261</anchor>
      <arglist>(UCollationElements *elems, int32_t *ixLow, int32_t *ixHigh, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getMaxExpansion</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>ab87f69840736227870f8b1d47b6ddffd</anchor>
      <arglist>(const UCollationElements *elems, int32_t order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_setText</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>adb1bfe771ae3ff78dd52be29390e81fe</anchor>
      <arglist>(UCollationElements *elems, const UChar *text, int32_t textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_getOffset</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a03951847045960de23b022dc4722cda0</anchor>
      <arglist>(const UCollationElements *elems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucol_setOffset</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>aa301bde0ec5eca09f5f069dd3ce934c4</anchor>
      <arglist>(UCollationElements *elems, int32_t offset, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_primaryOrder</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a346bfd807642b81527581c6194f003dd</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_secondaryOrder</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a5afa9446c3f57ab675f74d91d4d04b2e</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucol_tertiaryOrder</name>
      <anchorfile>ucoleitr_8h.html</anchorfile>
      <anchor>a469d805add17198dc5c118700c04b35a</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uconfig.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uconfig_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_ONLY_COLLATION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>ada53992bcd80e4cedcaa19627b80ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_FILE_IO</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>a9c204f328ca0f348182d7fb6d20c47e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_CONVERSION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>aaf41571c9594c26947640add578d9b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_LEGACY_CONVERSION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>acabbeca768429f4218c03052f51a18ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_NORMALIZATION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>aa2d38e601f89fb17428f51948c584c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_BREAK_ITERATION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>a9805f6a1ddbab690707dd5bac02acb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_IDNA</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>ab7b7ed2538ac4baf798c6d259ea031ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_MSGPAT_DEFAULT_APOSTROPHE_MODE</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>aec0a2473ec4ff7108b8bb6d0eee8188f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_COLLATION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>a8df51da8b14d49bb7f30f4d85b696f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_FORMATTING</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>a5275c907e69e5e080233e6226abf0979</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_TRANSLITERATION</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>a1738a54258452739e85531f850710bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_REGULAR_EXPRESSIONS</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>abadcf86fb2ad43ae41fd30f750cc67f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UCONFIG_NO_SERVICE</name>
      <anchorfile>uconfig_8h.html</anchorfile>
      <anchor>acf867d378b4d1db31be19d6a29cc16fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucsdet.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ucsdet_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <member kind="typedef">
      <type>struct UCharsetDetector</type>
      <name>UCharsetDetector</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a8f341f9c43bf58b112afd70c8a94c45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UCharsetMatch</type>
      <name>UCharsetMatch</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a4e40a6a6dae057f9257e144fc65ba667</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UCharsetDetector *</type>
      <name>ucsdet_open</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>abf2d3c7b731982895433cfbeb6c29cdd</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucsdet_close</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a84dab4d2c56fedb624a01db170ba698c</anchor>
      <arglist>(UCharsetDetector *ucsd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucsdet_setText</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>abb128d8c30fd92d47110a3ca3499c5b2</anchor>
      <arglist>(UCharsetDetector *ucsd, const char *textIn, int32_t len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ucsdet_setDeclaredEncoding</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a94e2837151f289f01977a211c8a8e06f</anchor>
      <arglist>(UCharsetDetector *ucsd, const char *encoding, int32_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UCharsetMatch *</type>
      <name>ucsdet_detect</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>aff2633b5055d472cff4108d94f97cf7d</anchor>
      <arglist>(UCharsetDetector *ucsd, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UCharsetMatch **</type>
      <name>ucsdet_detectAll</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a307dfacd517a92891d1f98d513429bda</anchor>
      <arglist>(UCharsetDetector *ucsd, int32_t *matchesFound, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucsdet_getName</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>ab9433e14dbe7704a4cf9b2b2f1a7377b</anchor>
      <arglist>(const UCharsetMatch *ucsm, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucsdet_getConfidence</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>aa1dd7ce8c727d855697aac1f35df71ed</anchor>
      <arglist>(const UCharsetMatch *ucsm, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ucsdet_getLanguage</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a54b1e448b1d9cce1ac017962aaa801aa</anchor>
      <arglist>(const UCharsetMatch *ucsm, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucsdet_getUChars</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a30fd9ddb4090bd730caa49c22a3880e1</anchor>
      <arglist>(const UCharsetMatch *ucsm, UChar *buf, int32_t cap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucsdet_getAllDetectableCharsets</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a60dcfd7a2b826b995c86becf2f802016</anchor>
      <arglist>(const UCharsetDetector *ucsd, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucsdet_isInputFilterEnabled</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>a04e3e10583476b1b53a677ebb5acfe67</anchor>
      <arglist>(const UCharsetDetector *ucsd)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucsdet_enableInputFilter</name>
      <anchorfile>ucsdet_8h.html</anchorfile>
      <anchor>ad4911fca8b4685bba2c1b77ea2d2b535</anchor>
      <arglist>(UCharsetDetector *ucsd, UBool filter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ucurr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ucurr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <member kind="typedef">
      <type>const void *</type>
      <name>UCurrRegistryKey</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a2bac7adc785f3b6ec275a08c29dea02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCurrNameStyle</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a881ffe99944d926413324029c9bd577f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_SYMBOL_NAME</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a881ffe99944d926413324029c9bd577fa9e4b934bc829cdbeba400402c8001af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_LONG_NAME</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a881ffe99944d926413324029c9bd577fac1c4647fa878b581afcdb666831a953a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCurrCurrencyType</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_ALL</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507dad58696703c65a5541341abe22a881120</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_COMMON</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507daffc3cdb8ea2b07083f4e54fbdf197673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_UNCOMMON</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507da5c64a8d9a686cdfcb0dabafa7286fcf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_DEPRECATED</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507daebab726e2ecae81cc7d8c580b75dfc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCURR_NON_DEPRECATED</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a22f961d6201d428f4ef188018ec1507da8c0921905de7279fe0a27dff4d23dda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucurr_forLocale</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a86d1b8b7eea49cec5e6c399dd2c786ab</anchor>
      <arglist>(const char *locale, UChar *buff, int32_t buffCapacity, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UCurrRegistryKey</type>
      <name>ucurr_register</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>aa8f475e76ca6f85b2a6a86e6997a7b16</anchor>
      <arglist>(const UChar *isoCode, const char *locale, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucurr_unregister</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>aa57cfd9f87363a0a139db11ab71d610f</anchor>
      <arglist>(UCurrRegistryKey key, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ucurr_getName</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a99e4d6409d1c015a6c331aa87fe1863b</anchor>
      <arglist>(const UChar *currency, const char *locale, UCurrNameStyle nameStyle, UBool *isChoiceFormat, int32_t *len, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ucurr_getPluralName</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>acc9adb69459d712bc18e3e167dc5ec2a</anchor>
      <arglist>(const UChar *currency, const char *locale, UBool *isChoiceFormat, const char *pluralCount, int32_t *len, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucurr_getDefaultFractionDigits</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a23a644db1cc8c9ad32d587271dabbfd8</anchor>
      <arglist>(const UChar *currency, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ucurr_getRoundingIncrement</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a1c0327a943d81597290f598b479b76ca</anchor>
      <arglist>(const UChar *currency, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucurr_openISOCurrencies</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a68308bf94c73c4257c1f857339db332a</anchor>
      <arglist>(uint32_t currType, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ucurr_isAvailable</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a3a4a1665fb0349d9a9cf1599ca3218dc</anchor>
      <arglist>(const UChar *isoCode, UDate from, UDate to, UErrorCode *errorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucurr_countCurrencies</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a811fa3bab3337a989e8807558a922087</anchor>
      <arglist>(const char *locale, UDate date, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ucurr_forLocaleAndDate</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a1f63d3ad27f056137b81f3799c88d6e8</anchor>
      <arglist>(const char *locale, UDate date, int32_t index, UChar *buff, int32_t buffCapacity, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ucurr_getKeywordValuesForLocale</name>
      <anchorfile>ucurr_8h.html</anchorfile>
      <anchor>a1fae1d6718c3a936ec59bbd738a18251</anchor>
      <arglist>(const char *key, const char *locale, UBool commonlyUsed, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udat.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>udat_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="ucal_8h" name="ucal.h" local="yes" imported="no">unicode/ucal.h</includes>
    <includes id="unum_8h" name="unum.h" local="yes" imported="no">unicode/unum.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_MINUTE_SECOND</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a2ebb62edaacb0ce3b81c571ce64cfea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR24_MINUTE</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ab8e77d2b943b4b4c82ae2ecca75069e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR24_MINUTE_SECOND</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a3bc594c0507802064204a0cd53c97a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_MINUTE_SECOND</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aaebc2b87afca0f0af385d8830e09e809</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_STANDALONE_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a2546952b2d4f4129d4499fa172be4bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_ABBR_STANDALONE_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a75c199154cdd27e0cf4e444b8e1333dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_QUARTER</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ab40f9f20523df2b6b5b6897397de1046</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_ABBR_QUARTER</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>af52cb5e42427679940f991b20f930213</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_MINUTE</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a9d13db3f8187946ed669030f8c893750</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>af05cce1e7b026caa659cf10bc5a311a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ae1deba818e0a16404ca60b9ab7795ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_NUM_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a947bfab36df7d4738599822b579d06e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_NUM_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ab1a3c928af7d3d58fdb755f8009ef6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_NUM_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a86e8a6412263abef62c7a675aa8533f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a7a1c305297760c9330d01aa41866c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_ABBR_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a33f3aeb0385700d0d129885b34c04f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a6b06fb7b6af225771b8782583e6b929e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_ABBR_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a0bcb5058ba77ef269478d2e6ca16d5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>abd5cc4d90c272d17dd04fff39e7dd03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_ABBR_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a0c26bfea8460a52a1c760208ba454ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a2f9fe5ed05a50bd15c56d29e742266e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a9c91459683c4c2621d5922cb081764cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_MONTH_WEEKDAY_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ab4a3658401c0caee157e42946acdd4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a8ed9ca005c11076b7bba60d01c22d80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_ABBR_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a569699caaab339893ece63646387435d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_YEAR_NUM_MONTH_DAY</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>abc29ce2fec42737a312e4933ba2b6fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_NUM_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ad7dc57865c9e297ed72d83d6b8350e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_ABBR_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a43281b9ba73d8a6c8783eb12621d6636</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_MONTH</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a9b37e80debb2d27fad599b307aafb9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_MINUTE_GENERIC_TZ</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a9b8ed17f17c97935b120f576ea744e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_MINUTE_TZ</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a1c57ce1151a8123812778ce6bc2edcce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aeee3974b6e4f3d8321041827df4909ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_GENERIC_TZ</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ae67b2ab7fcbf3e4585300fd724c5b478</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UDAT_HOUR_TZ</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>afffe6ac491154b0c2d5e3ae310ea42b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>UDateFormat</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a27d96fa46db679d5b8583dff2e6c023f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UDateFormatSymbols</type>
      <name>UDateFormatSymbols</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a9815ff307c5f2a0e5464941e5a78f564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateFormatStyle</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_FULL</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5aa443b8f36bc7fcde51135f5603f47ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_LONG</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5ad1b6796ad8a20834399aa08cd85715e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_MEDIUM</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5ad327d3ae30d9c66ad8f1e9551a96d66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_SHORT</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5a9af7ddce56bd3e226d12cbe97b2149d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DEFAULT</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5a4972c793a63b7972a1ed4a3f13b185f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_RELATIVE</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5a4213654404111fe73b35ad9d30adfb15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_NONE</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5ad75feb521c2adac6f1bc7df96bbc43a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_IGNORE</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb4c5a95efb888d04d38db7b3efff0c5a5fdf996e633ee3ba6fd6293dd4d6675d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateFormatField</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_ERA_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a7b9dc14d6e8dbb3ae0ca14397c843419</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_YEAR_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a750478092f23a7c078b3ed1cd24df854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_MONTH_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a3ea582085a5a962fadbcfa28becd499d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DATE_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a2d5073e5d56ac063b4987d1c4377eb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_HOUR_OF_DAY1_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2afd96102e0a2e8a4400c19dc5eaaf2f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_HOUR_OF_DAY0_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2ae7769f40d8715667739098650b8f295d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_MINUTE_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2ab3ae4f1a655e29ba328a5655615e84b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_SECOND_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2aacac57ee221ca3fc2d77017174102575</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_FRACTIONAL_SECOND_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a8b3e23d274c00057bb59072b9e79f537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DAY_OF_WEEK_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a6b1e5ebf71b28539c0a3fcf9b8523bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DAY_OF_YEAR_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a861a2b15e89a15657ba310adf3c0aecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DAY_OF_WEEK_IN_MONTH_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2aa0a19a9f4ffd5e77b9492769bed5a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_WEEK_OF_YEAR_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2ad0d5bd40929516f78356aa44dadbe831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_WEEK_OF_MONTH_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a874399459c1b2960852d407e41a126b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_AM_PM_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a0d598f4d4a10991bba38caa7202b6b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_HOUR1_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2aafe6cd2e2e49e22447c7b524484b822d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_HOUR0_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2abe3f2cf1247aada106b0ab1270e1e9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_TIMEZONE_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a1e5c8255271b95117bad5bf8515a646c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_YEAR_WOY_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2ac09a069a84b14d7559c5d7e34b08df35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_DOW_LOCAL_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a1f0d0b3a3282c4be930bed3b76a3e686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_EXTENDED_YEAR_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a54f345c72f8cb6329ded6af16df0625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_JULIAN_DAY_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a4ffdbeb31bc6e02bd18cd94605eb4a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_MILLISECONDS_IN_DAY_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a6bbea5dc13d36a9b024582e35150cc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_TIMEZONE_RFC_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a8458900160a4ef3ce3e44a15fe771c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_TIMEZONE_GENERIC_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2ab5b7da969581745e5546f14f8b49f136</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_DAY_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a8fcdf1e4ea11f9912c2951ca2e38bcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_MONTH_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2aeb1f400437caed50238ce8e3e725bd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_QUARTER_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a8295f12f838fbf81a6d15b70741be647</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_QUARTER_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a8130dc0ba4e257483a6f82442fa0e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_TIMEZONE_SPECIAL_FIELD</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a7145398de7511b5b61fb0c5810b04c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_FIELD_COUNT</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>adb09b47d4576513229f83f2e8f507fc2a5114893ce2cb9b449b3e700b9dfb99a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateFormatSymbolType</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_ERAS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a08c254470a3ccf54601366a382c4096d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_MONTHS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a9ed373834478559c7d8a0e4b5f562b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_SHORT_MONTHS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4ae55170b4b2f39b2c1f6dec9d0760e430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_WEEKDAYS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a5fd821bbbc7b56457c44ada3e2794e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_SHORT_WEEKDAYS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a466882a4413cadf03cf69fff097c4383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_AM_PMS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4af6e0ffb0ef064496a7e830d577cc39af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_LOCALIZED_CHARS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a83e9979507a07f585519cd0586d56f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_ERA_NAMES</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a526cd7f3bed5d9f73d8ceeb911ece557</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_NARROW_MONTHS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4abf77c407dd86d3c651b9f0341105e532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_NARROW_WEEKDAYS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a4b6f5bc9fac35a2d54b377bbb74f39ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_MONTHS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4ad5f57d64e831037d530f3f3ac8306687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_WEEKDAYS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a4df045234951b6cd210e0d65e8f87fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_QUARTERS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a723ae1a2cfef80bd69a4553602a292c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_SHORT_QUARTERS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a38dc73189c4327b534e61a3afb2eb78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDAT_STANDALONE_QUARTERS</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5eefb511a1a2cdc12bcbd06ed29880f4a443597ba2b4b2b6177e3b894d23795b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UCalendarDateFields</type>
      <name>udat_toCalendarDateField</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a5b2a1dba9fe1410435e0ef99f6ebe547</anchor>
      <arglist>(UDateFormatField field)</arglist>
    </member>
    <member kind="function">
      <type>UDateFormat *</type>
      <name>udat_open</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>abd4ca4c46e3b99021132071f2700dea8</anchor>
      <arglist>(UDateFormatStyle timeStyle, UDateFormatStyle dateStyle, const char *locale, const UChar *tzID, int32_t tzIDLength, const UChar *pattern, int32_t patternLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_close</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a94eadd762385ccd8d2dc1f79ea012be8</anchor>
      <arglist>(UDateFormat *format)</arglist>
    </member>
    <member kind="function">
      <type>UDateFormat *</type>
      <name>udat_clone</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ab5c7289da4ec4a22410293c5b17c4a2f</anchor>
      <arglist>(const UDateFormat *fmt, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_format</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a6b7a2e8ae0b620aa677ae6c9d469a0b9</anchor>
      <arglist>(const UDateFormat *format, UDate dateToFormat, UChar *result, int32_t resultLength, UFieldPosition *position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>udat_parse</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aaaec935480c28127c8bccf6c6612d71d</anchor>
      <arglist>(const UDateFormat *format, const UChar *text, int32_t textLength, int32_t *parsePos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_parseCalendar</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a2888d7bf0aedbc843fb8f096734ac0e8</anchor>
      <arglist>(const UDateFormat *format, UCalendar *calendar, const UChar *text, int32_t textLength, int32_t *parsePos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>udat_isLenient</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>af1139c0c38fb5303d93515e779a7aae2</anchor>
      <arglist>(const UDateFormat *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_setLenient</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a57ed6fe554770153a3fcedb11f050d14</anchor>
      <arglist>(UDateFormat *fmt, UBool isLenient)</arglist>
    </member>
    <member kind="function">
      <type>const UCalendar *</type>
      <name>udat_getCalendar</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a2db4f9c0b39c3c2077feed9ebbe24d58</anchor>
      <arglist>(const UDateFormat *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_setCalendar</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aa5d6d81ca5d4f65467f4224428628e65</anchor>
      <arglist>(UDateFormat *fmt, const UCalendar *calendarToSet)</arglist>
    </member>
    <member kind="function">
      <type>const UNumberFormat *</type>
      <name>udat_getNumberFormat</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>afe281ebe86b6d30073c56d04e05612d6</anchor>
      <arglist>(const UDateFormat *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_setNumberFormat</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a696182ba370c6de3e8504e7c01c22e74</anchor>
      <arglist>(UDateFormat *fmt, const UNumberFormat *numberFormatToSet)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>udat_getAvailable</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aeb8ced52c68790fa95f83c653d67d537</anchor>
      <arglist>(int32_t localeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_countAvailable</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a463b549b234d85a44313b46b5bfe3001</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>udat_get2DigitYearStart</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a13adfb58e128b9a99a427abc9e6fa112</anchor>
      <arglist>(const UDateFormat *fmt, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_set2DigitYearStart</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a0608acf2d8f1cbb08228d9b635054726</anchor>
      <arglist>(UDateFormat *fmt, UDate d, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_toPattern</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a00f8420f2b00ef9de8dbbc4be66e3db8</anchor>
      <arglist>(const UDateFormat *fmt, UBool localized, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_applyPattern</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a40ccd8b597ff95faa01ae00391a70e61</anchor>
      <arglist>(UDateFormat *format, UBool localized, const UChar *pattern, int32_t patternLength)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_getSymbols</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>aed73d44c01906572e8349d0307dafb27</anchor>
      <arglist>(const UDateFormat *fmt, UDateFormatSymbolType type, int32_t symbolIndex, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_countSymbols</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a7a178b7dc4d7faee652a31043560b779</anchor>
      <arglist>(const UDateFormat *fmt, UDateFormatSymbolType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_setSymbols</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>af5816372ab77e82d9c9e3a5cbd9ffbee</anchor>
      <arglist>(UDateFormat *format, UDateFormatSymbolType type, int32_t symbolIndex, UChar *value, int32_t valueLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>udat_getLocaleByType</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>ae1ea60a69402a5d60313db8164c2612b</anchor>
      <arglist>(const UDateFormat *fmt, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_toPatternRelativeDate</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>abd750ae8c3ae763934731eed44e80672</anchor>
      <arglist>(const UDateFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udat_toPatternRelativeTime</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a0741073c8008bcdbd591c334d4816c49</anchor>
      <arglist>(const UDateFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udat_applyPatternRelative</name>
      <anchorfile>udat_8h.html</anchorfile>
      <anchor>a1c40335a8a0377e36ea0849b1209e95a</anchor>
      <arglist>(UDateFormat *format, const UChar *datePattern, int32_t datePatternLength, const UChar *timePattern, int32_t timePatternLength, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udata.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>udata_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <class kind="struct">UDataInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>U_TREE_SEPARATOR</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3d33a3798f0bcb7a46ae662fbc4e4819</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TREE_SEPARATOR_STRING</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a4bcfcbd6c1d0a694ae00532cd2d38fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TREE_ENTRY_SEP_CHAR</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a8be002e64f35e45a4f8184ff8b78f557</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TREE_ENTRY_SEP_STRING</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>ab8c1adee7a40c51ee83c24ef769aed2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ICUDATA_ALIAS</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>ac1f62204384ab648418f081f2f80cefe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UDataMemory</type>
      <name>UDataMemory</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>acffec83601fda29bd4750b24f829f56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UDataMemoryIsAcceptable</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>acfdaae53275ad8652d514549d9d0dc3b</anchor>
      <arglist>(void *context, const char *type, const char *name, const UDataInfo *pInfo)</arglist>
    </member>
    <member kind="enumeration">
      <name>UDataFileAccess</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATA_FILES_FIRST</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1da57e5b79c8b3dcafea1847941b4d6716a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATA_ONLY_PACKAGES</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1da315dce52ee7ac48b4b56d3e221eb015c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATA_PACKAGES_FIRST</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1daf5d63aa31845f977654423ab44e2d1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATA_NO_FILES</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1dafdaa8c2572590b0bc461dea1182074bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATA_DEFAULT_ACCESS</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3a91c39b2841eb9f6d85e65771e39a1da3c8d97cc91d09863d9c49a258cfd1ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UDataMemory *</type>
      <name>udata_open</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3d908d77900b182403a375793ad35a86</anchor>
      <arglist>(const char *path, const char *type, const char *name, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UDataMemory *</type>
      <name>udata_openChoice</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a83c754e186afcef6aa6f2d5613ea6237</anchor>
      <arglist>(const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udata_close</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a2bbdfd96420a07385f9562182e088e84</anchor>
      <arglist>(UDataMemory *pData)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>udata_getMemory</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>aaeccef7974428ffb54f6fc2150a325bd</anchor>
      <arglist>(UDataMemory *pData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udata_getInfo</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a3ae28f16e3713263a70225117414f54a</anchor>
      <arglist>(UDataMemory *pData, UDataInfo *pInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udata_setCommonData</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a467bda719595adb58f959dde735e1153</anchor>
      <arglist>(const void *data, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udata_setAppData</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a406559067e309c05fb90b2d532f11835</anchor>
      <arglist>(const char *packageName, const void *data, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udata_setFileAccess</name>
      <anchorfile>udata_8h.html</anchorfile>
      <anchor>a8c5d958a5bfa2888e01c75f3006db3d4</anchor>
      <arglist>(UDataFileAccess access, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udatpg.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>udatpg_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>void *</type>
      <name>UDateTimePatternGenerator</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a41aa5fa585671c3b2e0bb2e90c30c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateTimePatternField</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_ERA_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03af2e44039bb0fdb50c1bc31e323cbd46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_YEAR_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03ada786243fbeffbcbe12445b05d82fa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_QUARTER_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a27e3bfb407c4501ef12c44885c803159</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MONTH_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a5ef5a4c2d9ccc5b92a2636a012407f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_WEEK_OF_YEAR_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a131b4c49846539ea7d6283775156fe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_WEEK_OF_MONTH_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03aedbf1cb6a57ccbb9724799d67fbdc5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_WEEKDAY_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a30f9a60cb9a8cba497ad1c1d3c6de2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_DAY_OF_YEAR_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a1f21860126aee872b3f7374e094494be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03ad93d688d893ec8af8e79d429ec4468b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_DAY_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a6a4cd711b9091a1d04b5097e3972284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_DAYPERIOD_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a421b7cfcfe7220c1732c91c46bb9e756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_HOUR_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03aee102352c14977764c77a400f712f425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MINUTE_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03afd1738fed5720fbec55be1cafdcb3f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_SECOND_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a6c41ab35226844ef8c401abff391599e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_FRACTIONAL_SECOND_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03aa5f9e4af321282b3c14e2d076b678b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_ZONE_FIELD</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03a76bb9f23123d7a1e047b8cb100328e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_FIELD_COUNT</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af4ac5e0a850e2f49084fc0bcfc07ed03ae543fb494963248f8de19b1f9d0990a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateTimePatternMatchOptions</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MATCH_NO_OPTIONS</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8a7ecba3f1d8b2a1dbcfb481edaf7f66f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MATCH_HOUR_FIELD_LENGTH</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8a2f95b1bbaa929dca304c83f032d2568a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MATCH_MINUTE_FIELD_LENGTH</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8a64df7efaaaff19e66b11c51a66c4203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MATCH_SECOND_FIELD_LENGTH</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8a6fc13c4f3c6d449326a6322215a0ea44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_MATCH_ALL_FIELDS_LENGTH</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab3c76ea5c08e4acb44e0ddc66c5831e8aee4494e2b7e68a780cf2f4aef195d99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDateTimePatternConflict</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a8ecf3c8a68ecb811372c59fa2cfad265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_NO_CONFLICT</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a8ecf3c8a68ecb811372c59fa2cfad265a10a25e59dcbd298663b28a6380b5cff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_BASE_CONFLICT</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a8ecf3c8a68ecb811372c59fa2cfad265a23c5ecebe90224a7d0718fd299939364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_CONFLICT</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a8ecf3c8a68ecb811372c59fa2cfad265a4a4e59e2d5069c00e8e5d65083462a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDATPG_CONFLICT_COUNT</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a8ecf3c8a68ecb811372c59fa2cfad265a591345f6cf30ead875319f22ae6ded00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UDateTimePatternGenerator *</type>
      <name>udatpg_open</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a7a625f7855a743cd377ea9cb2f8cb624</anchor>
      <arglist>(const char *locale, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UDateTimePatternGenerator *</type>
      <name>udatpg_openEmpty</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a76faa83bca85eda47918b721f7de0fcf</anchor>
      <arglist>(UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udatpg_close</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a2cfa97e0f00c6f439897fe37a2c0f07a</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg)</arglist>
    </member>
    <member kind="function">
      <type>UDateTimePatternGenerator *</type>
      <name>udatpg_clone</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a5452d195a0646510502d660313bd5226</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_getBestPattern</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a7f844bceff859d32de49583e3d496ac4</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t length, UChar *bestPattern, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_getBestPatternWithOptions</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a5327a64b164f975dc0636e36b4d0f02c</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t length, UDateTimePatternMatchOptions options, UChar *bestPattern, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_getSkeleton</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>aecc7ea9afef72acc5d3e234345491714</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t length, UChar *skeleton, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_getBaseSkeleton</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a62d4bb2d90262895efa94037a9946a22</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t length, UChar *baseSkeleton, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UDateTimePatternConflict</type>
      <name>udatpg_addPattern</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>aa581b798ce7c2d3e628cae3fb1ff7911</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, UBool override, UChar *conflictingPattern, int32_t capacity, int32_t *pLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udatpg_setAppendItemFormat</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ac21e5486c0133a59974ea21d27aa36a1</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, UDateTimePatternField field, const UChar *value, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>udatpg_getAppendItemFormat</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af68f6d3ddf8fb56fc31b0c7fb58a5f69</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, UDateTimePatternField field, int32_t *pLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udatpg_setAppendItemName</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a54de436656a76b55998e7440cc378723</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, UDateTimePatternField field, const UChar *value, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>udatpg_getAppendItemName</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a9b602c32d604b0f6639573cf2f62e2ee</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, UDateTimePatternField field, int32_t *pLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udatpg_setDateTimeFormat</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a5f7d6e89623cb906780881fc3bb4e975</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, const UChar *dtFormat, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>udatpg_getDateTimeFormat</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a815c3413aca5b156f12a6cf2581e270a</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, int32_t *pLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>udatpg_setDecimal</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a595cae32436b43fbb4fd6f770d96b81f</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *decimal, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>udatpg_getDecimal</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>af24619c8b3f95646024cb883a5cd45e4</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, int32_t *pLength)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_replaceFieldTypes</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a84dfd1c80ca5b49b4eb5f398ed460961</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, const UChar *skeleton, int32_t skeletonLength, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>udatpg_replaceFieldTypesWithOptions</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>ab88c803cfacf7b9b0cd91a1bb30f858b</anchor>
      <arglist>(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, const UChar *skeleton, int32_t skeletonLength, UDateTimePatternMatchOptions options, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>udatpg_openSkeletons</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>aadb81a35ebc9c6b799c2d10e62182031</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>udatpg_openBaseSkeletons</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a9bcfb46c6f4f0d9c38306e869f2a9c10</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>udatpg_getPatternForSkeleton</name>
      <anchorfile>udatpg_8h.html</anchorfile>
      <anchor>a08cd0d48bbecc5a55deeafaff4e65b9a</anchor>
      <arglist>(const UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t skeletonLength, int32_t *pLength)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uenum.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uenum_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>struct UEnumeration</type>
      <name>UEnumeration</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>a32b7253b2148022535be36a9fcdb5a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uenum_close</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>af8bf1abcf3a486f07ee3384c7fce89df</anchor>
      <arglist>(UEnumeration *en)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uenum_count</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>a8be6db20419d79ecdd71e717a9521773</anchor>
      <arglist>(UEnumeration *en, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>uenum_unext</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>af7afc38ba0ea6071b03b052209e2e07d</anchor>
      <arglist>(UEnumeration *en, int32_t *resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uenum_next</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>a99298eabaa3874cdfd9793b207848f68</anchor>
      <arglist>(UEnumeration *en, int32_t *resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uenum_reset</name>
      <anchorfile>uenum_8h.html</anchorfile>
      <anchor>a76b3866509601b228ee72fa4089107bb</anchor>
      <arglist>(UEnumeration *en, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uidna.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uidna_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <class kind="struct">UIDNAInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>UIDNA_INFO_INITIALIZER</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a4d3da5919e4a9f1142d622212c156bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UIDNA</type>
      <name>UIDNA</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a58b6c70b0b7aad538aae49323aa12ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UIDNAInfo</type>
      <name>UIDNAInfo</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a94aa1e322dbdd3e7d370871ceb2823c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_DEFAULT</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635aa1eb63014cdaf41c7ea6cf3abecf1169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ALLOW_UNASSIGNED</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a40c036f35732a85a90d042ca285a563f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_USE_STD3_RULES</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a9d76f3ecebbbfb03f760298d47ad8eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_CHECK_BIDI</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a8f194e81cea21963d7025ccf3ec85dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_CHECK_CONTEXTJ</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a285a3c3c35593244b4b1d3682298c54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_NONTRANSITIONAL_TO_ASCII</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635a3a10cd9aeb86fca0e3085a9fc896ede6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_NONTRANSITIONAL_TO_UNICODE</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a726ca809ffd3d67ab4b8476646f26635ab42e158cb8c671b266b9f90355ec2f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_EMPTY_LABEL</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2dadd2c08d0f91b5b18bd37701f315721c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_LABEL_TOO_LONG</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da5071eb574ee6087ed7850c4e5f307ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_DOMAIN_NAME_TOO_LONG</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2dacb4f47fc8696d6ee4b31395fd6607a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_LEADING_HYPHEN</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2dad753902b7d5783e75fb3d99505635b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_TRAILING_HYPHEN</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da113fce683a4fd12b13885dab16e2bc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_HYPHEN_3_4</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da9bebae6483c78a9a4b608ba55f4ad367</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_LEADING_COMBINING_MARK</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da390a6b3d9844a1dcc1f99fb1ae478ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_DISALLOWED</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da807994d718b83ebd8420294cdb398077</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_PUNYCODE</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2daa1514abc5f09fcccd28645301a913834</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_LABEL_HAS_DOT</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da89151c238639213d4859dee188977d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_INVALID_ACE_LABEL</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2dafd70a49037cf9f9107485f279c4e6cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_BIDI</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da8a9311811fb0f3db1644ac1a88056370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UIDNA_ERROR_CONTEXTJ</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a0411cd49bb5b71852cecd93bcbf0ca2da800f864474cc5ab7fa304031aaf10043</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UIDNA *</type>
      <name>uidna_openUTS46</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a38d2029aa876f04bfe6ae8b2d5471662</anchor>
      <arglist>(uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uidna_close</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a6a28b8f09fc9c2c8016aba5f10f4edcf</anchor>
      <arglist>(UIDNA *idna)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_labelToASCII</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>ad6a9112dff13a1e67faaa1d3bbf51d2f</anchor>
      <arglist>(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_labelToUnicode</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>aae6f618913aa4029ea7bcb6af7d4860e</anchor>
      <arglist>(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_nameToASCII</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a9cc0383836cc8b73d14e86d5014ee7ae</anchor>
      <arglist>(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_nameToUnicode</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a4a6ddb43b9e5078eb3f90bc6fafa3e30</anchor>
      <arglist>(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_labelToASCII_UTF8</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>ac3d23c2283d9b465dd2b17902ff0d405</anchor>
      <arglist>(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_labelToUnicodeUTF8</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a450410e781b4ce83557396ce5f026b2b</anchor>
      <arglist>(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_nameToASCII_UTF8</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a87a8f1c1b3d5048406ce3ecb80b17c6c</anchor>
      <arglist>(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_nameToUnicodeUTF8</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a61648a995cff1f8d626df1c16ad4f3b8</anchor>
      <arglist>(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_toASCII</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>aaf3bec2415dd99b4221eeebb723eb082</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_toUnicode</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>affc23ca4aea3c6e5150024e5fd5a5b2d</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_IDNToASCII</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a711fa1d2e6dd25d7368f5b3ea2aaedc6</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_IDNToUnicode</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>acf38e44019d4eb5a7dd903284fdb18e3</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uidna_compare</name>
      <anchorfile>uidna_8h.html</anchorfile>
      <anchor>a89b089341501d76335772d8b26ffe0db</anchor>
      <arglist>(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, int32_t options, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uiter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uiter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">UCharIterator</class>
    <member kind="define">
      <type>#define</type>
      <name>UITER_NO_STATE</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>aafcf208dc06e96d1a48221de2cd96f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UCharIterator</type>
      <name>UCharIterator</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a7be461ccdd9257329604393ce0ab982f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UCharIteratorGetIndex</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a2c5cdcc035b270eecd9fefd3a8e61eb6</anchor>
      <arglist>(UCharIterator *iter, UCharIteratorOrigin origin)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UCharIteratorMove</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a96e7ff26382bff30b61e04129dcba777</anchor>
      <arglist>(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin)</arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UCharIteratorHasNext</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>aa64ffc5487dbe1d707c3761bf49ea290</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UCharIteratorHasPrevious</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a2972212270826ec6cc2469e7e757a99b</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>UChar32</type>
      <name>UCharIteratorCurrent</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a1f6bcc32677477c92a0ca50c9758d209</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>UChar32</type>
      <name>UCharIteratorNext</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a376c5501f8368974019bd238df5bf25f</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>UChar32</type>
      <name>UCharIteratorPrevious</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>aa264f21cccaadf857e2ffe8466275305</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UCharIteratorReserved</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>acafec86a399b523670cc7575b7c070f6</anchor>
      <arglist>(UCharIterator *iter, int32_t something)</arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>UCharIteratorGetState</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a7e5c6a58e984e535dee8f7a76be33598</anchor>
      <arglist>(const UCharIterator *iter)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UCharIteratorSetState</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a092db422640fc07b956d72f0f03fe9c3</anchor>
      <arglist>(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="enumeration">
      <name>UCharIteratorOrigin</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>acb93256d32b49b35a49affe3db4e5766</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UITER_UNKNOWN_INDEX</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>abed82baf7f470b522273a3e37c24c600ac15b49df57fe9ae213b64ef3fc05fd3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>uiter_current32</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a126d33b7d879ca2f8427004116c0340b</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>uiter_next32</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a5f5c726c5eba7d3c8fbc7238562be0cf</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>uiter_previous32</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a9225fa4316a792ba1585fc2ea8197afb</anchor>
      <arglist>(UCharIterator *iter)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>uiter_getState</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a561ede314e6f46cd7662a0f309f9b18a</anchor>
      <arglist>(const UCharIterator *iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uiter_setState</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a6cc978207c5f99588d5b915b7c85ebd1</anchor>
      <arglist>(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uiter_setString</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a373dbf81553f2f3553b64c31e3c6147f</anchor>
      <arglist>(UCharIterator *iter, const UChar *s, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uiter_setUTF16BE</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>a91a1ae4d9d562077b5c06d7ba75c7ebd</anchor>
      <arglist>(UCharIterator *iter, const char *s, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uiter_setUTF8</name>
      <anchorfile>uiter_8h.html</anchorfile>
      <anchor>aa221e8b7a4eb6f47ff03c80a09ae8a02</anchor>
      <arglist>(UCharIterator *iter, const char *s, int32_t length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uldnames.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>uldnames_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="uscript_8h" name="uscript.h" local="yes" imported="no">unicode/uscript.h</includes>
    <member kind="typedef">
      <type>struct ULocaleDisplayNames</type>
      <name>ULocaleDisplayNames</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a090a6edf8fb5f22aec739692187a0014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UDialectHandling</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a58e81da2dab7974bee76ced91d606d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULDN_STANDARD_NAMES</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a58e81da2dab7974bee76ced91d606d14abb213ffc174039aeb301f90fbff91540</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULDN_DIALECT_NAMES</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a58e81da2dab7974bee76ced91d606d14a610f3b01d344b6aad32e7db0378da2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ULocaleDisplayNames *</type>
      <name>uldn_open</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a3eb8ecebc7633722d67e4b91e3605d71</anchor>
      <arglist>(const char *locale, UDialectHandling dialectHandling, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uldn_close</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>aa22caa7ece8c540e481b842fe2ce5a50</anchor>
      <arglist>(ULocaleDisplayNames *ldn)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uldn_getLocale</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a2eeabb4f4b0f8074dc64f42eb2a880db</anchor>
      <arglist>(const ULocaleDisplayNames *ldn)</arglist>
    </member>
    <member kind="function">
      <type>UDialectHandling</type>
      <name>uldn_getDialectHandling</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a6571545b27a1d4e91e16d69f485b1e7b</anchor>
      <arglist>(const ULocaleDisplayNames *ldn)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_localeDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>ae2a9e2c767459c812072a191a457b56a</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *locale, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_languageDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>af636c591ca6b5e4b3616c8a814479b68</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *lang, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_scriptDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a07036ba5e136843224dd2f4131e3c3e2</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *script, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_scriptCodeDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>aa3c38bf460796318cfcf817ddb155e69</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, UScriptCode scriptCode, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_regionDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>ad2990d327dffc26ab3dec94e6d38f390</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *region, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_variantDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a1fd8f8dd4685967321dabfe89afcfb4e</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *variant, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_keyDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a9335511f4e0300517a9126d243b0658f</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *key, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uldn_keyValueDisplayName</name>
      <anchorfile>uldnames_8h.html</anchorfile>
      <anchor>a73b5f84881c7be2fbac4e5a76851410c</anchor>
      <arglist>(const ULocaleDisplayNames *ldn, const char *key, const char *value, UChar *result, int32_t maxResultSize, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uloc.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uloc_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_CHINESE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>af1e4f6e75642a19b48985c3308dbda1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_ENGLISH</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a7b3b387e4b7df73ab84087789e51793a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_FRENCH</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>afaf01f72121f4b5d55efd9b1906a637a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_GERMAN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a3d0e219396f99a84c0935ca9e3906b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_ITALIAN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>afafec50dc9f01b9222f2b294e00d37bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_JAPANESE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a9ea383605956797a51f7b292957a4635</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KOREAN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adc5c81580522c61757afccfc7b321259</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_SIMPLIFIED_CHINESE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a9e6ce1d4d9dd30192013320785f649ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_TRADITIONAL_CHINESE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a65d0986d91df6188d055cea37b7631a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_CANADA</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a746eb7d63e452deb4e8d5cd018c8fe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_CANADA_FRENCH</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ada2bca2d83bec81496f7a7c6c7a35adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_CHINA</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a246c0f569b610c6da2e185b7ced3043d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_PRC</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a4dc1d8c0642fb43ced1ae6e609f28724</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_FRANCE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a86b421b7341a237421f78a2a63184057</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_GERMANY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a1b561518d9e0daef25e619b2c0c66dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_ITALY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adb449b98da021a78151f4b929ecb4102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_JAPAN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a7c98b1c45b011eb2165160270f10931c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KOREA</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aa56a91a89d347608d3d6af8821b7eea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_TAIWAN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab1e44179a709c8b049bdd2aa4c805e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_UK</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a036c7ccbaa867fdd96d1b6390142d18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_US</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aa55404d3c725af4e05e65e5b40a6e13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_LANG_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a9dd4ed9ce1465a8c98c5f9edafb8c933</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_COUNTRY_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a356983b956cf3cb61e5d5ed0cd296385</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_FULLNAME_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ac070d94b27bb71f73bafd4c31ed53081</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_SCRIPT_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a2e60b17e30b020269c89c2ca83c8ea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORDS_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a56c1ecca7967df9d83044fa54248ea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_AND_VALUES_CAPACITY</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a48dc9fb3bfd43ed8852387a725260622</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_SEPARATOR</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a95caa9ed83b65408fc6fefed059e7a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_SEPARATOR_UNICODE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aa910dc90d6e05009ba0125e65bde51cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_ASSIGN</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a624227fd242e922ed98ee574df22b1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_ASSIGN_UNICODE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab8dedf272c1a1594baeeeded697a14a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_ITEM_SEPARATOR</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a907733baa1967a626c1ebb36d327675d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab729d122d9b777b5c23d4b07ede711a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULocDataLocaleType</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adf053345d343f8d82ae080f7a5871f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOC_ACTUAL_LOCALE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adf053345d343f8d82ae080f7a5871f34a95bd603a0102238a5235bf89a45edaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOC_VALID_LOCALE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adf053345d343f8d82ae080f7a5871f34abe12d6c03ab1fa05e028de64daf97d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOC_REQUESTED_LOCALE</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adf053345d343f8d82ae080f7a5871f34ae26d6cf4bf10b95b2bc1f58b2a00ef76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULayoutType</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a5570cc4b814b6cc9150ee0be5ee96ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UAcceptResult</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a3ad5cb6cf40e47fec510070d20c29cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uloc_getDefault</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>adbc1e91581ae0e0ec421dafcc35c06c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uloc_setDefault</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a472d1176dda100491e873e58018ba7d4</anchor>
      <arglist>(const char *localeID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getLanguage</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a8d88e113b134c0fd61b37815163abd8e</anchor>
      <arglist>(const char *localeID, char *language, int32_t languageCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getScript</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a6e9e30529b84f5b5e1213829e0a47144</anchor>
      <arglist>(const char *localeID, char *script, int32_t scriptCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getCountry</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a248777437a9795b6bcf4b8c8d7e405db</anchor>
      <arglist>(const char *localeID, char *country, int32_t countryCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getVariant</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ac9d081c2f4e3f1736d943ec1d66b776f</anchor>
      <arglist>(const char *localeID, char *variant, int32_t variantCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getName</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a1b817e9efa7ca5711d3b5abd19227296</anchor>
      <arglist>(const char *localeID, char *name, int32_t nameCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_canonicalize</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>afe5adae51e287be339c57142947eb290</anchor>
      <arglist>(const char *localeID, char *name, int32_t nameCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uloc_getISO3Language</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab1045e01cbf36fd8a4f8ae9b82ef4c94</anchor>
      <arglist>(const char *localeID)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uloc_getISO3Country</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ad9950c4d96caa332816532fbedf641f2</anchor>
      <arglist>(const char *localeID)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>uloc_getLCID</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a18b4a9328cc5e90db4e8f3a1b79ebff5</anchor>
      <arglist>(const char *localeID)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayLanguage</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a3bf3527de225342853d1fe97503590f7</anchor>
      <arglist>(const char *locale, const char *displayLocale, UChar *language, int32_t languageCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayScript</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aabf272c2adcb6c0c7dc149bf33b0e39c</anchor>
      <arglist>(const char *locale, const char *displayLocale, UChar *script, int32_t scriptCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayCountry</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a2debe5d381bed15bc17a9f943e921e3a</anchor>
      <arglist>(const char *locale, const char *displayLocale, UChar *country, int32_t countryCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayVariant</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a45c5307fc3c2ae57a8c7ec81eb441fd2</anchor>
      <arglist>(const char *locale, const char *displayLocale, UChar *variant, int32_t variantCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayKeyword</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a17562898c39cd95b062b5e02b44ebce2</anchor>
      <arglist>(const char *keyword, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayKeywordValue</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a5b7a991655765f14e6c79ff8b74b47ff</anchor>
      <arglist>(const char *locale, const char *keyword, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getDisplayName</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a3050cbd9c84aae5a406f923c8736e151</anchor>
      <arglist>(const char *localeID, const char *inLocaleID, UChar *result, int32_t maxResultSize, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uloc_getAvailable</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a75df9657cc46472afa94e4cbd4a1529b</anchor>
      <arglist>(int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_countAvailable</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a5e2344d83cc55eee38595d50b62294dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *const *</type>
      <name>uloc_getISOLanguages</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a9d4f51992a2efac9369c223b5aae9c37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *const *</type>
      <name>uloc_getISOCountries</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a673b0c89a78f098f797bab114eb8de82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getParent</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab722eaa3e697c2df034e1a65fba0b06d</anchor>
      <arglist>(const char *localeID, char *parent, int32_t parentCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getBaseName</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a6d153005b268df7f93ccb55219b646c5</anchor>
      <arglist>(const char *localeID, char *name, int32_t nameCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>uloc_openKeywords</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a0ad2571c7225304fd9883ddc2047097c</anchor>
      <arglist>(const char *localeID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getKeywordValue</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a1ac8cd994fc39ed8c3865b21cf4f47fa</anchor>
      <arglist>(const char *localeID, const char *keywordName, char *buffer, int32_t bufferCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_setKeywordValue</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a4ba76d26bf66ef7629a649f6dfc3cc93</anchor>
      <arglist>(const char *keywordName, const char *keywordValue, char *buffer, int32_t bufferCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>ULayoutType</type>
      <name>uloc_getCharacterOrientation</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a2bb9a5571c5d0b8a47947456e79a170d</anchor>
      <arglist>(const char *localeId, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>ULayoutType</type>
      <name>uloc_getLineOrientation</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>ab6a3001d2c92046d7072087b880029fb</anchor>
      <arglist>(const char *localeId, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_acceptLanguageFromHTTP</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aced06018568333e1906ae104ab62757a</anchor>
      <arglist>(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char *httpAcceptLanguage, UEnumeration *availableLocales, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_acceptLanguage</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a3b9d2f95d1a205665a0597762fd08ca2</anchor>
      <arglist>(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char **acceptList, int32_t acceptListCount, UEnumeration *availableLocales, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_getLocaleForLCID</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a623993d80071d113cbe64d20f6a4956c</anchor>
      <arglist>(uint32_t hostID, char *locale, int32_t localeCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_addLikelySubtags</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a0cb2dcd65f745e7a966a729395499770</anchor>
      <arglist>(const char *localeID, char *maximizedLocaleID, int32_t maximizedLocaleIDCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_minimizeSubtags</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>acecda5c650c9a3a4e43900c676558e17</anchor>
      <arglist>(const char *localeID, char *minimizedLocaleID, int32_t minimizedLocaleIDCapacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_forLanguageTag</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>aa45d6457f72867880f079e27a63c6fcb</anchor>
      <arglist>(const char *langtag, char *localeID, int32_t localeIDCapacity, int32_t *parsedLength, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uloc_toLanguageTag</name>
      <anchorfile>uloc_8h.html</anchorfile>
      <anchor>a1d50c91925ca3853fce6f28cf7390c3c</anchor>
      <arglist>(const char *localeID, char *langtag, int32_t langtagCapacity, UBool strict, UErrorCode *err)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ulocdata.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>ulocdata_8h</filename>
    <includes id="ures_8h" name="ures.h" local="yes" imported="no">unicode/ures.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>struct ULocaleData</type>
      <name>ULocaleData</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a11b0b31a90a3f88fe6cf285f549365ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULocaleDataExemplarSetType</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ab4e9cbcc23972244e20d4d6f599fc8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ES_STANDARD</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ab4e9cbcc23972244e20d4d6f599fc8d3aa28b60caf9e68e941a05367e1033322f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ES_AUXILIARY</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ab4e9cbcc23972244e20d4d6f599fc8d3adb7e3a9fc96a332b01e01816eeab7817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ES_INDEX</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ab4e9cbcc23972244e20d4d6f599fc8d3aa94686f1d5412b2196f5b3026be1134c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ES_COUNT</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ab4e9cbcc23972244e20d4d6f599fc8d3a7f3d60ce3504de617d370dd31ba0c41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ULocaleDataDelimiterType</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_QUOTATION_START</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdfa7fedd86f473aa432d795ef6b7c4cae51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_QUOTATION_END</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdfa19e5c76d309c1bcff0ec0520d2cbaab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ALT_QUOTATION_START</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdfa86cd0f4cbf05f411d10395b16a39cd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_ALT_QUOTATION_END</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdfa86c37e3e47ec43414a1afa48eb3c0165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULOCDATA_DELIMITER_COUNT</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a2de6cb7db4865c46fd28fdd1d31fbfdfa6e406ca2f52c79978643b6e1f18feaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UMeasurementSystem</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a4e0915410e83194840c04a67909c9690</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMS_US</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a4e0915410e83194840c04a67909c9690a8c9afbdc89682e1e9f8da106a266b90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMS_LIMIT</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a4e0915410e83194840c04a67909c9690ad1d78d4e783b7f47e43d3caf52870d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ULocaleData *</type>
      <name>ulocdata_open</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>aea69205230937829cc6c7bea014be082</anchor>
      <arglist>(const char *localeID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ulocdata_close</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a0a6caec3e82bfb44fac63f2001d212e3</anchor>
      <arglist>(ULocaleData *uld)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ulocdata_setNoSubstitute</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a981dc2b89f2762c0a4bfb915e6eed7c1</anchor>
      <arglist>(ULocaleData *uld, UBool setting)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ulocdata_getNoSubstitute</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>abd240a9bedda031ff8427adb1595d881</anchor>
      <arglist>(ULocaleData *uld)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>ulocdata_getExemplarSet</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ae8930500be4571878f16aef1cf731cc1</anchor>
      <arglist>(ULocaleData *uld, USet *fillIn, uint32_t options, ULocaleDataExemplarSetType extype, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ulocdata_getDelimiter</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>aed210881dffb9872c379b50c54681495</anchor>
      <arglist>(ULocaleData *uld, ULocaleDataDelimiterType type, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UMeasurementSystem</type>
      <name>ulocdata_getMeasurementSystem</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a7abb69df19b1080b76fcc26ec0ea0978</anchor>
      <arglist>(const char *localeID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ulocdata_getPaperSize</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>ac15cb36151248a1e0376380dea8bd722</anchor>
      <arglist>(const char *localeID, int32_t *height, int32_t *width, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ulocdata_getCLDRVersion</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>af50ca74fc2c0a249cd280f47c217dc88</anchor>
      <arglist>(UVersionInfo versionArray, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ulocdata_getLocaleDisplayPattern</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>af34138299c7b30537e410b284db88c8e</anchor>
      <arglist>(ULocaleData *uld, UChar *pattern, int32_t patternCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ulocdata_getLocaleSeparator</name>
      <anchorfile>ulocdata_8h.html</anchorfile>
      <anchor>a277f2bcec4a598b3c55af715ea9c06b5</anchor>
      <arglist>(ULocaleData *uld, UChar *separator, int32_t separatorCapacity, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>umachine.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>umachine_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>U_CFUNC</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>af702d65cba0638c5a8194cccc8d7c39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CDECL_BEGIN</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a82c853d86803ab75c89267be54fbac6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CDECL_END</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a1a820e5c6cbe8ac1742b654e6bf9ed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ATTRIBUTE_DEPRECATED</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a1f2a107433f276c69c8f8ab826fe6374</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CAPI</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a676114b1a64bb7c2de15c919a00b28df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_STABLE</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>af3e3799716eaa41e3f49c7bf18c62b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DRAFT</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a41691e68155dca13bc1f020fa30dac82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DEPRECATED</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a15493bbbc3793fa60b33cad4955430a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_OBSOLETE</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a1f8a29b64d3745f904fde5d8830d98f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_INTERNAL</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a161dba69f4e479c3626793efc42f94ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT8_MIN</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>aadcf2a81af243df333b31efa6461ab8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT16_MIN</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>ad4e9955955b27624963643eac448118a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT32_MIN</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a688eb21a22db27c2b2bd5836943cdcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT8_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>aaf7f29f45f1a513b4748a4e5014ddf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT16_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>ac58f2c111cc9989c86db2a7dc4fd84ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT32_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a181807730d4a375f848ba139813ce04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT8_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>aeb4e270a084ee26fe73e799861bd0252</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT16_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a3ea490c9b3617d4479bd80ef93cd5602</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT32_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>ab5eb23180f7cc12b7d6c04a8ec067fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INT64_C</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a22369e5d04efcda4162fdb0f5759318e</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UINT64_C</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a26a7bac63d90ef61175acb9f6fc4f2ca</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_INT64_MIN</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>ac1c596cb43b0e0da0ab1da5a20dbc502</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_INT64_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>ae3e790bebd3de6c1c2010ca8e766517d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_UINT64_MAX</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a476c17527f46de7a96942841fb87f770</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>aa8cecfc5c5c054d2875c03e77b7be15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>aa93f0eb578d23995850d61f7d61c55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SIZEOF_UCHAR</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a949bcf5953a147ca7724397dfe230ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>UBool</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a349ef00011f20ccd1d3b424445681aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>wchar_t</type>
      <name>UChar</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a6bb9fad572d65b305324ef288165e2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UChar32</name>
      <anchorfile>umachine_8h.html</anchorfile>
      <anchor>a09fff5c3b5a5b015324dc3ec3cf92809</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>umisc.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>umisc_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">UFieldPosition</class>
    <member kind="typedef">
      <type>const void *</type>
      <name>URegistryKey</name>
      <anchorfile>umisc_8h.html</anchorfile>
      <anchor>ab5905d79ed3b979840cee1d5fd48b4fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>umsg.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>umsg_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <member kind="typedef">
      <type>void *</type>
      <name>UMessageFormat</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>ab9e7346a57f2faed6df44a2e620e7553</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_formatMessage</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a4c02e1b7cff1ab8d463878e9aa1f0255</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, UChar *result, int32_t resultLength, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vformatMessage</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a19d9729739a5e7064219a5102a2ec290</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, UChar *result, int32_t resultLength, va_list ap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_parseMessage</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a954261c179cdbe9f7d84c272451d7fa7</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, const UChar *source, int32_t sourceLength, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_vparseMessage</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>ae01d11a87fd5511e356f0adc0a97df23</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, const UChar *source, int32_t sourceLength, va_list ap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_formatMessageWithError</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a689c0f8146908cb7bccc19bee19870af</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, UChar *result, int32_t resultLength, UParseError *parseError, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vformatMessageWithError</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a2d928c7b1d49eeb42e66caf774a4e112</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, UChar *result, int32_t resultLength, UParseError *parseError, va_list ap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_parseMessageWithError</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>ad88f13a12e31c0b7f55930f61be31979</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, const UChar *source, int32_t sourceLength, UParseError *parseError, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_vparseMessageWithError</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>af8560e57a59ffcdc0de91d6db3e26bae</anchor>
      <arglist>(const char *locale, const UChar *pattern, int32_t patternLength, const UChar *source, int32_t sourceLength, va_list ap, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UMessageFormat *</type>
      <name>umsg_open</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a14218f82563d8ed52c16b4b66e6c056b</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, const char *locale, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umsg_close</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a6aa7c93af125cbbe3f9d5c321fdc593c</anchor>
      <arglist>(UMessageFormat *format)</arglist>
    </member>
    <member kind="function">
      <type>UMessageFormat</type>
      <name>umsg_clone</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a89952c4d05455359365fb82c45144c3f</anchor>
      <arglist>(const UMessageFormat *fmt, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umsg_setLocale</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a85de2ac6bf6e40afe1a143bcc3ad389e</anchor>
      <arglist>(UMessageFormat *fmt, const char *locale)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>umsg_getLocale</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a0281d43c54deb52e531c92915edba997</anchor>
      <arglist>(const UMessageFormat *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umsg_applyPattern</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>ac3e6eb3b875750e179b86a646fb6626d</anchor>
      <arglist>(UMessageFormat *fmt, const UChar *pattern, int32_t patternLength, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>umsg_toPattern</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>af7f1f88f2472c4e4e9c8c732e84ebd22</anchor>
      <arglist>(const UMessageFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>umsg_format</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a90a4b5fe778754e5da52f7c2e5fd6048</anchor>
      <arglist>(const UMessageFormat *fmt, UChar *result, int32_t resultLength, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>umsg_vformat</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>ad3376e423041aa5b4c8595d6105c7999</anchor>
      <arglist>(const UMessageFormat *fmt, UChar *result, int32_t resultLength, va_list ap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umsg_parse</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a617f4fef1a5a85a8c1ffd5d21c3e777f</anchor>
      <arglist>(const UMessageFormat *fmt, const UChar *source, int32_t sourceLength, int32_t *count, UErrorCode *status,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umsg_vparse</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a58ed416cca890687dbe4477e57d1d403</anchor>
      <arglist>(const UMessageFormat *fmt, const UChar *source, int32_t sourceLength, int32_t *count, va_list ap, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>umsg_autoQuoteApostrophe</name>
      <anchorfile>umsg_8h.html</anchorfile>
      <anchor>a9da796210146ff51d395affe4928f0b7</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, UChar *dest, int32_t destCapacity, UErrorCode *ec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unifilt.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unifilt_8h</filename>
    <includes id="unifunct_8h" name="unifunct.h" local="yes" imported="no">unicode/unifunct.h</includes>
    <includes id="unimatch_8h" name="unimatch.h" local="yes" imported="no">unicode/unimatch.h</includes>
    <class kind="class">UnicodeFilter</class>
    <member kind="define">
      <type>#define</type>
      <name>U_ETHER</name>
      <anchorfile>unifilt_8h.html</anchorfile>
      <anchor>af8c471e1f0eb63cb628be3f7c9e33f55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unifunct.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unifunct_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <class kind="class">UnicodeFunctor</class>
  </compound>
  <compound kind="file">
    <name>unimatch.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unimatch_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="class">UnicodeMatcher</class>
    <member kind="enumeration">
      <name>UMatchDegree</name>
      <anchorfile>unimatch_8h.html</anchorfile>
      <anchor>aa87e5322490b3e89e6913bfabd0390e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISMATCH</name>
      <anchorfile>unimatch_8h.html</anchorfile>
      <anchor>aa87e5322490b3e89e6913bfabd0390e6a1f6e449ce699dc36cbe7ebf85f084b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PARTIAL_MATCH</name>
      <anchorfile>unimatch_8h.html</anchorfile>
      <anchor>aa87e5322490b3e89e6913bfabd0390e6ab2587ee51e223d32277d7efeafda90b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MATCH</name>
      <anchorfile>unimatch_8h.html</anchorfile>
      <anchor>aa87e5322490b3e89e6913bfabd0390e6ae704cd60becb64c776a061677629ad26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unirepl.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>unirepl_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="class">UnicodeReplacer</class>
  </compound>
  <compound kind="file">
    <name>uniset.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uniset_8h</filename>
    <includes id="unifilt_8h" name="unifilt.h" local="yes" imported="no">unicode/unifilt.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <class kind="class">UnicodeSet</class>
  </compound>
  <compound kind="file">
    <name>unistr.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unistr_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="rep_8h" name="rep.h" local="yes" imported="no">unicode/rep.h</includes>
    <includes id="std__string_8h" name="std_string.h" local="yes" imported="no">unicode/std_string.h</includes>
    <includes id="stringpiece_8h" name="stringpiece.h" local="yes" imported="no">unicode/stringpiece.h</includes>
    <includes id="bytestream_8h" name="bytestream.h" local="yes" imported="no">unicode/bytestream.h</includes>
    <class kind="class">UnicodeString</class>
    <class kind="union">UnicodeString::StackBufferOrFields</class>
    <member kind="define">
      <type>#define</type>
      <name>U_COMPARE_CODE_POINT_ORDER</name>
      <anchorfile>unistr_8h.html</anchorfile>
      <anchor>a7fd781b068b28ee2db708090aa32df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>US_INV</name>
      <anchorfile>unistr_8h.html</anchorfile>
      <anchor>a308c066384b8560030fb3482bcb13381</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNICODE_STRING</name>
      <anchorfile>unistr_8h.html</anchorfile>
      <anchor>aeab1ff09f666cf5fce35fc88cf37d714</anchor>
      <arglist>(cs, _length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNICODE_STRING_SIMPLE</name>
      <anchorfile>unistr_8h.html</anchorfile>
      <anchor>a6cd56429cbf4fe567a97c9d1a46e96ae</anchor>
      <arglist>(cs)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strlen</name>
      <anchorfile>group__ustring__ustrlen.html</anchorfile>
      <anchor>gac4d8a5581fc5bde71d62ebd0a7a84ec5</anchor>
      <arglist>(const UChar *s)</arglist>
    </member>
    <member kind="function">
      <type>U_COMMON_API UnicodeString</type>
      <name>operator+</name>
      <anchorfile>unistr_8h.html</anchorfile>
      <anchor>a9ba928a0602f95e68a1973dc26970ca5</anchor>
      <arglist>(const UnicodeString &amp;s1, const UnicodeString &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unorm.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unorm_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uiter_8h" name="uiter.h" local="yes" imported="no">unicode/uiter.h</includes>
    <includes id="unorm2_8h" name="unorm2.h" local="yes" imported="no">unicode/unorm2.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UNORM_COMPARE_NORM_OPTIONS_SHIFT</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a2962ecfc131adbea913c9ac34eaed4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNORM_INPUT_IS_FCD</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>ab2632f6548f0574ded0d37671ead94b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_COMPARE_IGNORE_CASE</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a6cc4c8b0d5be7ce1ac4b600ace7817f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNormalizationMode</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NONE</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a120a05cf3e51beaf4d9fbb6a4a1993c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NFD</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a60f3fa3dbcdfc2a075143fe078493e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NFKD</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a42f246a2e989929b24b2a4c84fe3a51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NFC</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a5b8bb462684c034d347e8dbcf4b77331</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_DEFAULT</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a0f833bde534a6902911c62dbb091a585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NFKC</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7a9f7f2ae3788d9aa8e6dff82697d6d0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_FCD</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7aac4a0a6b26928af19d2cef5985bdce8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_MODE_COUNT</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>af317e3ace13f0ce7c86dd1ca48490ef7ab16cae528525fca531bcdee42b153796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_UNICODE_3_2</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a05589fbab0657f08285ebdfe93f5ec9ea5b4745b8b611e2d7e6245c023e22e462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm_normalize</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a5410fab40c4e60a787c5cfbea5103c75</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, UNormalizationMode mode, int32_t options, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UNormalizationCheckResult</type>
      <name>unorm_quickCheck</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>ad103c40dd46c7d95f6db4c97aed10277</anchor>
      <arglist>(const UChar *source, int32_t sourcelength, UNormalizationMode mode, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UNormalizationCheckResult</type>
      <name>unorm_quickCheckWithOptions</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>ae437a1459c7379e327799d5d5ea44458</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm_isNormalized</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a919fb62224dc5f268e7b1cce21c2e873</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UNormalizationMode mode, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm_isNormalizedWithOptions</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a0a0e785c85a02052d405626ce301405e</anchor>
      <arglist>(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm_next</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>ab929eae6735fc93dfd799f7b71553614</anchor>
      <arglist>(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm_previous</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a1b64cb761d9eb7ccfd7ec58a5e045975</anchor>
      <arglist>(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm_concatenate</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>aa258530f27604d78c887aac13771e4a1</anchor>
      <arglist>(const UChar *left, int32_t leftLength, const UChar *right, int32_t rightLength, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm_compare</name>
      <anchorfile>unorm_8h.html</anchorfile>
      <anchor>a991e0fe6f0d062dd6e8e924517f3f437</anchor>
      <arglist>(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unorm2.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>unorm2_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <member kind="typedef">
      <type>struct UNormalizer2</type>
      <name>UNormalizer2</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>af6cec882b8db0db15e33e6f21c51919e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNormalization2Mode</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a3cf189b046fe90ca167d2294275f4ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM2_COMPOSE</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a3cf189b046fe90ca167d2294275f4ab5a4038a316229eef7d76901b704b0148bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM2_DECOMPOSE</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a3cf189b046fe90ca167d2294275f4ab5ab176fcf0362623fb45b1b0f1ae22e7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM2_FCD</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a3cf189b046fe90ca167d2294275f4ab5a6dbe9da1d7d77d2902d7ef197cb1619b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM2_COMPOSE_CONTIGUOUS</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a3cf189b046fe90ca167d2294275f4ab5aa8a0f3c152f66297036c8fbfd955f9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNormalizationCheckResult</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a01b7464189aef5dae63c0c759e84bece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_NO</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a01b7464189aef5dae63c0c759e84becea17a2e3aec6aef936136f04cf8af29de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_YES</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a01b7464189aef5dae63c0c759e84becea055e9208c9a15913ed2849243fb617c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNORM_MAYBE</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a01b7464189aef5dae63c0c759e84becea05c9a1f19c022c5399e64ff8cb852558</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const UNormalizer2 *</type>
      <name>unorm2_getInstance</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>aada0d2d95913d0cc3329e9e7fd571630</anchor>
      <arglist>(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UNormalizer2 *</type>
      <name>unorm2_openFiltered</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a7f6ce2fa8c5e5fa3b1b9a141e1032e15</anchor>
      <arglist>(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unorm2_close</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>aa8b1599dfe72053c3b1c217aba1d8aac</anchor>
      <arglist>(UNormalizer2 *norm2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm2_normalize</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a0a596802db767da410b4b04cb75cbc53</anchor>
      <arglist>(const UNormalizer2 *norm2, const UChar *src, int32_t length, UChar *dest, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm2_normalizeSecondAndAppend</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>aa10f3463975d69064234452d6fc82234</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm2_append</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>afd6fb5de5d9f989980a1d6a81b04f0ee</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm2_getDecomposition</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a5a9caba78ab42fe17b3b2d7f94457309</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar32 c, UChar *decomposition, int32_t capacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm2_isNormalized</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>aff442b2c792244e95f1649bf31d36426</anchor>
      <arglist>(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UNormalizationCheckResult</type>
      <name>unorm2_quickCheck</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>ad81711834f00bbeb97738004f4f08450</anchor>
      <arglist>(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unorm2_spanQuickCheckYes</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a04d7c52b719cfaceba3657d1340114e1</anchor>
      <arglist>(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm2_hasBoundaryBefore</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>aa96a430bda580fb3551e0f5adc0aa6b1</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm2_hasBoundaryAfter</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a0653490112118874c8dc23f2c33bc785</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>unorm2_isInert</name>
      <anchorfile>unorm2_8h.html</anchorfile>
      <anchor>a356cb1f20b745293e262b9ef6378fe16</anchor>
      <arglist>(const UNormalizer2 *norm2, UChar32 c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unum.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>unum_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="umisc_8h" name="umisc.h" local="yes" imported="no">unicode/umisc.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <member kind="typedef">
      <type>void *</type>
      <name>UNumberFormat</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>aaeec8f4d21895a6f3efdedf14e8f946b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UCurrencySpacing</type>
      <name>UCurrencySpacing</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a27094d1bc060cc6f61e9d26410f65e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatStyle</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PATTERN_DECIMAL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266dae207361093035f3cba68e1079222765f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DECIMAL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266dafee95b0f3bd1d25e469d6d73a80ca851</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_CURRENCY</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da21b6ea8b4d9a0470ef541984625b60fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PERCENT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da9bf1ec360f981705cd4bbd51cb87aebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SCIENTIFIC</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da3716da021dd7e974d2e068972f43d824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SPELLOUT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da5ae07c512dff6f042638269a892f583d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ORDINAL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266daa2ad067d1cadf2e2f2e988e2d838200b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DURATION</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266dae79d8fb72705872b6c3c4abb6c17b9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_NUMBERING_SYSTEM</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266dab1c8018237a430c9b88289b18eac6b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PATTERN_RULEBASED</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da5960471d91b7598451d928cd8547a66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_CURRENCY_ISO</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266daae232c48e579c727525855cd21571033</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_CURRENCY_PLURAL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da3916bb92d0784396ea2331d4f04c03f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FORMAT_STYLE_COUNT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266da996fbe5b154122a24dd70b8c1aaf0716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DEFAULT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266dad0a115c07b8b2e3bbf296e8aaa51bbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_IGNORE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a4eb4d3ff13bd506e7078b2be4052266daf1a3f506a159392eb58a5b3b020958f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatRoundingMode</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a2f46653ee48f5d8d5b8e67d4a1b8230a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FOUND_HALFEVEN</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a2f46653ee48f5d8d5b8e67d4a1b8230aaaf65c3f66231f695a558eb526c1215f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ROUND_UNNECESSARY</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a2f46653ee48f5d8d5b8e67d4a1b8230aa0f59afe5c61b0334a1f1fbb89d054595</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ROUND_HALFEVEN</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a2f46653ee48f5d8d5b8e67d4a1b8230aa1fd90821fab4b77604c05712ab1b5678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatPadPosition</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>ac87c18f94d2d615aa25cd5581ff908f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UCurrencySpacing</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a2c2f0d1c3a38ec38269be6db11db04b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PARSE_INT_ONLY</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa565bb2f66b2822d68a2c6e3f95be71a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_GROUPING_USED</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fafac691b1c59d94b50213c2eab8d83a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DECIMAL_ALWAYS_SHOWN</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa8d460efb91f4335ef7fbd069f7e12de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MAX_INTEGER_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa1c61e19057c4c1036a9f1afd98259d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MIN_INTEGER_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097faf6e1244643dfd78c1e3070a990e81751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_INTEGER_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097faa21a02dd6022115b4332b30b1cbc5dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MAX_FRACTION_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa3156d12afe1b2ba2e02e099b9fab9d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MIN_FRACTION_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa7bda470ac16100aad29970123e659b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FRACTION_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097faa492173115371885d8dd4312c1df263f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MULTIPLIER</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa5c1e5f8080fa49bb89fabec8a36e13e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_GROUPING_SIZE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa06902c7d131bd688728ad866ff488474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ROUNDING_MODE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097face1e88f1b24547d7a1bf605f781b1c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ROUNDING_INCREMENT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa5fb16427f42e8b0c149bb89c8e108f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FORMAT_WIDTH</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa470111abd0962f29b64aac8aa95445ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PADDING_POSITION</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fae9bf50a6f9564be1cc74e2fb2a564528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SECONDARY_GROUPING_SIZE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa6cdd4f290558adf6093d9a5a036991e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SIGNIFICANT_DIGITS_USED</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa606b791bda88aa23e7cb387357163f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MIN_SIGNIFICANT_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa1a08d64684b9d2cddcc78e974b24aec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MAX_SIGNIFICANT_DIGITS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa956d998c675d90d50b620d08cb4fa399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_LENIENT_PARSE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a22c3085f2e722f578a92c15a3346097fa0c9d63e76d7e4974e6a828a5ad9971f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatTextAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_POSITIVE_PREFIX</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725a264cca6cf70106e73840f1a47028df86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_POSITIVE_SUFFIX</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725ad86d57c03a0508d47288c704197ac653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_NEGATIVE_PREFIX</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725a1df970289d1891901b39a86395bc5d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_NEGATIVE_SUFFIX</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725aa31b0783a7bc179dfa5a635bdc542800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PADDING_CHARACTER</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725a86e498a9c561dfc76671ec96a427143d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_CURRENCY_CODE</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725aa2b28acf90cdc267f71fb3824b271f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DEFAULT_RULESET</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725a54d13def32cdd86ad8f9dfe147b0494a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PUBLIC_RULESETS</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d3fc41af40c7a4437230943eb265725a5f86be5aea4daa4ba8a6bdd9bfae0d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UNumberFormatSymbol</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DECIMAL_SEPARATOR_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a6cf2eae8070a1472ff383b79e51a3672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_GROUPING_SEPARATOR_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a7caa62a2f1bed1dfef22a23a693cef24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PATTERN_SEPARATOR_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a5eb091009c9a02bbebdb6431d2b4dc75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PERCENT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a5883afe4d7c2b26f507662371e2d7bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ZERO_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832ada460e4eba23e055b04873b737a555f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832acaebfebe90c39566ced87e7f06261cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MINUS_SIGN_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832ac41e14d50a6e9e775c56da37b6605e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PLUS_SIGN_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a702dd174fe87fc87d2b8277823e5698f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_CURRENCY_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a4058db5d198fe1300aa8ee3cc3cdf4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_INTL_CURRENCY_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a4796ec4f4bea835c8692d1e4a6b68aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MONETARY_SEPARATOR_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832ac61cae53a16c43243566e20e984464b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_EXPONENTIAL_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a3f91096f3423060c440807f6c2e85233</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PERMILL_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a11d90afae7100df580a2eeece46c1da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_PAD_ESCAPE_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a1ef99bce9331e4a77feaa20a5b8c401e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_INFINITY_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a28e639f8a96e2d7b3895b76f0a73a36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_NAN_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a88b09641ed43106d228c2346acfe17cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SIGNIFICANT_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a188ddfda3e376f7a68237f8904afc2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a572e13e5e2e71f715b40ba506c595ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_ONE_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832adcf6d2db09b7c4aa67d59ad83f33a433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_TWO_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a38b34d7b5bbc419ae50f959a1c2f9ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_THREE_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832ad9838edbf8b1ba8189aad17ccfe823f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FOUR_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a1098c973d480e5eca52774c5e215ec8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FIVE_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a4bc81cd9ae745ba68b19121ac62c10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SIX_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a921f792f3ebe97c9a2d3a90e29f41621</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_SEVEN_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832af6a1ebe23d3603d322ed5e4182b6ce37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_EIGHT_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832a566676905fb75c9985517dea91e0edaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_NINE_DIGIT_SYMBOL</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832aa4f066c23fa500c6b514aa9635f7531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNUM_FORMAT_SYMBOL_COUNT</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a79f73310e5d35c176b9adcb0a3e08832ae2035b0efec37754a7ced473780741ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UNumberFormat *</type>
      <name>unum_open</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a581f9eb53d6b1b052b751272e1c6b67f</anchor>
      <arglist>(UNumberFormatStyle style, const UChar *pattern, int32_t patternLength, const char *locale, UParseError *parseErr, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_close</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a5716f7198d8adcd215e6c192abedde88</anchor>
      <arglist>(UNumberFormat *fmt)</arglist>
    </member>
    <member kind="function">
      <type>UNumberFormat *</type>
      <name>unum_clone</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>aca465856f5b931500a72c74605b40ad9</anchor>
      <arglist>(const UNumberFormat *fmt, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_format</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a5eea15992427d5c86319d23d630795b8</anchor>
      <arglist>(const UNumberFormat *fmt, int32_t number, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_formatInt64</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a76d510c2e2ecbf3a89712f1dc6c6c7da</anchor>
      <arglist>(const UNumberFormat *fmt, int64_t number, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_formatDouble</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a8cbd385fd0b01975ad6a0742c6e5c512</anchor>
      <arglist>(const UNumberFormat *fmt, double number, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_formatDecimal</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a59870a322f012dc1b9d99cf8a7b708f1</anchor>
      <arglist>(const UNumberFormat *fmt, const char *number, int32_t length, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_formatDoubleCurrency</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a35ff307fccbabfb16db8217d132ceae6</anchor>
      <arglist>(const UNumberFormat *fmt, double number, UChar *currency, UChar *result, int32_t resultLength, UFieldPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_parse</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>ac658b91fe7e7b8c8e0657008d77db90d</anchor>
      <arglist>(const UNumberFormat *fmt, const UChar *text, int32_t textLength, int32_t *parsePos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>unum_parseInt64</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a952c32d0ed2ddd5ec6630f2b8d776f1a</anchor>
      <arglist>(const UNumberFormat *fmt, const UChar *text, int32_t textLength, int32_t *parsePos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unum_parseDouble</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a849e6ac2def7f3cf5327f8881efc026a</anchor>
      <arglist>(const UNumberFormat *fmt, const UChar *text, int32_t textLength, int32_t *parsePos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_parseDecimal</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>af80334a90b37b2d5c41bd9db00c98687</anchor>
      <arglist>(const UNumberFormat *fmt, const UChar *text, int32_t textLength, int32_t *parsePos, char *outBuf, int32_t outBufLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unum_parseDoubleCurrency</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9d9e2682060ce25075229769c16b9707</anchor>
      <arglist>(const UNumberFormat *fmt, const UChar *text, int32_t textLength, int32_t *parsePos, UChar *currency, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_applyPattern</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>acac55fa6f213cb43d128f8160a0ec5a9</anchor>
      <arglist>(UNumberFormat *format, UBool localized, const UChar *pattern, int32_t patternLength, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>unum_getAvailable</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>acaa46128fd87e7166b3578eab2c2ad24</anchor>
      <arglist>(int32_t localeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_countAvailable</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a56bd0a70446ff1feb5abdc5bc829a8fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_getAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>aba3ed4eb79cf3401699bbddb3b80a9b3</anchor>
      <arglist>(const UNumberFormat *fmt, UNumberFormatAttribute attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_setAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>aa9dc9217d30084eb4577e749083bdc73</anchor>
      <arglist>(UNumberFormat *fmt, UNumberFormatAttribute attr, int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unum_getDoubleAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a3d3af71571dcc86ad02a63f98c9ef3c1</anchor>
      <arglist>(const UNumberFormat *fmt, UNumberFormatAttribute attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_setDoubleAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a9ba89315a6f88655edec37c39af99e67</anchor>
      <arglist>(UNumberFormat *fmt, UNumberFormatAttribute attr, double newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_getTextAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a497b8a591fbac7c2d2e604f06a403be1</anchor>
      <arglist>(const UNumberFormat *fmt, UNumberFormatTextAttribute tag, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_setTextAttribute</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a5c6e5a56428cd6e15beb0c972698f414</anchor>
      <arglist>(UNumberFormat *fmt, UNumberFormatTextAttribute tag, const UChar *newValue, int32_t newValueLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_toPattern</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>aa1c1db271d7a0510212cad89f8a555a6</anchor>
      <arglist>(const UNumberFormat *fmt, UBool isPatternLocalized, UChar *result, int32_t resultLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>unum_getSymbol</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a7585fe85196e2bd9b814731c27def878</anchor>
      <arglist>(const UNumberFormat *fmt, UNumberFormatSymbol symbol, UChar *buffer, int32_t size, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unum_setSymbol</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>a00a0a03e950ff6e6cf6c63ad5870297c</anchor>
      <arglist>(UNumberFormat *fmt, UNumberFormatSymbol symbol, const UChar *value, int32_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>unum_getLocaleByType</name>
      <anchorfile>unum_8h.html</anchorfile>
      <anchor>ade144d9121f72bf8a080aa7bf1060a55</anchor>
      <arglist>(const UNumberFormat *fmt, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uobject.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uobject_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="class">UMemory</class>
    <class kind="class">UObject</class>
    <member kind="define">
      <type>#define</type>
      <name>U_HAVE_DEBUG_LOCATION_NEW</name>
      <anchorfile>uobject_8h.html</anchorfile>
      <anchor>a80b308fe1f841cb450772f58197ef018</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UOBJECT_DEFINE_RTTI_IMPLEMENTATION</name>
      <anchorfile>uobject_8h.html</anchorfile>
      <anchor>a0415b3e188980bcb82e31c091265f34b</anchor>
      <arglist>(myClass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UOBJECT_DEFINE_ABSTRACT_RTTI_IMPLEMENTATION</name>
      <anchorfile>uobject_8h.html</anchorfile>
      <anchor>aa53bdd883d784e4c951b051faffc29d0</anchor>
      <arglist>(myClass)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UOBJECT_DEFINE_NO_RTTI_IMPLEMENTATION</name>
      <anchorfile>uobject_8h.html</anchorfile>
      <anchor>aebfc0b7b915d88200070b1cb8ea0a198</anchor>
      <arglist>(myClass)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uregex.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>uregex_8h</filename>
    <includes id="utext_8h" name="utext.h" local="yes" imported="no">unicode/utext.h</includes>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <member kind="typedef">
      <type>struct URegularExpression</type>
      <name>URegularExpression</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a566882c83d9e4dcf7fb5d8f859625500</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>URegexMatchCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a0a86299b51ab447fdefa00f6763b44bb</anchor>
      <arglist>(const void *context, int32_t steps)</arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>URegexFindProgressCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a05a1a31454add644cd2f023b7e4366c3</anchor>
      <arglist>(const void *context, int64_t matchIndex)</arglist>
    </member>
    <member kind="enumeration">
      <name>URegexpFlag</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_CANON_EQ</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea95ee02c73b45843f44d316c913826b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_CASE_INSENSITIVE</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea909d2ed2c61e34cb62dc13e29f6923ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_COMMENTS</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea2f3e059e7b90f4bc9574740e89a7b0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_DOTALL</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea0220d4e90a67e1cdd6c1c02ecc8189f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_LITERAL</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea66d6ba18582a24bf3e4056e687ea58cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_MULTILINE</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea5955d9b9e4cdfcd1fccafde751f02488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_UNIX_LINES</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aeaeff412f2297e20cddb5659b943b58630</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_UWORD</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aeae1499468a7aa6f7b2059b7839c6003dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UREGEX_ERROR_ON_UNKNOWN_ESCAPES</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a874989dfec4cbeb6baf4d1a51cb529aea9be4161df4e6d12050d324787d6d2742</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>URegularExpression *</type>
      <name>uregex_open</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a31fa9daa487155dfa8e60dbfbf9472e7</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>URegularExpression *</type>
      <name>uregex_openUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a67e900e97a158996501da9b07142ef62</anchor>
      <arglist>(UText *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>URegularExpression *</type>
      <name>uregex_openC</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ae44e4d2f7ec00fa790a82c5ee47b6296</anchor>
      <arglist>(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_close</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a7fdfb34cdda683226599e95b388c5575</anchor>
      <arglist>(URegularExpression *regexp)</arglist>
    </member>
    <member kind="function">
      <type>URegularExpression *</type>
      <name>uregex_clone</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3befb11b7c9b28c19af6114ed19b7339</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>uregex_pattern</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a8b1ee386c236bee2df00020117a6cf42</anchor>
      <arglist>(const URegularExpression *regexp, int32_t *patLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_patternUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a540a99501d0506941cf6025c1762421e</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_flags</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aeb4d05c6038bcd4b8320db9981793ff9</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a49855db9ac7b4ecf5f4cf10d3d71d170</anchor>
      <arglist>(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a8d5797847facba41c03ccb363432ee56</anchor>
      <arglist>(URegularExpression *regexp, UText *text, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>uregex_getText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a78cec27fd3e8238c5a9c08ae66884c80</anchor>
      <arglist>(URegularExpression *regexp, int32_t *textLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_getUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3f310920bdf281767777c493729f2df6</anchor>
      <arglist>(URegularExpression *regexp, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_refreshUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a1abbb6bd6d25736812479fad64162edb</anchor>
      <arglist>(URegularExpression *regexp, UText *text, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_matches</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a6f8a6e557083831cbd8111fdd5b562ce</anchor>
      <arglist>(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_matches64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a0af28913816bcfe5fa9d7f585c435e15</anchor>
      <arglist>(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_lookingAt</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a52c90b073f572a7dd1052c7785a81b79</anchor>
      <arglist>(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_lookingAt64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3ddee5e9228ee42e7c339de032e53ef0</anchor>
      <arglist>(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_find</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a74e00aa35711875aab88fd550de6b1d6</anchor>
      <arglist>(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_find64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>af47cdc4aaa5ee56417f79c9f03915a59</anchor>
      <arglist>(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_findNext</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aa173870af2e8d79a06faea5e334bd5f9</anchor>
      <arglist>(URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_groupCount</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ad6ff01458e9d10ad9a66c980e9c1dfd8</anchor>
      <arglist>(URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_group</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ab4dfb358ba585dbf56e195a704874d93</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_groupUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a1760ff1738b27a60b561d6e01f36df40</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UText *dest, int64_t *groupLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_groupUTextDeep</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a5558999426e8eb4e0a89f9de88122ed3</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_start</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a5a2eccd52a16efe1ba99c53d56614a4f</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>uregex_start64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a5530ae496992b5a6aa83bdde52f95a75</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_end</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3f5e9eba75d943ff1aba3d3dc779a67f</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>uregex_end64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3301ec8e374f38b45aa37c717a1466d2</anchor>
      <arglist>(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_reset</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a32b5a1a76b9eb313d5093290d19245db</anchor>
      <arglist>(URegularExpression *regexp, int32_t index, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_reset64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aa8212138dd759c0193b6a43e4476afb3</anchor>
      <arglist>(URegularExpression *regexp, int64_t index, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setRegion</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aa8b28084da3bf16bb5b8d61605e54606</anchor>
      <arglist>(URegularExpression *regexp, int32_t regionStart, int32_t regionLimit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setRegion64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a6003264946f4242a82c611655a8d9385</anchor>
      <arglist>(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setRegionAndStart</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>afdfc06f148d6b0a6e1ceb719e1fc7424</anchor>
      <arglist>(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_regionStart</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a4b416b2f34255ebf59ae353edb1e5c82</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>uregex_regionStart64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ad68da1ce0a5e3be72c33f41741378714</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_regionEnd</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a2de91ea327504abd4f14e7af557d7fa3</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>uregex_regionEnd64</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ae66ba34441ec2789632df02719c131e3</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_hasTransparentBounds</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a3b82fc98a12e72b8ec507826b0f0237b</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_useTransparentBounds</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>acea9d3117923c353d4b83d1a1eea204f</anchor>
      <arglist>(URegularExpression *regexp, UBool b, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_hasAnchoringBounds</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>ac217287a0533febf990d0b0948d18ff3</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_useAnchoringBounds</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a0ed3b4b5a0746bde84f0dbe67be2328c</anchor>
      <arglist>(URegularExpression *regexp, UBool b, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_hitEnd</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a8c42663071cf14355d6affa8f0a706f4</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uregex_requireEnd</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a6a30c706768ccbbeb6db34f2a94400f1</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_replaceAll</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a46252f42e1d2376af1927bf9b67cd530</anchor>
      <arglist>(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_replaceAllUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aec7ce5b56c3e33fca1a4f8c53a5b83cb</anchor>
      <arglist>(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_replaceFirst</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a1d5bc74b5e00b183ad20e06927d72e9e</anchor>
      <arglist>(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_replaceFirstUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a9ef5f34d220eb6c149886a58e996e5c5</anchor>
      <arglist>(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_appendReplacement</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a4855f7a0ee316669a299dc9f7e8bace5</anchor>
      <arglist>(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_appendReplacementUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>aea0489d9ff0f9eccead9cffed1037706</anchor>
      <arglist>(URegularExpression *regexp, UText *replacementText, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_appendTail</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a40cb404e6bfb8f8bf2d2640f60c5d2cf</anchor>
      <arglist>(URegularExpression *regexp, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>uregex_appendTailUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a1965d951c0f8e0febe4d76cfc4dff60c</anchor>
      <arglist>(URegularExpression *regexp, UText *dest, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_split</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a2a7440d07f6c8692d30a3e090494d2d1</anchor>
      <arglist>(URegularExpression *regexp, UChar *destBuf, int32_t destCapacity, int32_t *requiredCapacity, UChar *destFields[], int32_t destFieldsCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_splitUText</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a7be80515a18c462ae05ed058b5f2d375</anchor>
      <arglist>(URegularExpression *regexp, UText *destFields[], int32_t destFieldsCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setTimeLimit</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a7b42432bc279a11c8a5e2c83f767181d</anchor>
      <arglist>(URegularExpression *regexp, int32_t limit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_getTimeLimit</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a826b0f2768df66747abbbe80667f7c5e</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setStackLimit</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a2ebf688278fec4e7955832aa6094b3c0</anchor>
      <arglist>(URegularExpression *regexp, int32_t limit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uregex_getStackLimit</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a4001266bcef2df0eee5b5820edd67121</anchor>
      <arglist>(const URegularExpression *regexp, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setMatchCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a8e1cae7b8de77df89081cb1ea36cf14b</anchor>
      <arglist>(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_getMatchCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a296c628623ecf469722b2dc26098b13d</anchor>
      <arglist>(const URegularExpression *regexp, URegexMatchCallback **callback, const void **context, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_setFindProgressCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a9082576d5bbc1f16758b15f899d43e88</anchor>
      <arglist>(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uregex_getFindProgressCallback</name>
      <anchorfile>uregex_8h.html</anchorfile>
      <anchor>a015ad2f4835458889dd8a622937779bb</anchor>
      <arglist>(const URegularExpression *regexp, URegexFindProgressCallback **callback, const void **context, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>urep.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>urep_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <class kind="struct">UReplaceableCallbacks</class>
    <member kind="typedef">
      <type>void *</type>
      <name>UReplaceable</name>
      <anchorfile>urep_8h.html</anchorfile>
      <anchor>a22b35ca6677ac47c2f5b0d01ffbead60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ures.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ures_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uloc_8h" name="uloc.h" local="yes" imported="no">unicode/uloc.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>struct UResourceBundle</type>
      <name>UResourceBundle</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a7391119e9274be9ba2e6892b48a2bbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UResType</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_NONE</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbab73cbea3085f99defd0538171d343f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_STRING</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbac4db2a063c1c73cc363b0e21891bc480</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_BINARY</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba7220aa0da13f4d7a1e62a1856026c271</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_TABLE</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba2cfd36db6917951f177723df3a58e2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_ALIAS</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba6890eb4a8669521aace76b4c854d304e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_INT</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbac71be9c52845b8404c84610320b550ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_ARRAY</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbaa2e7a87c3c144d7df2abd973b86512ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>URES_INT_VECTOR</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba6c6b406d49cebed764c515d49dcf73b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_NONE</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba78e3758a381e62148cc4b0438f3c0777</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_STRING</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbad6c0349cb0484769c040d660de1c7445</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_BINARY</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba2ad74e7a8c734f374bf8b786617fb212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_TABLE</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbac93b5478e79d51b10747d617765069af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_ALIAS</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbae4f137b23dcc82d1b7c5b19d5453b3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_INT</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbaf1f3ced984a5ff062dae837b00769e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_ARRAY</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fba2eeb630d6cacdd4cdeae5ae05edfc8bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_INT_VECTOR</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbac5f51dba6417cd88750d7fb32c1cfb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RES_RESERVED</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3f1197bf41a6228c38e3fddb58bf96fbabb8f79bd6e07400f6870fe51ae24fcef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_open</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>ac4d72fc9f7cc63a05f646cabee4be167</anchor>
      <arglist>(const char *packageName, const char *locale, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_openDirect</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a261fcbb263bbe48b13d2b3e2fc2470a0</anchor>
      <arglist>(const char *packageName, const char *locale, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_openU</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a73d8f9711d915ef1888a7e149f64a9ae</anchor>
      <arglist>(const UChar *packageName, const char *locale, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ures_countArrayItems</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a09607e48125e46397a843f255640fe2e</anchor>
      <arglist>(const UResourceBundle *resourceBundle, const char *resourceKey, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ures_close</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>addb8be0af245c0f745458e7ad925a490</anchor>
      <arglist>(UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getVersionNumber</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a33679a8207b84dda51bff3e30c04174f</anchor>
      <arglist>(const UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ures_getVersion</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a2edd739dcbf0062e0c344b4a4e0a26d2</anchor>
      <arglist>(const UResourceBundle *resB, UVersionInfo versionInfo)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getLocale</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a82bdc1bb4f0afdb2d263c3589eaa9b62</anchor>
      <arglist>(const UResourceBundle *resourceBundle, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getLocaleByType</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a39d1e5c7a265c24ebaa684b55a74c0e0</anchor>
      <arglist>(const UResourceBundle *resourceBundle, ULocDataLocaleType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ures_openFillIn</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a41dc0b7aa46942d3034ffce73adf9aea</anchor>
      <arglist>(UResourceBundle *r, const char *packageName, const char *localeID, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ures_getString</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a088b560881f84521caefc1513efc45af</anchor>
      <arglist>(const UResourceBundle *resourceBundle, int32_t *len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getUTF8String</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a1dd8d20a524c70ef8ec9943221f82021</anchor>
      <arglist>(const UResourceBundle *resB, char *dest, int32_t *length, UBool forceCopy, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const uint8_t *</type>
      <name>ures_getBinary</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a3d29628c77fb9c5fffa412257aa743cc</anchor>
      <arglist>(const UResourceBundle *resourceBundle, int32_t *len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>ures_getIntVector</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>ae89d1bc77281a8a61896f6615cd506ea</anchor>
      <arglist>(const UResourceBundle *resourceBundle, int32_t *len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>ures_getUInt</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>aa21170067cf90e1d492b4806f31c6a9c</anchor>
      <arglist>(const UResourceBundle *resourceBundle, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ures_getInt</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>ab718b0e9c6e06a2bbcce9a71e04b185e</anchor>
      <arglist>(const UResourceBundle *resourceBundle, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ures_getSize</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a4eb5d79c3799ee8cfe0cbd96322581bd</anchor>
      <arglist>(const UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>UResType</type>
      <name>ures_getType</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a77ac531cd4bdc588efd21b2d9b7e2471</anchor>
      <arglist>(const UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getKey</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a9c391e946d5d4bc204c1cc7798de6668</anchor>
      <arglist>(const UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ures_resetIterator</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>ab0755e4d54d950e32acc785cbc46c431</anchor>
      <arglist>(UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>ures_hasNext</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a787089fdc0669fe3ec7f5023b628a642</anchor>
      <arglist>(const UResourceBundle *resourceBundle)</arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_getNextResource</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a04ad67a1b8feaca7b817ce51e4878d1d</anchor>
      <arglist>(UResourceBundle *resourceBundle, UResourceBundle *fillIn, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ures_getNextString</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>ab3c74eb748adde7d83bd8a9ac52bb58e</anchor>
      <arglist>(UResourceBundle *resourceBundle, int32_t *len, const char **key, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_getByIndex</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>aae9284d2a6a4c8169cc2e7c7d89a29e6</anchor>
      <arglist>(const UResourceBundle *resourceBundle, int32_t indexR, UResourceBundle *fillIn, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ures_getStringByIndex</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a1ac2f42ee782365ab291f6135e5b0073</anchor>
      <arglist>(const UResourceBundle *resourceBundle, int32_t indexS, int32_t *len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getUTF8StringByIndex</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>af692a3738524bbf6c30bfa56a2135b5b</anchor>
      <arglist>(const UResourceBundle *resB, int32_t stringIndex, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UResourceBundle *</type>
      <name>ures_getByKey</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a9cffc29afd81c60f4a3ce2c8dadf8e98</anchor>
      <arglist>(const UResourceBundle *resourceBundle, const char *key, UResourceBundle *fillIn, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>ures_getStringByKey</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a59b808cfa2bdd08497219849cdeff140</anchor>
      <arglist>(const UResourceBundle *resB, const char *key, int32_t *len, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ures_getUTF8StringByKey</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>a7fbb24a527a74807dded377ca0ecd41c</anchor>
      <arglist>(const UResourceBundle *resB, const char *key, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>ures_openAvailableLocales</name>
      <anchorfile>ures_8h.html</anchorfile>
      <anchor>af546de139ec4fc9fba12a9fa1debcfac</anchor>
      <arglist>(const char *packageName, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uscript.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uscript_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="enumeration">
      <name>UScriptCode</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_INVALID_CODE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab912ec59ab2d4fc2b938c0a36e68429c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_COMMON</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a8f9e7c5226d55c7d2d0fa2fb0bb9cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_INHERITED</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab05b55004bbbb7b991ceb1937a1da968</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ARABIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a70de95ea9de2f92bf4149b91514c76ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ARMENIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a0557debc33784d31bd9a57770fa537cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BENGALI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af4a9a416487e6bb1bb8c015f8662d85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BOPOMOFO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0add8b0c0d1771faf84b2e97d09063f6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CHEROKEE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab90305423f3d1df5fd5fc3d4bcdb20f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_COPTIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a90be62940b102406ae0141a9fc11b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CYRILLIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0abcf618f5d29d1ade4695f6a9f5eeefb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_DESERET</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a07efcef061414073541adbe3d7aeb3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_DEVANAGARI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a95bd5cf477cad55534ba4a07dee697d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ETHIOPIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0abc97f945efe4f7fe20b55c1b2e55bd56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GEORGIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af4bae0ea1401790a911a86fc7506ce5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GOTHIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac15ef8f34889e2cd89a36657b431c186</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GREEK</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a728c77813644a29cd2bfc1de82f1a274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GUJARATI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0adc56616ecb8c1fc218bc15cfdb266c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GURMUKHI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a11b2be9ab094afc5259fc2980063df31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aca7951f0fcd4bf870de2ae4cbc406a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HANGUL</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a10f9a93f2b3a9eaed59f9ef347ce6974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HEBREW</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a457869549867d988b92d4d825e3c2378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HIRAGANA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a6e09aeaa651bb02a481d64d431b6ba7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KANNADA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af1a2146950c6c16c6526c5e112a03f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KATAKANA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac7395523783be2557dcc5e0b87e4a874</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KHMER</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9fbd62ce49d257a99c460a5521ee5af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LAO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a39efc7a1aa569890265bd9f22c2f82da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LATIN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9fd702e75344f1f55fd478eb56f5e9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MALAYALAM</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aca5add5c1a302c9625018c5e8aae4426</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MONGOLIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a487ae6d0e969f1359c314e7e9c357469</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MYANMAR</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad9cb713d2afb15440a185f6a4274f0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OGHAM</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a0e6f92a5d343b31c76cc424a7dfda979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_ITALIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac82151eba73be227411a3d9dd20b048f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ORIYA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac7aec1882dba5c6f7bfb74c285829224</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_RUNIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a1a010cf4d6664b16dfec4b7b058ce695</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SINHALA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae776d4dc90f6495f568c4c81ab187025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SYRIAC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a8b35e94598d882e310b211013ac0d8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAMIL</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a6d158415d7a94444c112b78c0ba9acfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TELUGU</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aec7c404f7257dd6b7c33bfc1cdc3d6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_THAANA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9e2dda29f237ae95acf08a7bd34f34c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_THAI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a307590611d2e38ee126e810e20589f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TIBETAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5107f9c84e7292565f18772bab54a0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CANADIAN_ABORIGINAL</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a1f337b59de87be231495b69f622aa776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_UCAS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a676ba0754dfe73959b5a5122a90a1644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_YI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a47abe1d661873a3887f12df6b32a58e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAGALOG</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a59b389c200f1c24bf410e8ec61c18b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HANUNOO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a4d6ec9c27d6bfbe943a2a1061b4c4af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BUHID</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5e88195639315149215e06e0fca24a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAGBANWA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a4e90cb79414dcb3957d21a945b36ded6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BRAILLE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2ea22a97e27bcebb5e85ac08e6986ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CYPRIOT</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a00ec6776e617612a3af051d7e542b785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LIMBU</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0abd89608b10d4488bdfaea0ccaf790bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LINEAR_B</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a82a92f9c8a98ef1a01232649bae74525</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OSMANYA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af468b9f4bade30f57f861c2699eb2ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SHAVIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a1ef17aa0d6ab5e6900c5284f8422faeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAI_LE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0afc4fb435e17fa8f0082e977a40755184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_UGARITIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a707ce02047069e308a3e9fbf3593d81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KATAKANA_OR_HIRAGANA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae4d7e216783cbde212693200d740f576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BUGINESE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a497519af674584718a1dfc48c1063a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GLAGOLITIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aa1f0338d397c017bba65b6f0b27b8f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KHAROSHTHI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac529c33050b2527279760b8731f01ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SYLOTI_NAGRI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5126a33194842ef74c7b4a6535aab4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_NEW_TAI_LUE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad9d56f8fca7394d6a4604c60e12c96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TIFINAGH</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aabf0a40d87b892cd76d2d0eb391db80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_PERSIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0afb846baccc413e282dd6fcd640b18da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BALINESE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a37734add235693b42fe7d49ef80b64a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BATAK</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0abc46acede6b89b82cc5a8b9440451ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BLISSYMBOLS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a04e41675450151f99251a0b8da2b8f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BRAHMI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a3f1d7fdba8bef2c038e6268c4ba699bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CHAM</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a72277ec0d4d369687cf84c443acc429c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CIRTH</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab471957a26c496afb0e03013ddfc931f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a807eb8b2b6361e9f9aa4cd0777ac1293</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_DEMOTIC_EGYPTIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aa03cc5c478f486597d5e498c54c3f34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HIERATIC_EGYPTIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9a8afda2d02179af4b4011e95ca57484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_EGYPTIAN_HIEROGLYPHS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab407ba983936168de24c1653a3b80fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KHUTSURI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ac20e229c3637ec23bbc249437dd95e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SIMPLIFIED_HAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad81dcda1aad8233810b2728cc68afea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TRADITIONAL_HAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a25e7424a92da5dd46626c703f09b2223</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PAHAWH_HMONG</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab6f6fe4a3ebfe814d7a9aad4b2c5b332</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_HUNGARIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aba34d479dc14958edb95e25686408564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_HARAPPAN_INDUS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a196ecf02ce86469380ba44e0a054afc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_JAVANESE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a1f3bd64ace2b0ebc645a314732023435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KAYAH_LI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae78b7b1f107b46c8314c5adfd539308e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LATIN_FRAKTUR</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad05e89a33a42f2af26e5af46a8143444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LATIN_GAELIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2d40524e96b65aa922addefbf371e2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LEPCHA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0adedae84dbcefb2eb464d79a513b4db8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LINEAR_A</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0acb14c6f01597617df7babb2faa74248b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MANDAIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a8cf1a71067678e790305d4ce079746e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MANDAEAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a648e6bc51d2c978ac75077e08d1f9a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MAYAN_HIEROGLYPHS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a8e29feb46f86bb62cfc42577fd7b4572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MEROITIC_HIEROGLYPHS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a64f528cbe1b1ebd94a3dbcda7c46151f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MEROITIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a612dfdd5653045d8f76e1f138db0712d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_NKO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0abda696788914469fad2085b1100b0a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ORKHON</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a43f9aab0f1ed6c1efd185962b69a3ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_PERMIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5c944a18e1f49132f259302cd024f9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PHAGS_PA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a456f676a509ec170c8d0453c38f5c9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PHOENICIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae58e0ed9190de2428b3ea22715360662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PHONETIC_POLLARD</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a703b94d8ed3914ba783e53d6237c01c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_RONGORONGO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a7fff4a6d79952d66e42c11a0e34ebd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SARATI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aeaf90695e8c7951012ef30af7df53d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ESTRANGELO_SYRIAC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af0a599efd3c7e73e5f78352a1009a1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_WESTERN_SYRIAC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a74a1b95f6455971d17cc452c615c99b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_EASTERN_SYRIAC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a6a506f7705aa7963433c0813e178a277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TENGWAR</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0acb97617767422dcadbf0a6bf3e6969ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_VAI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2915d7116b6b254ec61cb408c59c069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_VISIBLE_SPEECH</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0acffad483d423f086fdcb162fccad5c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CUNEIFORM</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2652a2c68e0c8e3b4a4a27a2ed0d076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_UNWRITTEN_LANGUAGES</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9b65edc523ea88e3e1787fa2895135aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_UNKNOWN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad3eeb56d42cbc2f8306614759f6cce8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CARIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5af1a7f667a1d21f20abff04582b58ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_JAPANESE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a567e0c0ad7fc7ce509ee10537c9b540b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LANNA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a5d0fe07e6cd325194860e51699636051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LYCIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0afab7d2034b10cd2b3487d52268d65dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LYDIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a3244e04f29aace84e0cf95e61e3fd464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OL_CHIKI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aab5aae3c895451bb8e7291dd8c736c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_REJANG</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af8c618255e6ba76b97f17276408f4bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SAURASHTRA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a0da9e63d508ff0753c09ce8b7367dead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SIGN_WRITING</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a087662d998c48c3b5eaddb81483451b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SUNDANESE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad963ebcd28e8843a0497e83a3c64a6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MOON</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a6af615f87d0411e7a9dd43f8aff138cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MEITEI_MAYEK</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a32ca03a040c70796395a808048ebde42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_IMPERIAL_ARAMAIC</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a073534b6b3f112b961afd65721be00b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_AVESTAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0affb07bea0a2cbb836a7e127ea893d8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CHAKMA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a44c2f91f504112119ce8f26db0f9dc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KOREAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a7f07b2a2e32453cde192f5d430e4dd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KAITHI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9ca740d94da8da4c684b22e268a19192</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MANICHAEAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a54c4337e7dc83cbb88e3457cc89acfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_INSCRIPTIONAL_PAHLAVI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a046410f6894551ac2ba6006a42cb1d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PSALTER_PAHLAVI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab32c8480178e2ff3ed1a1437d42c48a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BOOK_PAHLAVI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a231cc4dfffec82bd5a5a8c0a8b384c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_INSCRIPTIONAL_PARTHIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a637eb6daf1a1c8e31642a24b5192c40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SAMARITAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aadee723d7d99ec7d51e9b9000ce20be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAI_VIET</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a63183de074c0c2c0ad91e4011c6ca551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MATHEMATICAL_NOTATION</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a8b599ffcbcf5d70fa4a8767d3e61dfd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SYMBOLS</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a352c38c66e8955f2803e45bd8f69cc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BAMUM</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a82161698a381e9fda6f0921ce51dbfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LISU</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a54af0f201ed501def20d3589aca06dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_NAKHI_GEBA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a08144913e5d88b82f3b047c9d5e5a095</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_SOUTH_ARABIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aaca0aea9fda3ca09892ad5d082eda0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_BASSA_VAH</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a680cfefe51b60c7287b957793744d513</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_DUPLOYAN_SHORTAND</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aee872e26c9f183eef875bcbfdfc98339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_ELBASAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aae6d8b475299f02b094666c3d2e87ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_GRANTHA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a3cd34dc2fa4e0106780c5a2df7aa5808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_KPELLE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2005a72784ac5dc44acd35236a26028f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_LOMA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a97be31da76356a22203f939d17fe1a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MENDE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a2888fb4ee45111549c02535799bca087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MEROITIC_CURSIVE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0adbe3bf4746f40b8835c062771827602a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_OLD_NORTH_ARABIAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a229a4cc6f3ba8bae619285e2be5241f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_NABATAEAN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a4cc1c326e21ddc99a6ce4058e1686060</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_PALMYRENE</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ab4dda7ef3114718e4bdded881c74c8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SINDHI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad4591d5bdb8a90f7b423984e30faed46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_WARANG_CITI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9bbb9a35f167c1d9f904aa1faf8f4d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_AFAKA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a9f00eeb2626fa0210f3b002081d435e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_JURCHEN</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae4da76a15bfb285886269cdf6359123a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_MRO</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0aed42e10be15205430bca6e46f8a53c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_NUSHU</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ad5af71bed22b23e84f5f722dfce0e749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SHARADA</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0ae65a4468409d09254a48ba892c95feee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_SORA_SOMPENG</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0afb3197fc0353dfa99b0b10cd63a86232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TAKRI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a693aa961bbfa27420e242eb25522feab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_TANGUT</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0af59d10f17b4207a26cad2f490de4606d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_WOLEAI</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a0351d02c53e4c79451d88165751b225e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USCRIPT_CODE_LIMIT</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a5036ff9ca2a7f1d2bde07875bb235df0a12e18aa66866154e14fd0f1cb19e7150</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uscript_getCode</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>ad7c87340add879032324be150438f671</anchor>
      <arglist>(const char *nameOrAbbrOrLocale, UScriptCode *fillIn, int32_t capacity, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uscript_getName</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a6ccac5015769b6bdf4a0345b2756ca9a</anchor>
      <arglist>(UScriptCode scriptCode)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uscript_getShortName</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a34236e1bcb71635837fc9f0e045499fa</anchor>
      <arglist>(UScriptCode scriptCode)</arglist>
    </member>
    <member kind="function">
      <type>UScriptCode</type>
      <name>uscript_getScript</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a58e91e4b9ea0c12fc96415691f32f3a4</anchor>
      <arglist>(UChar32 codepoint, UErrorCode *err)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uscript_hasScript</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>aec5e62350193d649747846d4298ef9d7</anchor>
      <arglist>(UChar32 c, UScriptCode sc)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uscript_getScriptExtensions</name>
      <anchorfile>uscript_8h.html</anchorfile>
      <anchor>a3e1e33c8eb52697064e3d7eeb400fac0</anchor>
      <arglist>(UChar32 c, UScriptCode *scripts, int32_t capacity, UErrorCode *errorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>usearch.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>usearch_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="ucol_8h" name="ucol.h" local="yes" imported="no">unicode/ucol.h</includes>
    <includes id="ucoleitr_8h" name="ucoleitr.h" local="yes" imported="no">unicode/ucoleitr.h</includes>
    <includes id="ubrk_8h" name="ubrk.h" local="yes" imported="no">unicode/ubrk.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>USEARCH_DONE</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ab66c48ad34ba3832680f23da3e0f70aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UStringSearch</type>
      <name>UStringSearch</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ab244c09051ecef7e477be6f3e247796d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USearchAttribute</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aa382f146f1968a9d1dc182100b23ac03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_OVERLAP</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aa382f146f1968a9d1dc182100b23ac03a5ff7dd21e97fe37e8c0831e01109ac4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_CANONICAL_MATCH</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aa382f146f1968a9d1dc182100b23ac03a37b8d3d23099f977933aba4ee4eeff4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_ELEMENT_COMPARISON</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aa382f146f1968a9d1dc182100b23ac03a5913e7fe1dd4718633825ffc3c7eb58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USearchAttributeValue</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_DEFAULT</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1a4195142bbaf07c3e7503a4017deab57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_OFF</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1a5c12e5024dc8193f02f5961d9997ecc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_ON</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1a683745df041ae94d9b0450c08d030fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_STANDARD_ELEMENT_COMPARISON</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1aaaa3f2ca0131d2dac6cda0af4c53903e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1ad657b25a9167aad29f36acdbcb65d155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>afbe777746540a229c0a2ff3323e292d1adfcf458c299700c875bbb28ca558506f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UStringSearch *</type>
      <name>usearch_open</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a25915409c9af820aef82990b82b401d7</anchor>
      <arglist>(const UChar *pattern, int32_t patternlength, const UChar *text, int32_t textlength, const char *locale, UBreakIterator *breakiter, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UStringSearch *</type>
      <name>usearch_openFromCollator</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a5cfb0c54ef2b4bf100ce5f1febf769cc</anchor>
      <arglist>(const UChar *pattern, int32_t patternlength, const UChar *text, int32_t textlength, const UCollator *collator, UBreakIterator *breakiter, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_close</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a618a3f90394cecd1f76aaee4cc1b4c9d</anchor>
      <arglist>(UStringSearch *searchiter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setOffset</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a1291f11a16b4b1090eb7029e4c51c70a</anchor>
      <arglist>(UStringSearch *strsrch, int32_t position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_getOffset</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ad5913a0eff26b126630d802195fa4622</anchor>
      <arglist>(const UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setAttribute</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ac983c4347f0d3d0179d67f0e9ba47bd0</anchor>
      <arglist>(UStringSearch *strsrch, USearchAttribute attribute, USearchAttributeValue value, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>USearchAttributeValue</type>
      <name>usearch_getAttribute</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a22948a4f2340979d38e145e13efb7a86</anchor>
      <arglist>(const UStringSearch *strsrch, USearchAttribute attribute)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_getMatchedStart</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a87337f2e0925028965f9f4ff72463eab</anchor>
      <arglist>(const UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_getMatchedLength</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a4a88cb2386508803670df932384ed195</anchor>
      <arglist>(const UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_getMatchedText</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a19a7079e52d937fc2ea7fe5e06a2c563</anchor>
      <arglist>(const UStringSearch *strsrch, UChar *result, int32_t resultCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setBreakIterator</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a86d42a1e90bb714a38a314d5bb77cda5</anchor>
      <arglist>(UStringSearch *strsrch, UBreakIterator *breakiter, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UBreakIterator *</type>
      <name>usearch_getBreakIterator</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a1386c96d1215f380a0678bf368efbbba</anchor>
      <arglist>(const UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setText</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a09c1c5d4ea8b69ce32993dff6426a386</anchor>
      <arglist>(UStringSearch *strsrch, const UChar *text, int32_t textlength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>usearch_getText</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a4c0acb3936f46b566e39874e6f063f1b</anchor>
      <arglist>(const UStringSearch *strsrch, int32_t *length)</arglist>
    </member>
    <member kind="function">
      <type>UCollator *</type>
      <name>usearch_getCollator</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ac6c5c26c83f1797d7d60befad91ca2d3</anchor>
      <arglist>(const UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setCollator</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ac54be8b9a44d22ec6ea5d53f3cc5d7c5</anchor>
      <arglist>(UStringSearch *strsrch, const UCollator *collator, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_setPattern</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aa2d53cd40c636eb0da13b891e4a84dbb</anchor>
      <arglist>(UStringSearch *strsrch, const UChar *pattern, int32_t patternlength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>usearch_getPattern</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a1ffeb4ed9b997387051c1705b2b32858</anchor>
      <arglist>(const UStringSearch *strsrch, int32_t *length)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_first</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ad59a7f4746faf28c98fee8473e0353d4</anchor>
      <arglist>(UStringSearch *strsrch, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_following</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a32c4c29b24f1f2ce0a3dc4e90c1a0b30</anchor>
      <arglist>(UStringSearch *strsrch, int32_t position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_last</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aad61fadd096cd28a454f68fa117a24cb</anchor>
      <arglist>(UStringSearch *strsrch, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_preceding</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>ac3cd326f313fdc57bfe46f906a33f6f1</anchor>
      <arglist>(UStringSearch *strsrch, int32_t position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_next</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a51f8b08f582cb956d950cdd5098e93cf</anchor>
      <arglist>(UStringSearch *strsrch, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usearch_previous</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a6be0c1c2f412c0ae13cb9c7c1796d7a4</anchor>
      <arglist>(UStringSearch *strsrch, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usearch_reset</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a52484e482e408ddc091cc43b0d1decd9</anchor>
      <arglist>(UStringSearch *strsrch)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>usearch_search</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>a429ec33f40f29f25d41ce8a1f7513465</anchor>
      <arglist>(UStringSearch *strsrch, int32_t startIdx, int32_t *matchStart, int32_t *matchLimit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>usearch_searchBackwards</name>
      <anchorfile>usearch_8h.html</anchorfile>
      <anchor>aafad5d71a67ca39ba1886fbae3659a5b</anchor>
      <arglist>(UStringSearch *strsrch, int32_t startIdx, int32_t *matchStart, int32_t *matchLimit, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uset.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uset_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uchar_8h" name="uchar.h" local="yes" imported="no">unicode/uchar.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <class kind="struct">USerializedSet</class>
    <member kind="typedef">
      <type>struct USet</type>
      <name>USet</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>adce3fef7c15d7c78196bf977ac96ec9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_IGNORE_SPACE</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a16af7b253440dadd46a80a4b9fddba4da0273be77d90674cbb82a37f9edb504ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_CASE_INSENSITIVE</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a16af7b253440dadd46a80a4b9fddba4da740685a55f610ca84868b60aef83db7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_ADD_CASE_MAPPINGS</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a16af7b253440dadd46a80a4b9fddba4da68133c690985f92d95996e4cf9abd80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_SERIALIZED_STATIC_ARRAY_CAPACITY</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a16af7b253440dadd46a80a4b9fddba4da755814d28a97e9ab24a450e008644d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USetSpanCondition</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a5fc2e77dd6c8385e0e88fc6a7d72d9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_SPAN_NOT_CONTAINED</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a5fc2e77dd6c8385e0e88fc6a7d72d9b4a02c1d43f074e8153eddaa79eb74d80f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_SPAN_CONTAINED</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a5fc2e77dd6c8385e0e88fc6a7d72d9b4a0a731ae6bad64429eeb153b8704e4d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_SPAN_SIMPLE</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a5fc2e77dd6c8385e0e88fc6a7d72d9b4a79e5e08a799906f1de00a58f189a3f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USET_SPAN_CONDITION_COUNT</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a5fc2e77dd6c8385e0e88fc6a7d72d9b4a6b1ad879b4752df1122a027e528a89d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_openEmpty</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a22816ab96fc649d9d3ba69898e52452b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_open</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a65a4e226273821916545e45dee27a144</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_openPattern</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ab8b79fbe81d1245c15ee17a64c4513b3</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_openPatternOptions</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a34a8914b62d0de444d7a2e7981eb343a</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, uint32_t options, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_close</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>abb0d0fb8d660204fd7fef7fe920bb70c</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_clone</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a1965f27413bb1fee1cc03bdfb061148e</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_isFrozen</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ac56a97260c2b1092381111b5004c9e40</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_freeze</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a851fc7d7e6920ff73fb9529d75aba387</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>uset_cloneAsThawed</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a6b84cdeb472adde6bfa8b7ea7f33f0d4</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_set</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a171f42b2a952b070101378748e72b9bb</anchor>
      <arglist>(USet *set, UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_applyPattern</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ac934accbf4a12c2f8b13a86ffab4c22c</anchor>
      <arglist>(USet *set, const UChar *pattern, int32_t patternLength, uint32_t options, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_applyIntPropertyValue</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a3c3fb05328c5f3f1d5c9d230e3ff150e</anchor>
      <arglist>(USet *set, UProperty prop, int32_t value, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_applyPropertyAlias</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a6ea4197ee50887dde5eb6e9deb2f3442</anchor>
      <arglist>(USet *set, const UChar *prop, int32_t propLength, const UChar *value, int32_t valueLength, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_resemblesPattern</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a319e09dd5e7c7987e177da7d31239ed2</anchor>
      <arglist>(const UChar *pattern, int32_t patternLength, int32_t pos)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_toPattern</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>add59ca5626ba49504529174c7f47e4b3</anchor>
      <arglist>(const USet *set, UChar *result, int32_t resultCapacity, UBool escapeUnprintable, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_add</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>aceae4c9143329a4ad6f742f7e74ad6ce</anchor>
      <arglist>(USet *set, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_addAll</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>acb550f469f833d41c14536ea11bf54be</anchor>
      <arglist>(USet *set, const USet *additionalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_addRange</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a9c1050ab4e1056abd819d4fa3b46948d</anchor>
      <arglist>(USet *set, UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_addString</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>af2917938713745c91c44b622c61ad01b</anchor>
      <arglist>(USet *set, const UChar *str, int32_t strLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_addAllCodePoints</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a7a8489c50fd74324a4dc000bdceea49c</anchor>
      <arglist>(USet *set, const UChar *str, int32_t strLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_remove</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>afe44d95c8c0be1e4ce4399a4ee2f1f8f</anchor>
      <arglist>(USet *set, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_removeRange</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a6b0fc0ae495d8aa755e2f42769e49b62</anchor>
      <arglist>(USet *set, UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_removeString</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>aec1fe2c7d06a475d21fbf822fb42b825</anchor>
      <arglist>(USet *set, const UChar *str, int32_t strLen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_removeAll</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a762f9d6a016dd5a59a9a6701255e5e96</anchor>
      <arglist>(USet *set, const USet *removeSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_retain</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a49d1074ef9aeca26567d9a35ee0e97b9</anchor>
      <arglist>(USet *set, UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_retainAll</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a6878a72dcd2249c49924ec98c922ba2e</anchor>
      <arglist>(USet *set, const USet *retain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_compact</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>acacac5438cd07fcfe5c4f52a561f36c2</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_complement</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a648e93c5d2893cc65b0eb80f3162544e</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_complementAll</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ae1d4b880a74aecc07039dfdfb40489c4</anchor>
      <arglist>(USet *set, const USet *complement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_clear</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a19fe69e5c9597433b6e63ff9d8497e4b</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_closeOver</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>acf615979d702ddad23605dd75eae2b40</anchor>
      <arglist>(USet *set, int32_t attributes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_removeAllStrings</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a53fe590b2c673bf54b433c146fe19cca</anchor>
      <arglist>(USet *set)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_isEmpty</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a42e3efc0c34ebeb18df64b4c38158fd7</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_contains</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>af8d9773ae28c70f253d1ba48ee4957f5</anchor>
      <arglist>(const USet *set, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsRange</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>adab26ac0159e09e748869290be18bf2e</anchor>
      <arglist>(const USet *set, UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsString</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a2e23614c8863a4cf606f55d38aecbe5e</anchor>
      <arglist>(const USet *set, const UChar *str, int32_t strLen)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_indexOf</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a902222c7bd584a91102b26c77842be50</anchor>
      <arglist>(const USet *set, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>uset_charAt</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a391f062a8df24a271c2148b106880188</anchor>
      <arglist>(const USet *set, int32_t charIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_size</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a83f6b0b79bbfa0a65248fb39f40e88dd</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_getItemCount</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a3d09ac37a8e0fbf5d38ef8281a3f4b3f</anchor>
      <arglist>(const USet *set)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_getItem</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a1d9da52f345a1b4de5a933d8a3213070</anchor>
      <arglist>(const USet *set, int32_t itemIndex, UChar32 *start, UChar32 *end, UChar *str, int32_t strCapacity, UErrorCode *ec)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsAll</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>af55a5a2133c850561c6bd6f53e32a91c</anchor>
      <arglist>(const USet *set1, const USet *set2)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsAllCodePoints</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>adb76bbc067c2d78c697a55b01d170674</anchor>
      <arglist>(const USet *set, const UChar *str, int32_t strLen)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsNone</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ab1fd51712466a660f821f1ae4948e009</anchor>
      <arglist>(const USet *set1, const USet *set2)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_containsSome</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>ae05a6aa4c5572219700ddb142a4e2a71</anchor>
      <arglist>(const USet *set1, const USet *set2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_span</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a1c2ae031cbb8557b0106a571dfbdf038</anchor>
      <arglist>(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_spanBack</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a8f38fd1f93c2908ff3bd9290a849c2f7</anchor>
      <arglist>(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_spanUTF8</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a544f014d315c49f98c39aac7d4fe6a9a</anchor>
      <arglist>(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_spanBackUTF8</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>af3533477f8a22a4988b625ecbb9df8cf</anchor>
      <arglist>(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_equals</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a027edbf3f81914abb7a703fb5b83bbcf</anchor>
      <arglist>(const USet *set1, const USet *set2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_serialize</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a7b1d3c1676d23e1dce2b6532bdc00aed</anchor>
      <arglist>(const USet *set, uint16_t *dest, int32_t destCapacity, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_getSerializedSet</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>aee4c3abbd48d9d899f6250d498a29168</anchor>
      <arglist>(USerializedSet *fillSet, const uint16_t *src, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uset_setSerializedToOne</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a550b1efa4844dc9d745ca7c01836bb10</anchor>
      <arglist>(USerializedSet *fillSet, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_serializedContains</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a4a4f37a9684cfd16c1271ff6cbaf4ea6</anchor>
      <arglist>(const USerializedSet *set, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uset_getSerializedRangeCount</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a4b09f3f07927c1fbae2b05cce3a22e4f</anchor>
      <arglist>(const USerializedSet *set)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>uset_getSerializedRange</name>
      <anchorfile>uset_8h.html</anchorfile>
      <anchor>a6a197df6a2d0d9cafc8561d6fab55148</anchor>
      <arglist>(const USerializedSet *set, int32_t rangeIndex, UChar32 *pStart, UChar32 *pEnd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>usetiter.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>usetiter_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uobject_8h" name="uobject.h" local="yes" imported="no">unicode/uobject.h</includes>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <class kind="class">UnicodeSetIterator</class>
  </compound>
  <compound kind="file">
    <name>ushape.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ushape_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LENGTH_GROW_SHRINK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ac17406c6548f18e1c9d7f3339e20c99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_RESIZE</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a44a55b05c3e6d7083cb38149860ad4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LENGTH_FIXED_SPACES_NEAR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a56141bf9903c7b5e884d4193d110e7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_NEAR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a4f48efd37560b34e415a755a485519eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LENGTH_FIXED_SPACES_AT_END</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a1176691c3596d19baad04f9421f8389e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_END</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a16b1f4c076f22c3201877149d8a866d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a76a858155800f59a06ea800f66821ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_BEGIN</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ab006a540a0f924e9e19e194da2f5c2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_AUTO</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a222f9407817a37959cfcd8ee31edaa39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LENGTH_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ac08849a490c2f229a7dc5e74faf00f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LAMALEF_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>adf5a64eaf97d100e07be80339f2c13c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TEXT_DIRECTION_LOGICAL</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a376059a8a3abdb0516f783941ff7d464</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TEXT_DIRECTION_VISUAL_RTL</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a0d7a7f1722037ec0af54e74d16695ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TEXT_DIRECTION_VISUAL_LTR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a98b7d5a066c6d71319f911dd0ae0fda4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TEXT_DIRECTION_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>aead4db716c892f18366202c5d231672a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LETTERS_NOOP</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a86f5c2c9667050dc9ab52b2568b2f299</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LETTERS_SHAPE</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ae54a10c82b703d47e46655b732e9ee50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LETTERS_UNSHAPE</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ab5db2793e06b3f711b2413ae43fda338</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a147edaa89bc02994a85f99d0eca97dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_LETTERS_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a5ede249701211173c977a9069d808800</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_NOOP</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ac30d73f1b5a592655063a2a07169aaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_EN2AN</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ad2a55f99c617158f846c246bc2d08e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_AN2EN</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ab64949486e9c70a4452903d6938d8198</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_ALEN2AN_INIT_LR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>aaf9e74416ef9eb51078194c75ae58c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_ALEN2AN_INIT_AL</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a62280016a9a1e6dae2606e7f4885a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_RESERVED</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>abda4f9060a11b445ceaae095b0ef6e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGITS_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a85ff906eb1189dccac37fda9f801edf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGIT_TYPE_AN</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ace82e665031672d4d90e9de8802ee877</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGIT_TYPE_AN_EXTENDED</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ad702c7e0c649d5cb2ac70d3e0a820cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGIT_TYPE_RESERVED</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ae7a72684ba67ebae3e141c0427736302</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_DIGIT_TYPE_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a57ba27bfc4ba29dffa3354d1d9ca045f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_AGGREGATE_TASHKEEL</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>aa3b28918b5a9c1b597eeb1cf9b04067f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_AGGREGATE_TASHKEEL_NOOP</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a5df6abccc5c906fa4bc07c84351614c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_AGGREGATE_TASHKEEL_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a16d0d1f59bc47273fbc7fa358aba981f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_PRESERVE_PRESENTATION</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>af9b205460569cb5d6667ed773bc0c9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_PRESERVE_PRESENTATION_NOOP</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>abb9ef25407831f84a85a8812592ffe00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_PRESERVE_PRESENTATION_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a713bd393961c912cc5af94400b7b6752</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_SEEN_TWOCELL_NEAR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a0be47852d24dd3ea9fd5f029ec831a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_SEEN_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ae7d634565a9489deb4afd698f09435d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_YEHHAMZA_TWOCELL_NEAR</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>ab2eb63f2ed694089974d76ba83da25c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_YEHHAMZA_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>aabc0cc02c0b88d31f1a53f3c1f5e0740</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TASHKEEL_BEGIN</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a14476be839b55f569a46d6e5412d35c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TASHKEEL_END</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>aa9a5ccf21b70f720239f3bbdd3bd30ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TASHKEEL_RESIZE</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a5a123149941ac200596e538dd713fdfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>abbb7c0115c0752d3f79d31db94fdfc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TASHKEEL_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a2023bfdb099970a1eddaed17b65d2092</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>adca8805b353d9abfe80b27e2d104a899</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a80c0f9a48e3e40864ba0bdb6bf9480cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TAIL_NEW_UNICODE</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a4ad71c805c6440ee9d1598cbb2309978</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SHAPE_TAIL_TYPE_MASK</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a17d5be962c44c48054775253b08c73fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_shapeArabic</name>
      <anchorfile>ushape_8h.html</anchorfile>
      <anchor>a1f89291c5a24a50b8f6dcad5eb4668f7</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, UChar *dest, int32_t destSize, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uspoof.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>uspoof_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uset_8h" name="uset.h" local="yes" imported="no">unicode/uset.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="typedef">
      <type>struct USpoofChecker</type>
      <name>USpoofChecker</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ad5e4927218c9e62595a67378cf6e371f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>USpoofChecks</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_SINGLE_SCRIPT_CONFUSABLE</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155adc4588fd7ff74c3a6e5cc91d3a6f5d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_MIXED_SCRIPT_CONFUSABLE</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155a76a60327ab14a68342242aae60340106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_WHOLE_SCRIPT_CONFUSABLE</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155abfc834ae8c881e54a7922648d5fecead</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_ANY_CASE</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155ae65a72b384e76f7ac1cc4df1decd8057</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_SINGLE_SCRIPT</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155a68b7d294c1566c1f4a74e2b3a952a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_INVISIBLE</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155a7324a51073ca18279da8706d8c21ee0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPOOF_CHAR_LIMIT</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a0dbd60e53a571689baf65c63f4de8155a3f3e13d5b54cc156864a2aca221b3888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>USpoofChecker *</type>
      <name>uspoof_open</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>afeff54ce632c1357e914334009becb62</anchor>
      <arglist>(UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>USpoofChecker *</type>
      <name>uspoof_openFromSerialized</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>aa13a3dd9f673f9df317948eecab1a346</anchor>
      <arglist>(const void *data, int32_t length, int32_t *pActualLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>USpoofChecker *</type>
      <name>uspoof_openFromSource</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a5332f41a9d13aec2cc115e6a24d08595</anchor>
      <arglist>(const char *confusables, int32_t confusablesLen, const char *confusablesWholeScript, int32_t confusablesWholeScriptLen, int32_t *errType, UParseError *pe, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uspoof_close</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ab63b4f7780b1d6c57a31624ad5c3db41</anchor>
      <arglist>(USpoofChecker *sc)</arglist>
    </member>
    <member kind="function">
      <type>USpoofChecker *</type>
      <name>uspoof_clone</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a5a6a3fff21c2aa515d3e16da47609a48</anchor>
      <arglist>(const USpoofChecker *sc, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uspoof_setChecks</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a1600b90af8fde36cf87d6c6be8df5af0</anchor>
      <arglist>(USpoofChecker *sc, int32_t checks, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_getChecks</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a11c9d7b315c2f4b1011619bd4df91cf8</anchor>
      <arglist>(const USpoofChecker *sc, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uspoof_setAllowedLocales</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>aca1b0d0630a88af80c56e8205761f6a1</anchor>
      <arglist>(USpoofChecker *sc, const char *localesList, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>uspoof_getAllowedLocales</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ae9105b5d6d3dd326dcfd60fe3730f5d0</anchor>
      <arglist>(USpoofChecker *sc, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uspoof_setAllowedChars</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>abe089c3471eb52dbbd7268c3eb9db695</anchor>
      <arglist>(USpoofChecker *sc, const USet *chars, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>const USet *</type>
      <name>uspoof_getAllowedChars</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ab15e60d2aaaa9ea5d49eb4524c41fa9e</anchor>
      <arglist>(const USpoofChecker *sc, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_check</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a6ea81c89a7dd8d21afba293c8ad3e5e5</anchor>
      <arglist>(const USpoofChecker *sc, const UChar *text, int32_t length, int32_t *position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_checkUTF8</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a1185af276dd26760d4f35eb690d52250</anchor>
      <arglist>(const USpoofChecker *sc, const char *text, int32_t length, int32_t *position, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_areConfusable</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a30478be8a197dd7c3ac19a2a94ad8c6d</anchor>
      <arglist>(const USpoofChecker *sc, const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_areConfusableUTF8</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ab4c036b175cfeabf5a2b0c18f2eaac00</anchor>
      <arglist>(const USpoofChecker *sc, const char *s1, int32_t length1, const char *s2, int32_t length2, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_getSkeleton</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a848c780fd8a59f18e1835608e6fe6b76</anchor>
      <arglist>(const USpoofChecker *sc, uint32_t type, const UChar *s, int32_t length, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_getSkeletonUTF8</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>ac28b7bee6ac0f6b64e1ae844fcca4240</anchor>
      <arglist>(const USpoofChecker *sc, uint32_t type, const char *s, int32_t length, char *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>uspoof_serialize</name>
      <anchorfile>uspoof_8h.html</anchorfile>
      <anchor>a808f6fefabd028ea78931f85ec634022</anchor>
      <arglist>(USpoofChecker *sc, void *data, int32_t capacity, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>usprep.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>usprep_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>USPREP_DEFAULT</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>ab5702434a76b6a260d200d2380166625</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USPREP_ALLOW_UNASSIGNED</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>ab7b59be4f9636e3c43015642ff34f2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UStringPrepProfile</type>
      <name>UStringPrepProfile</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a725d11d0c462858ee0845710f7e1e2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UStringPrepProfileType</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3491_NAMEPREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158add2cb41011bb83a450365d4a64f1ab9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3530_NFS4_CS_PREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a358129952b212ff22dfb9f82756e0a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3530_NFS4_CS_PREP_CI</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a830fdd177933f8832dfe721c8459c301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3530_NFS4_CIS_PREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a9526ec098dbb60edc5efd8d489ff5c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158aaa9b70ca503fcecde5b687177cc8a8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a2e8d4f8d42d4a0d12d74d16cc43c19bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3722_ISCSI</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a3bdad3f602216d3f894cc14aefb377b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3920_NODEPREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a949424813fad4724db4cb041a2d2eab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC3920_RESOURCEPREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158ab6eb3ba15c6fc00f9c559be34bace7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC4011_MIB</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a1fc4f2071a071d6f77ec1ad14f0c3168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC4013_SASLPREP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a8de3b8ca7d3a7e60b5892cdadc721ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC4505_TRACE</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a28e473bbcd279bb6ba4b3a046063304e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC4518_LDAP</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a88f4ecb99d8d48847c10aa6ddee27fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USPREP_RFC4518_LDAP_CI</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9cfa8a892882421a8b67087b09650158a3f352d3878e7ba97f351fef792009876</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UStringPrepProfile *</type>
      <name>usprep_open</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a04f460592db2472edb6cb2a5375453e3</anchor>
      <arglist>(const char *path, const char *fileName, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UStringPrepProfile *</type>
      <name>usprep_openByType</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a6dfc83ef46e649c73f0ffdb44b0ab6bb</anchor>
      <arglist>(UStringPrepProfileType type, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usprep_close</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a9565aad7868978f947a4dc01899bdd0d</anchor>
      <arglist>(UStringPrepProfile *profile)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>usprep_prepare</name>
      <anchorfile>usprep_8h.html</anchorfile>
      <anchor>a3585603689e2aaee39fd2a5d1b7578ad</anchor>
      <arglist>(const UStringPrepProfile *prep, const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ustdio.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/io/unicode/</path>
    <filename>ustdio_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="ucnv_8h" name="ucnv.h" local="yes" imported="no">unicode/ucnv.h</includes>
    <includes id="utrans_8h" name="utrans.h" local="yes" imported="no">unicode/utrans.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_EOF</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ad2abb9cdcd84b75fef26348fd540e7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UFILE</type>
      <name>UFILE</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ae90a658afbabf4e36c17dd4eeb95f1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UFileDirection</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a9e9aaa695e1c052127aae9a75f082155</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UFILE *</type>
      <name>u_fopen</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a921519fbcb17c3e3c020b2871afb8b23</anchor>
      <arglist>(const char *filename, const char *perm, const char *locale, const char *codepage)</arglist>
    </member>
    <member kind="function">
      <type>UFILE *</type>
      <name>u_finit</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a97b3a4c3639271188f378bf87e2c957d</anchor>
      <arglist>(FILE *f, const char *locale, const char *codepage)</arglist>
    </member>
    <member kind="function">
      <type>UFILE *</type>
      <name>u_fadopt</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ae87c57f37b30b724d24e003ced290370</anchor>
      <arglist>(FILE *f, const char *locale, const char *codepage)</arglist>
    </member>
    <member kind="function">
      <type>UFILE *</type>
      <name>u_fstropen</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a8dbdc3a52164c1f207d7731105b85982</anchor>
      <arglist>(UChar *stringBuf, int32_t capacity, const char *locale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_fclose</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ab3241cbe6c98cc23a1a164b19d9f2d84</anchor>
      <arglist>(UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_feof</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>aebc8584d59bee9aa7a1d44391fb329e4</anchor>
      <arglist>(UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_fflush</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ab80062155b58334f8f85e6b5b4e93521</anchor>
      <arglist>(UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_frewind</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>af58b8c15c4ef981e1b7cc45e39eb75b8</anchor>
      <arglist>(UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>u_fgetfile</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a254f86265efa9b9e8e9683aa5bccdb7c</anchor>
      <arglist>(UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_fgetlocale</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a708f57f3b9560e13e96d5af5753d8633</anchor>
      <arglist>(UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fsetlocale</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>adb774e3149c9a0da75bda57a71098935</anchor>
      <arglist>(UFILE *file, const char *locale)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_fgetcodepage</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a877318646295602392de8a858953e8ff</anchor>
      <arglist>(UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fsetcodepage</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a7381b833b6835034008985da1fb9acc2</anchor>
      <arglist>(const char *codepage, UFILE *file)</arglist>
    </member>
    <member kind="function">
      <type>UConverter *</type>
      <name>u_fgetConverter</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a1a03b63365f381fa3baf030d7dfc9392</anchor>
      <arglist>(UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>aace6d50c4e497147fa383f36619b6691</anchor>
      <arglist>(UFILE *f, const char *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vfprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a8e3b9d93385a94595f3bdf8d5e992427</anchor>
      <arglist>(UFILE *f, const char *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a391d37061930a7ad8c33df8d5432ce12</anchor>
      <arglist>(UFILE *f, const UChar *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vfprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a67654b30a7ab9a23c61be373e35941f8</anchor>
      <arglist>(UFILE *f, const UChar *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fputs</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a2e58874c36723ec9d01555f194c2116d</anchor>
      <arglist>(const UChar *s, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_fputc</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a41f2cddc2702c115848b4fbdb48c3794</anchor>
      <arglist>(UChar32 uc, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_file_write</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>abb0b2946239f10903e865d910091514b</anchor>
      <arglist>(const UChar *ustring, int32_t count, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fscanf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a18444caddf68d1d161fa13b2edd1a9c5</anchor>
      <arglist>(UFILE *f, const char *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vfscanf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a3da72684541aecfe6c16a79b2fed8e79</anchor>
      <arglist>(UFILE *f, const char *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_fscanf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>ad8fd4a3cd5b363c78773b1d5f06e712e</anchor>
      <arglist>(UFILE *f, const UChar *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vfscanf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a9eeec18b5b99b4efb40887db70103e23</anchor>
      <arglist>(UFILE *f, const UChar *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_fgets</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a156e78f4160c0cde264158ab4f4f0081</anchor>
      <arglist>(UChar *s, int32_t n, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>UChar</type>
      <name>u_fgetc</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>afbed21b23ad994d4c4f83e4fe3e8a890</anchor>
      <arglist>(UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_fgetcx</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a48b9be06c611643848639fa4c22a16f4</anchor>
      <arglist>(UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_fungetc</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a65dcbb420a8f44e88b88df9004b0872d</anchor>
      <arglist>(UChar32 c, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_file_read</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a9a30c366593b86dd8244fee5a1d51c0a</anchor>
      <arglist>(UChar *chars, int32_t count, UFILE *f)</arglist>
    </member>
    <member kind="function">
      <type>UTransliterator *</type>
      <name>u_fsettransliterator</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a155ccb79caa68fe03963576a27fcd3c7</anchor>
      <arglist>(UFILE *file, UFileDirection direction, UTransliterator *adopt, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_sprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a762fa0be07b80294eb9b5eb42bf063d6</anchor>
      <arglist>(UChar *buffer, const char *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_snprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a778fe8a31eb14115b81dd61d22e4a462</anchor>
      <arglist>(UChar *buffer, int32_t count, const char *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a7f33b7a3c43e29759e26db2a36e9798c</anchor>
      <arglist>(UChar *buffer, const char *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsnprintf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>aae7e44a6233404268c4ed2eebd661140</anchor>
      <arglist>(UChar *buffer, int32_t count, const char *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_sprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a447b7713a97152de6b1e7ec609616343</anchor>
      <arglist>(UChar *buffer, const UChar *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_snprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a4fd62d6127dba051060ec52b72a666cb</anchor>
      <arglist>(UChar *buffer, int32_t count, const UChar *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>aa8d03f1123ca9b69f385b83da027fee9</anchor>
      <arglist>(UChar *buffer, const UChar *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsnprintf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a2326d587dca4871d238a0d64e05ea7a4</anchor>
      <arglist>(UChar *buffer, int32_t count, const UChar *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_sscanf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a601b0c316dedaaaeb085d75b46d65b94</anchor>
      <arglist>(const UChar *buffer, const char *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsscanf</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a60af3fad0a0d8af5cb32dd0947a231b4</anchor>
      <arglist>(const UChar *buffer, const char *patternSpecification, va_list ap)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_sscanf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>aa12f4423de68758e0363c877753a8091</anchor>
      <arglist>(const UChar *buffer, const UChar *patternSpecification,...)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_vsscanf_u</name>
      <anchorfile>ustdio_8h.html</anchorfile>
      <anchor>a0f79754941078285383dfc74602edf43</anchor>
      <arglist>(const UChar *buffer, const UChar *patternSpecification, va_list ap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ustream.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/io/unicode/</path>
    <filename>ustream_8h</filename>
    <includes id="unistr_8h" name="unistr.h" local="yes" imported="no">unicode/unistr.h</includes>
    <member kind="function">
      <type>U_IO_API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ustream_8h.html</anchorfile>
      <anchor>a6239f9457afd52fbbf0724ea4030b255</anchor>
      <arglist>(std::ostream &amp;stream, const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>U_IO_API std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>ustream_8h.html</anchorfile>
      <anchor>a41fdcf6dbf56b9ec18981bcfa06694bd</anchor>
      <arglist>(std::istream &amp;stream, UnicodeString &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ustring.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ustring_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="putil_8h" name="putil.h" local="yes" imported="no">unicode/putil.h</includes>
    <includes id="uiter_8h" name="uiter.h" local="yes" imported="no">unicode/uiter.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_STRING_DECL</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>adf24e553d2f30e3bde48ff98d9b0e6bc</anchor>
      <arglist>(var, cs, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_STRING_INIT</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>af0dccce2caf6c8c657b65112f393a75b</anchor>
      <arglist>(var, cs, length)</arglist>
    </member>
    <member kind="typedef">
      <type>struct UBreakIterator</type>
      <name>UBreakIterator</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>adb85bb46d5f93c87098e11deab50bef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UChar(*</type>
      <name>UNESCAPE_CHAR_AT</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a2425cebd8a8a7138eeaf3edd0cd948d8</anchor>
      <arglist>)(int32_t offset, void *context)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strlen</name>
      <anchorfile>group__ustring__ustrlen.html</anchorfile>
      <anchor>gac4d8a5581fc5bde71d62ebd0a7a84ec5</anchor>
      <arglist>(const UChar *s)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_countChar32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aec4a609dd5039d940e8e9524d743c88b</anchor>
      <arglist>(const UChar *s, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>u_strHasMoreChar32Than</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aabfeafb91e43b3a2c8bdd46c0743d4b2</anchor>
      <arglist>(const UChar *s, int32_t length, int32_t number)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strcat</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a36b9bb0598b2c314c9e5fc1aaa59cbd8</anchor>
      <arglist>(UChar *dst, const UChar *src)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strncat</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a7ef9c4fbf2506fd23fae363b0b92fd11</anchor>
      <arglist>(UChar *dst, const UChar *src, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strstr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a074dcf5f1a5b5c4088561ac5ac87883a</anchor>
      <arglist>(const UChar *s, const UChar *substring)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFindFirst</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a47bdb20c28603ab39e66c9e518b5b3b6</anchor>
      <arglist>(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strchr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a39bb46b446b73a54204ba3016edb6737</anchor>
      <arglist>(const UChar *s, UChar c)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strchr32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a789d1e49355c54ae92ad5bd579c1019b</anchor>
      <arglist>(const UChar *s, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strrstr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a55b181aa1237366b05f3b1cc158dda95</anchor>
      <arglist>(const UChar *s, const UChar *substring)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFindLast</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0304151e1130c43372d51f97d0fb2b0f</anchor>
      <arglist>(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strrchr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a16488aa76883493fdecf3b15b0576d59</anchor>
      <arglist>(const UChar *s, UChar c)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strrchr32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a2fca97af95e51306fedaf103b10fa993</anchor>
      <arglist>(const UChar *s, UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strpbrk</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aa5c78a0cf3c46e90c96c8e5ff5abef29</anchor>
      <arglist>(const UChar *string, const UChar *matchSet)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strcspn</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a46705ee9aa862bb21100514f96417b17</anchor>
      <arglist>(const UChar *string, const UChar *matchSet)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strspn</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>abbbb5b3b858f9e9113beaf315aa7085a</anchor>
      <arglist>(const UChar *string, const UChar *matchSet)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strtok_r</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>accb09fb94f8b6c7b83162c3a24b698de</anchor>
      <arglist>(UChar *src, const UChar *delim, UChar **saveState)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strcmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>abdb8af67ab5198b9db020afa9c3114b3</anchor>
      <arglist>(const UChar *s1, const UChar *s2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strcmpCodePointOrder</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aa89255f4b7d6fa58e219da1abe22c733</anchor>
      <arglist>(const UChar *s1, const UChar *s2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strCompare</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a51fe041d3e4e408595d665c0f5f68715</anchor>
      <arglist>(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool codePointOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strCompareIter</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aecf733c47b2a1b353947b2264f724897</anchor>
      <arglist>(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strCaseCompare</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a56c7ed13d57379ff8b5f0736b0628e09</anchor>
      <arglist>(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strncmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a6c672ffda88b342f9cc1f53a7c8d28c3</anchor>
      <arglist>(const UChar *ucs1, const UChar *ucs2, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strncmpCodePointOrder</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ad7191a125406dd8e7770dbbfb38951ee</anchor>
      <arglist>(const UChar *s1, const UChar *s2, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strcasecmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aa610819a5a35df058577f78c68ad0ab0</anchor>
      <arglist>(const UChar *s1, const UChar *s2, uint32_t options)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strncasecmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ab9cf5ce80a494a8c1501fb76ab93d4c0</anchor>
      <arglist>(const UChar *s1, const UChar *s2, int32_t n, uint32_t options)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_memcasecmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0bedcdf1bf8a8fe806ce224444a984ae</anchor>
      <arglist>(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strcpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a46360874cb6a798ad8a0a5e19d72a82a</anchor>
      <arglist>(UChar *dst, const UChar *src)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strncpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0886e9d12ac63f891f2336ea8c16c042</anchor>
      <arglist>(UChar *dst, const UChar *src, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_uastrcpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0f2d5d46acef8e0eac711bef15e7531f</anchor>
      <arglist>(UChar *dst, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_uastrncpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a7ac7463dd6e3e36128aad288eacace8f</anchor>
      <arglist>(UChar *dst, const char *src, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>u_austrcpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ac80eca8339bf48f3cb650d31d4a9ef80</anchor>
      <arglist>(char *dst, const UChar *src)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>u_austrncpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>afe9d06488aa9de15f273f96f60635a6a</anchor>
      <arglist>(char *dst, const UChar *src, int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memcpy</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a8a3bf2aff3864c0b910b15ea6e0be69e</anchor>
      <arglist>(UChar *dest, const UChar *src, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memmove</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a98f0ccf16176d7a507102b21f2083311</anchor>
      <arglist>(UChar *dest, const UChar *src, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memset</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aa3c77f7315557f775c4a8aeeda627382</anchor>
      <arglist>(UChar *dest, UChar c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_memcmp</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a95643325eec27e247d28531f3c68600b</anchor>
      <arglist>(const UChar *buf1, const UChar *buf2, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_memcmpCodePointOrder</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a6c4db093aa0c52bb47711953cc709b1b</anchor>
      <arglist>(const UChar *s1, const UChar *s2, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memchr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ac30e88d264feb6ffd977b6a661d29f24</anchor>
      <arglist>(const UChar *s, UChar c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memchr32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a14f1a66d758f90167c1bf91aee634b71</anchor>
      <arglist>(const UChar *s, UChar32 c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memrchr</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>af5002dc5e89378549c68313968790ed7</anchor>
      <arglist>(const UChar *s, UChar c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_memrchr32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aa012a35978c2e4a5aa4073d6c3edf7e5</anchor>
      <arglist>(const UChar *s, UChar32 c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_unescape</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a7aad56a2a6f7cbe3b2fb802a218d239b</anchor>
      <arglist>(const char *src, UChar *dest, int32_t destCapacity)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>u_unescapeAt</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ab688f2c7edad54064c3d8c72735461f6</anchor>
      <arglist>(UNESCAPE_CHAR_AT charAt, int32_t *offset, int32_t length, void *context)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strToUpper</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a14740e3b734ffa82205d4762fcacb5e1</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strToLower</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ae3ed589f5ce0d550c228ee69bfed58fb</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strToTitle</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a8c6202ad4ac954e225aae061b184e450</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strFoldCase</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ab6709b5a5c1606cf0d3ea24934d9acce</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>wchar_t *</type>
      <name>u_strToWCS</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a184562a078b0a961d9281b0c29bb5406</anchor>
      <arglist>(wchar_t *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromWCS</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ad7f574ab350d889fce6e44514807728d</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const wchar_t *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>u_strToUTF8</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0ca7af2cf47b116454eed92331594afa</anchor>
      <arglist>(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromUTF8</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a5f9ff224b11166a106d1b3ac26454cd4</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>u_strToUTF8WithSub</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a7a79e37a3b1a261a9326029d2a1b1b80</anchor>
      <arglist>(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromUTF8WithSub</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0e9b7cd493c351804322ad1805fbe775</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromUTF8Lenient</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ae5d278594ac005f683bf35e8e4373130</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar32 *</type>
      <name>u_strToUTF32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a471e6e4857f06b262ceac485b7ffcae4</anchor>
      <arglist>(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromUTF32</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>a0b6154c1f288ec9a4d25fb0678cd90a0</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar32 *</type>
      <name>u_strToUTF32WithSub</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aadb94acab6ec4c8f8b93f88d2da376a3</anchor>
      <arglist>(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromUTF32WithSub</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ae6a665906f6ec6902fa755bfc43e1000</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>u_strToJavaModifiedUTF8</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>ac3f8c6911cbb97e1797c73f4b3ae6c51</anchor>
      <arglist>(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>u_strFromJavaModifiedUTF8WithSub</name>
      <anchorfile>ustring_8h.html</anchorfile>
      <anchor>aef59ec61e141905bf7b5970ae21f5dd2</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ustringtrie.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>ustringtrie_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>USTRINGTRIE_MATCHES</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>ad1e3fea7099ad56dfbc6d82d997a15ec</anchor>
      <arglist>(result)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USTRINGTRIE_HAS_VALUE</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>af1bd176224b0d2e692c76d819be185b8</anchor>
      <arglist>(result)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USTRINGTRIE_HAS_NEXT</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a7e1962396a228f3d0f7d073fef78e2e0</anchor>
      <arglist>(result)</arglist>
    </member>
    <member kind="enumeration">
      <name>UStringTrieResult</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a760046451d48a1551ba71162a31365bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USTRINGTRIE_NO_MATCH</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a760046451d48a1551ba71162a31365bda59cdeb2ea73a75c61684b4ea11ccfb37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USTRINGTRIE_NO_VALUE</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a760046451d48a1551ba71162a31365bda686677dbe92d514a0f424b48810fb21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USTRINGTRIE_FINAL_VALUE</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a760046451d48a1551ba71162a31365bda4474a12ed66e5def252c31cadd0a2663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>USTRINGTRIE_INTERMEDIATE_VALUE</name>
      <anchorfile>ustringtrie_8h.html</anchorfile>
      <anchor>a760046451d48a1551ba71162a31365bda62f2fef78e07bab5f68fa803b581504f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utext.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utext_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="uchar_8h" name="uchar.h" local="yes" imported="no">unicode/uchar.h</includes>
    <class kind="struct">UTextFuncs</class>
    <class kind="struct">UText</class>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_CURRENT32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>afedc50a892711dbf795af1fb8aac40cf</anchor>
      <arglist>(ut)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_NEXT32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aa4b973aeeb5f10f8aec454545f85b6a2</anchor>
      <arglist>(ut)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_PREVIOUS32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a8aa3d9bae7b252622fe8e70e87758205</anchor>
      <arglist>(ut)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_GETNATIVEINDEX</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a23a003b461019bea876827b8b24cb364</anchor>
      <arglist>(ut)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_SETNATIVEINDEX</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a74aa6ff1add5886508657997ca8d4747</anchor>
      <arglist>(ut, ix)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTEXT_INITIALIZER</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a3dc916f710c0d3f17fe2a220384bcc8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UText</type>
      <name>UText</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a8da22111033cc0c063d89cae348ec1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UText *</type>
      <name>UTextClone</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>ae29be5a512f69c3a9d871890225d07ec</anchor>
      <arglist>(UText *dest, const UText *src, UBool deep, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>UTextNativeLength</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a36bad470545b3183fff611c91312cc10</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="typedef">
      <type>UBool</type>
      <name>UTextAccess</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a829af7190e7cee22c647af949ebb4730</anchor>
      <arglist>(UText *ut, int64_t nativeIndex, UBool forward)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UTextExtract</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a62d7c17254aee81ba7ccf7acdf79f2dd</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UTextReplace</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a0a84b5d0d434b0f1f71f77841cac3d97</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacmentLength, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UTextCopy</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>ad017072290f396d7bce8fb0712a232e8</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t nativeDest, UBool move, UErrorCode *status)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>UTextMapOffsetToNative</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aa78b6ae4b98958554b7ee15de57e9c30</anchor>
      <arglist>(const UText *ut)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>UTextMapNativeIndexToUTF16</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>ab14d770b0feb53e5c4677f998e6b5ad0</anchor>
      <arglist>(const UText *ut, int64_t nativeIndex)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UTextClose</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a689fd4dcd7e392532f979af8b33273b5</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="typedef">
      <type>struct UTextFuncs</type>
      <name>UTextFuncs</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>acaf57d3fd11db28583a36df05ec02295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fcea752c07f9df260b5b0e234e15eab97f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTEXT_PROVIDER_STABLE_CHUNKS</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fcea52bb5c9cacd1f46eb87a856c71c073be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTEXT_PROVIDER_WRITABLE</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fceac67ce6ecf6bf959645e282f7194fbe3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTEXT_PROVIDER_HAS_META_DATA</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fcea40c5cd24aea472f3752b4833b9ce63ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTEXT_PROVIDER_OWNS_TEXT</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aaf105ae5beaca1dee30ae54530691fcea75695072a896ec104b5d77598a7429f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>utext_close</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a303eb28b0f98498dfcb063e05ab2695c</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>utext_openUTF8</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a32e9e14644d140c3501a7a09e7ad5864</anchor>
      <arglist>(UText *ut, const char *s, int64_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>utext_openUChars</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>adf311525bdd2a7f155bbe5cbb4c4de15</anchor>
      <arglist>(UText *ut, const UChar *s, int64_t length, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>utext_clone</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a8732a0c34ee4764c08f70b7a8d7ca4d4</anchor>
      <arglist>(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>utext_equals</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a592a289ae040b2e610e9aaa9032ce276</anchor>
      <arglist>(const UText *a, const UText *b)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utext_nativeLength</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>ab6a809d8168c1ccf30746cd57234a59e</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>utext_isLengthExpensive</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a18dd4010f0d9fbe9c920f3ce954990ed</anchor>
      <arglist>(const UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_char32At</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aab911e6df41b5e5a90fd09d2f0aa4fbc</anchor>
      <arglist>(UText *ut, int64_t nativeIndex)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_current32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a890bfd8f4c97a85bb70a22eabb34b716</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_next32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>ad4c8e3ba851a3482b2c77cc58cff9ad0</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_previous32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>af762d727316244730b78667d12e26dd6</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_next32From</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a819b23625de643f71280c076feac31a7</anchor>
      <arglist>(UText *ut, int64_t nativeIndex)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utext_previous32From</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a7d12867d3baae5beeb34351e172b5cd8</anchor>
      <arglist>(UText *ut, int64_t nativeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utext_getNativeIndex</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>acd28c25814787d3d1620e3edb8f917fd</anchor>
      <arglist>(const UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utext_setNativeIndex</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a530b4bb7f0e577008e4930f2b39ecd8a</anchor>
      <arglist>(UText *ut, int64_t nativeIndex)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>utext_moveIndex32</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>af91afb68d5059ec704d8d6969288c00d</anchor>
      <arglist>(UText *ut, int32_t delta)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utext_getPreviousNativeIndex</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a2c703c15aa63fc6555d50feec4f6b3c6</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_extract</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aec0833241ef75e474f3dbf4dcf3be9c3</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_compare</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a5143c3dc59cf1614a50a5873fd49171f</anchor>
      <arglist>(UText *s1, int32_t length1, UText *s2, int32_t length2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_compareNativeLimit</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>adeaed071bf866b2af77cc5708c98e589</anchor>
      <arglist>(UText *s1, int64_t limit1, UText *s2, int64_t limit2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_caseCompare</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a3f1953865cbbd5c2846166e802701a08</anchor>
      <arglist>(UText *s1, int32_t length1, UText *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_caseCompareNativeLimit</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a0bf112f899232a46c0c02333d44b2289</anchor>
      <arglist>(UText *s1, int64_t limit1, UText *s2, int64_t limit2, uint32_t options, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>utext_isWritable</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>af67295033b5dc1b2951b8b05e5ce9222</anchor>
      <arglist>(const UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>utext_hasMetaData</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a5ca583f3d6592f6e4d00bd43a9bb4952</anchor>
      <arglist>(const UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utext_replace</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>aa781cea4987dda8a7c5f0351e311bf07</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacementLength, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utext_copy</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>abe74b66b8da9b9de17ea7e59af395c53</anchor>
      <arglist>(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, UBool move, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utext_freeze</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a1ea9abacabf9f48914104dba66d932ff</anchor>
      <arglist>(UText *ut)</arglist>
    </member>
    <member kind="function">
      <type>UText *</type>
      <name>utext_setup</name>
      <anchorfile>utext_8h.html</anchorfile>
      <anchor>a024e9470afd51e1ae247dcbfbbbe8a67</anchor>
      <arglist>(UText *ut, int32_t extraSpace, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utf.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utf_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="utf8_8h" name="utf8.h" local="yes" imported="no">unicode/utf8.h</includes>
    <includes id="utf16_8h" name="utf16.h" local="yes" imported="no">unicode/utf16.h</includes>
    <includes id="utf__old_8h" name="utf_old.h" local="yes" imported="no">unicode/utf_old.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_SENTINEL</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>a807436737b76a72b76ddf0b900304b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_UNICODE_NONCHAR</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>a7d794df2276384e748f2836b25b58f7d</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_UNICODE_CHAR</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>acd1d72b6c7a8a90ad13cdf5a4553ca3a</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_BMP</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>af61a68e47f2001bc1e9eca44b57f16d0</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_SUPPLEMENTARY</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>a3e17136e0bf04c8cc2abeea275bde094</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_LEAD</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>a8c2a23cf4c14a0c89070319b76e0bc58</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_TRAIL</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>ae37493f4f0e5cbec5cdb0e85ba456b65</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_SURROGATE</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>a0ec1c520a06d1e8e3ca431a2ff8e6b02</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_SURROGATE_LEAD</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>ab5f635b25601604c9a5f826fbd87c1aa</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IS_SURROGATE_TRAIL</name>
      <anchorfile>utf_8h.html</anchorfile>
      <anchor>ace975c9d1f75c650e035539fabc23883</anchor>
      <arglist>(c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utf16.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utf16_8h</filename>
    <includes id="utf_8h" name="utf.h" local="yes" imported="no">unicode/utf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_SINGLE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a35f04f1f6e7f0965a66b5268eec29b99</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_LEAD</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ace839ae31a801fd9c53fa67c5f8b9144</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_TRAIL</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>afe8d9f450b9297897f018c2f23eb0724</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_SURROGATE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ac25b589c0c9b60160d357770fad39cea</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_SURROGATE_LEAD</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a6e141a548138e8c24822d219b7e06cb4</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_IS_SURROGATE_TRAIL</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a1da8c1409deafe3ac32a8ab506086c10</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_SURROGATE_OFFSET</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a5b15d2eeb271d0a6d92c854681ebaf20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_GET_SUPPLEMENTARY</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ac1deffbf1956d9fe696129515e88f006</anchor>
      <arglist>(lead, trail)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_LEAD</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ad0e832d06991f5f07a43d68d202165b1</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_TRAIL</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>abf0698cf645946911b2e10d3ab890321</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_LENGTH</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>add0a383d49e1ca81e2920d25883a56a9</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_MAX_LENGTH</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ab14454ab71a81f0cf86e523e50690eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_GET_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>af2c94fe2b41f2d73e7600c1ab1ca3b9b</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_GET</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>aa354b12f5f755fe734f957cde6d68bbe</anchor>
      <arglist>(s, start, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_NEXT_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ae98a64ae0f42bc6ad4179293c3638be4</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_NEXT</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a844bb48486904fdca40c8b883e9c80ee</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_APPEND_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>aea8253343c96066779cd3383080cafa8</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_APPEND</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a30e185424986bca1790c1ffe1e2a93b5</anchor>
      <arglist>(s, i, capacity, c, isError)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_FWD_1_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a148111a5adbb596ad3b6c2e3e3cf7cec</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_FWD_1</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a6c79f8f5377e1d4abba0e108be553512</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_FWD_N_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a6632ab346045ebb4fa2d358f19bbd907</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_FWD_N</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ad70d5a679bd03c63131219c7808d9de9</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_SET_CP_START_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>ade68651cb87ae4cd94cec2d0036ac9c6</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_SET_CP_START</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a31c914801f71204ee90caa6c4d0c3c1b</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_PREV_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a4cccc93c8a8e5d438ff6d0371a7a3937</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_PREV</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a592fa1f80da119e1c4565dc9193c18d9</anchor>
      <arglist>(s, start, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_BACK_1_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>aad03daaa2706b094ea7d454d6842f8c4</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_BACK_1</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a5f48fd46255969ea3175b3946cf4de80</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_BACK_N_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>afa230a7bea98dc8b5b3cd3d936126c6b</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_BACK_N</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a0a69bdb829f995ad82cb50071f578887</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_SET_CP_LIMIT_UNSAFE</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a4d3e9ee47d4fdb9fbf93a98ee1248c81</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16_SET_CP_LIMIT</name>
      <anchorfile>utf16_8h.html</anchorfile>
      <anchor>a3d5ff64af4bf16cbf9a830743a5c74a4</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utf32.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utf32_8h</filename>
  </compound>
  <compound kind="file">
    <name>utf8.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utf8_8h</filename>
    <includes id="utf_8h" name="utf.h" local="yes" imported="no">unicode/utf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U8_COUNT_TRAIL_BYTES</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>ae534bfef078b4f5d09e8da543a779db7</anchor>
      <arglist>(leadByte)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_MASK_LEAD_BYTE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>ae8ed1045986b8bf27814e9bc78388961</anchor>
      <arglist>(leadByte, countTrailBytes)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_IS_SINGLE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a8f3a9427d880458a9fa6b169a3cc1b3c</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_IS_LEAD</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>adb9837ea38dd811524a5b761ddc2a2ca</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_IS_TRAIL</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>afed9fc9bf480bf15a2e6051774f2d80e</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_LENGTH</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>af1730b8bbb3053465ee58702821846f1</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_MAX_LENGTH</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>aa2298b48749d9f45772c8f5a6885464a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_GET_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a125e5e7a4ef2f3f57b078f706b2b67f8</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_GET</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a10a57a084d75604c4a81fb5eec46ae6a</anchor>
      <arglist>(s, start, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_NEXT_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a28ecdb4233301285fc4ce7f9ea1ed644</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_NEXT</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a57f3e5429ae4edb27a42367c627aa482</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_APPEND_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a154f04764da5af41729c4df6bf9e09f3</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_APPEND</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a8a013997e3d13c501ce73bc45e662881</anchor>
      <arglist>(s, i, capacity, c, isError)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_FWD_1_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a64a8113aea2125f806cbf5d77294b3cd</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_FWD_1</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a6d4c94e845b059fddba0c51e9bad87fd</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_FWD_N_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a8e8b4218834110431798cc84a0a664ae</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_FWD_N</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a9a311dc48b8aa1050345b886adabf213</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_SET_CP_START_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>ac46a385dbf64c97337522e1d1875a57e</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_SET_CP_START</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>aa6d33627a8a5420a8f61e50da2aeca2a</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_PREV_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a5f78eb19a6b25f61dccbae45d6ecf955</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_PREV</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a17287c1f01ce84fdf8852a756643b076</anchor>
      <arglist>(s, start, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_BACK_1_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a3969beb6252f8605ab678990c8af2f48</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_BACK_1</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>adac4ee359e6233cb2990b1047fd5be3c</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_BACK_N_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>aa36f62ea4ac87362e376e4cbea10098d</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_BACK_N</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>ab0ce585952c8ba4b103fb6b7aea801ba</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_SET_CP_LIMIT_UNSAFE</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a910ba47de6d82fafc25b5e12f3a68588</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U8_SET_CP_LIMIT</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a40fe523809a3a4e647e47513336b81d9</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utf8_nextCharSafeBody</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a6eaf56eb54abb71eafcc0c347daa821f</anchor>
      <arglist>(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utf8_appendCharSafeBody</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a6cf17491f1c237bbe5b002056b830fd3</anchor>
      <arglist>(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>utf8_prevCharSafeBody</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a2bbae41d2d845750088a17dc55f59096</anchor>
      <arglist>(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utf8_back1SafeBody</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a4017310e2ecadac7dea5a432a33ccf30</anchor>
      <arglist>(const uint8_t *s, int32_t start, int32_t i)</arglist>
    </member>
    <member kind="variable">
      <type>U_CFUNC U_IMPORT const uint8_t</type>
      <name>utf8_countTrailBytes</name>
      <anchorfile>utf8_8h.html</anchorfile>
      <anchor>a4e3ae25d5856272ab60ab87c28572a99</anchor>
      <arglist>[256]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utf_old.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utf__old_8h</filename>
    <includes id="utf_8h" name="utf.h" local="yes" imported="no">unicode/utf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SIZE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a90e6cdcb061e73e19f716c04f4bf6372</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a715b50bdb675fa55ba561341b8c4b920</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_ERROR_VALUE_1</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>adfc391407ac7366f023ae3f0356f885c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_ERROR_VALUE_2</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac21e7b820255cadabce9d1762a0a6d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_ERROR_VALUE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a340f85220492744eadb58ff2765a29dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_ERROR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a77973614ec02902ab6b39a1d458dcf61</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_VALID</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a40d9e02afb708312e02391210127d59b</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_SURROGATE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ab8d1054e7a2b034ae92e824049bece53</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_UNICODE_NONCHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a33f12d9f7b4299c00e4bb1805b9fb962</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_UNICODE_CHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a662686c12201d9d592d2908f2b0cf6ed</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_COUNT_TRAIL_BYTES</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a017b98f7de883645ec5d623ebe7c5f1c</anchor>
      <arglist>(leadByte)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_MASK_LEAD_BYTE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a4185cfacf115c0ccee5ff245f21b47be</anchor>
      <arglist>(leadByte, countTrailBytes)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_IS_SINGLE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>af84a5937c5449f69b0fa008fcbda46bf</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_IS_LEAD</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa8cd0f9324d04fdc22f7848a5fff516b</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_IS_TRAIL</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad349c46bd16decbfa0dd255cd26a9f76</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_NEED_MULTIPLE_UCHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>abc69ca1e115bea6c765836279a7e3da0</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a19b7a233154f967fad84c8113eae8b80</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_MAX_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa8f3e2fbb14b040afe41d454e21e6d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_ARRAY_SIZE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1bb6c19393d163abc5728984c514cdb4</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_GET_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1726f70532e35aa595d0ec67316393b2</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_GET_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a3a0cc60a6e801941101dfe9ee0485d45</anchor>
      <arglist>(s, start, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_NEXT_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a15f3efbc61d7f9426cd860de746bcf5b</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_APPEND_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad902861a3b670e5807c010b54e271a7b</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_FWD_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ada2c2b56e5f64d4beeab4cae4661b3da</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_FWD_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac81172cb49c46451723aef642a6d3fa2</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_SET_CHAR_START_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a73cb8fae0af7e07d15d01e0c66ae0084</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_NEXT_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>adec17410efd423546c512f92ebc839b5</anchor>
      <arglist>(s, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_APPEND_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ab2e246e01d2eb732f10381666ed57cf6</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_FWD_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a647c79fd323d14e73a8a4dcbc808ceef</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_FWD_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a20640e02332c6c53739c06e76bc78de2</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_SET_CHAR_START_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a40f3c56ad9cdbcabcbccf5df5199afbb</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_PREV_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac097fecdbec2ebe5b7d3c2e00e9e18f4</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_BACK_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a552d1056bc28c5d18eec092427fadd72</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_BACK_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a9cb7bfec45705d514f815b87e83c67ca</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_SET_CHAR_LIMIT_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>abf5938c0c30d8806cd746fc6cc27108a</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_PREV_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a503f0a1d559fd2db82d39caf6d5b701c</anchor>
      <arglist>(s, start, i, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_BACK_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a8e08e8e503655827d998110f62757a2d</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_BACK_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a699bd797aa22e9f164920f8dee916561</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8_SET_CHAR_LIMIT_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a732e4b93f9d4b45dcf64ff0bc4f0a945</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_FIRST_SURROGATE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a217f8211ab6fefc70bf40eed274127b9</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_SECOND_SURROGATE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aadaaf8a4f903ae404b9da99cb4cf305d</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_SURROGATE_FIRST</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a01d4e0a9e33635d69fd827b5e42d5dea</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SURROGATE_OFFSET</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a89fe5e7bdc37286a1d5c67d15a7cd361</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_GET_PAIR_VALUE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad8b1e5a434ff14cffff805e7cc796f96</anchor>
      <arglist>(first, second)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FIRST_SURROGATE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>af7cbe226755ade1def291e94f8064322</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SECOND_SURROGATE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a155d9a36d2ef63ad3a00998f31532b3e</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_LEAD</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>adb087255089bd34da5935269b1ffc40d</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_TRAIL</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5668fdd9befe5187f6d20b818612c8b8</anchor>
      <arglist>(supplementary)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_IS_SINGLE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5fc16d7c358c1560a320a74fdbcfdce7</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_IS_LEAD</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a9864414297885a5558b6446c08992c90</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_IS_TRAIL</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac7c3c12d8f939d8e8c1ec58bf2141222</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_NEED_MULTIPLE_UCHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ab3a7cdc28e9c0a0b00e43442df70b31e</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1417f8935d6f407dffc57f6c3e07edac</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_MAX_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>abfb4dabb121278e7c2f32dd33a64a9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_ARRAY_SIZE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a8426fc87e135108f8c00349cc3d12c8f</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_GET_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad6ec45ce26122fec734b5cf48ce1e91f</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_GET_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a3eb9f3c64ce10a96c41ad7dc7cacd611</anchor>
      <arglist>(s, start, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_NEXT_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a7721e9811b4a5ed74d57ba9205b5441e</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_APPEND_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a86e6538cc3a44a6da7e8bbd55455d286</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_FWD_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a49678f9fa429a286e1b1a426ebd0eebf</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_FWD_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a0b4fb6fbf5ceff2439e3cad466125d8d</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_SET_CHAR_START_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5c9856c2758be322f82d465de9cf0cbf</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_NEXT_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a4761073ea58b177b57cb9bf213c78474</anchor>
      <arglist>(s, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_APPEND_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae9b5d92288bc292f3c6257bf245568da</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_FWD_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a03fb4e65c0a1427961c48c038795d34e</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_FWD_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5388f997af53bc0bfb9a62334c4945df</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_SET_CHAR_START_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a2522a1eeff729dda36d6529e68d0e07a</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_PREV_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a8ba7c201685c85b26c6d2d72b36e01c9</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_BACK_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa6678869f26a96b57a761fe353bd3151</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_BACK_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aee7078287f0da272c492bd2edd97595d</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_SET_CHAR_LIMIT_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae37f17e3f06e371f107a898660be1389</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_PREV_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae42ea5d5187aeb4e34bdbdb0f6e2e011</anchor>
      <arglist>(s, start, i, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_BACK_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a9c056a036a1c2e520520c171dac118a5</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_BACK_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad3d7e5d9fff64c96c6033dca621db2fd</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF16_SET_CHAR_LIMIT_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae65018bde86c5a3e3202fc9c58b56310</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_IS_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a077da7741ea6541fc05518f21953a2f6</anchor>
      <arglist>(c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_IS_SINGLE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a3b644e09065fa5235a965ec7afe04608</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_IS_LEAD</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a32e787b768e01b99536cdcbc9dfec459</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_IS_TRAIL</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a20ff669a9be702814e68c476405197cd</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_NEED_MULTIPLE_UCHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad0fccc94f7baee2031f9a49768db23bd</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>af41342ad4e3b0ba1e95aebbf238ab457</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_MAX_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1e04097291252de229d8f9f9231ca09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_ARRAY_SIZE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a4ad4cfafe7fe693e08fbfb0349e4ad61</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_GET_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae02db76930ddc17e480cfc68349d0bb7</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_GET_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>afdd05c272e96d22a9bd85a46cb73664b</anchor>
      <arglist>(s, start, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_NEXT_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a2d613dafcfed6d06b923157b2ab7595a</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_APPEND_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5de8295c29b4e1dad20b70686d623232</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_FWD_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a7888875e52e81c8fcef14fec619d55b3</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_FWD_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a3656d2046469f85f52e483a26b4b79d0</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_SET_CHAR_START_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a37c47ebc349cb549af807bf3effe8917</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_NEXT_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a12258483740acfef629c497e70fec311</anchor>
      <arglist>(s, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_APPEND_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a422ade21b42987ba4df1fa2fcaf6e79b</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_FWD_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae749df79a6d6fa6b9642186554a587eb</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_FWD_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a26b48fd98fcb28f99c21198a300ae63f</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_SET_CHAR_START_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a50c343425190652eb8d5e8bc1b4b9044</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_PREV_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac3d22f7454fc014ce687dfe3c186feb4</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_BACK_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a8ff315292c53147ba310284a2e154dee</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_BACK_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad7817eabd65ba6756a228f31859aa741</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_SET_CHAR_LIMIT_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a08c4e417ca4df9399e41309e9e840269</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_PREV_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a65283c5cd3ddcf03be17af3b28ba00a2</anchor>
      <arglist>(s, start, i, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_BACK_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a3fea119b02c0f8e28d7ef4844d733b50</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_BACK_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac9905fdc1806f45321b875728019ceac</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF32_SET_CHAR_LIMIT_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ac8c6581b7ee8a8ba2b0a3f3c427d728a</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_ARRAY_SIZE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad07bc69f81aa548799ac44bb6639e647</anchor>
      <arglist>(size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_GET_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1d2e953e5988e0137f6164c4b708527d</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_GET_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae703379694de6414dc353482fb6a2977</anchor>
      <arglist>(s, start, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_NEXT_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a931d94894405fce59a722f0bd474c84e</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_NEXT_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>afc042ea06d9fef5368ee988a746b3e03</anchor>
      <arglist>(s, i, length, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_APPEND_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a48bc2ed3067f84857dcd763bf5a131a2</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_APPEND_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a22a8a7f2b0a45bf5290fd40ebefe47ad</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa54fab3948f464697815d05f37c59519</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>abb8b025bc9e6a1dcb3191d628bceee9e</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad63512df70783425dfea6866e93efb85</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a6c327ba0bfb47d012437101e717dc911</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_START_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a95e56600677e8baaaafd19bd90133234</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_START_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aedf01b69e72b1711b468ff8e526fa0a0</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_PREV_CHAR_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa187f034bbd3d70c7eafa66ff244f968</anchor>
      <arglist>(s, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_PREV_CHAR_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a8f068505217c7f99cf481eb7aea65df9</anchor>
      <arglist>(s, start, i, c, strict)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_1_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aea950c68b6b2eba3494601580477aba4</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_1_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a2c9dbf2f305a18fb9bde8521cf2db867</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_N_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1de338bb9ed4cae6a372f187c318dacf</anchor>
      <arglist>(s, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_N_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a7d2d539bed08e3a8bf89bc7ab522cfb7</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_LIMIT_UNSAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ab90fac812ee84cd4dde1b50acb4d71aa</anchor>
      <arglist>(s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_LIMIT_SAFE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a323d1dd8c82f362b9e8134d3d5366ff8</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_SINGLE</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a52a54834fc9cb55da9b219ff649f3678</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_LEAD</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a6ab5042211e234aeb168f7f7bdc50c50</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_IS_TRAIL</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>aa4dec014f34873a400e8fb617e31e70b</anchor>
      <arglist>(uchar)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_NEED_MULTIPLE_UCHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a249c9051905f0af3b11b149bab505182</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>abdad7e828b6267a2c4f688737e3579cf</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_MAX_CHAR_LENGTH</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a2b1ea1721987ab04a7b7909bd7dc7a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_GET_CHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ae743bdb865deb28e0c6bf77ef0b97fae</anchor>
      <arglist>(s, start, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_NEXT_CHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a32662bfc3e6226c70be758e8b594e2fe</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_APPEND_CHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5708b3ba880a36a9aac4e398a9a35bce</anchor>
      <arglist>(s, i, length, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_1</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a699dfae0ccac5ed507df490e1129d6eb</anchor>
      <arglist>(s, i, length)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_FWD_N</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a1f5b84b1351706c844f6d1fa161e3433</anchor>
      <arglist>(s, i, length, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_START</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a09cb900dd1c5133bbe11da706dc24a96</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_PREV_CHAR</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a6c009b6781036e470928d1b2e0219b2f</anchor>
      <arglist>(s, start, i, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_1</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a5bf0acdafda1a9206f92faf5e743c55d</anchor>
      <arglist>(s, start, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_BACK_N</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>ad21bdd37fd21b3d934debdf2def7b2b7</anchor>
      <arglist>(s, start, i, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF_SET_CHAR_LIMIT</name>
      <anchorfile>utf__old_8h.html</anchorfile>
      <anchor>a9d708c4e9dc4b4e228c17768fa826c27</anchor>
      <arglist>(s, start, i, length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utmscale.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>utmscale_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="enumeration">
      <name>UDateTimeScale</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_JAVA_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2a93031d37dd16809a029d02a4c6ac212e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_UNIX_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2ad0fff1454d55ce16fe1d8a4a2a7d51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_ICU4C_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2a5f07c8f530c944d23408dfbc2d51816a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_WINDOWS_FILE_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2a1d265e0bb29c72318b9254c2900d3634</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_DOTNET_DATE_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2af95aed94ad1fc1177260bfeb4b43ae5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_MAC_OLD_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2a37910827df37bcdf0dc60557dde33a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_MAC_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2ab739c4491f4d86c50fff8e36fe275544</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_EXCEL_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2ab579d391e5c2499195f8654b05c9a884</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_DB2_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2aabe7bd5a2d0169a44577139b77a2f0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_UNIX_MICROSECONDS_TIME</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2af0b38e02193e21d520d7efd81d31baa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UDTS_MAX_SCALE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>af2137d4a7bdee4c9d7ef1aa7ac79baf2a79a0b568c55949241360f72039d583f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UTimeScaleValue</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_UNITS_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da3c8efff753b833b7742abb7d3ccc3bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_EPOCH_OFFSET_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670dae913ed41faead84de80cbabc32264c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_FROM_MIN_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da6bda623b0ab219d8700327af6c1dc943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_FROM_MAX_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670daf8813031fb99d41d6e909c2b77baeccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_TO_MIN_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da35b1221a1b8eac335c48d17310c04eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_TO_MAX_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da495c1ea76d0de080cab8a702e7a58209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_EPOCH_OFFSET_PLUS_1_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670dab6df86a91298b494457c9d0cf949481d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_EPOCH_OFFSET_MINUS_1_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da266bb95ac5bb1a1672dd232a8e4f60ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_UNITS_ROUND_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670daa7fc19d805a7211a5353daef642aabf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_MIN_ROUND_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da9269c425e932fe30f58df113475e31c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_MAX_ROUND_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670da6b7b7969e9a01121bc8f28d11970ae3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTSV_MAX_SCALE_VALUE</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>adba2667f8086afb0a237ed9b3144670daf78f4f53a9381e98d2f69d916e37e70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utmscale_getTimeScaleValue</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>aa62c156e7cf791ffa35a1d410a4c5243</anchor>
      <arglist>(UDateTimeScale timeScale, UTimeScaleValue value, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utmscale_fromInt64</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>a479aacbfc7ae1e39b92cbc25d5686c6b</anchor>
      <arglist>(int64_t otherTime, UDateTimeScale timeScale, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>utmscale_toInt64</name>
      <anchorfile>utmscale_8h.html</anchorfile>
      <anchor>a06557c4eaba6d31e03fb7c0ef934630f</anchor>
      <arglist>(int64_t universalTime, UDateTimeScale timeScale, UErrorCode *status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utrace.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utrace_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <member kind="typedef">
      <type>void</type>
      <name>UTraceEntry</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a57431e5b7de5217371b6b269039d8960</anchor>
      <arglist>(const void *context, int32_t fnNumber)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UTraceExit</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>ac819bbfb23657b4a4c465634a0dc0586</anchor>
      <arglist>(const void *context, int32_t fnNumber, const char *fmt, va_list args)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>UTraceData</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a22a4d10cb4754a7d3178dc55eb61842f</anchor>
      <arglist>(const void *context, int32_t fnNumber, int32_t level, const char *fmt, va_list args)</arglist>
    </member>
    <member kind="enumeration">
      <name>UTraceLevel</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_OFF</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079ad73020624fba9734da1067a92799a7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_ERROR</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079a8e9415b7ad8550fa3d9dcc196f88fe98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_WARNING</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079a4329e6d348c1ce278aa5a70d9d678416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_OPEN_CLOSE</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079acf27fc8d57f1b0bd0a1700abcc48e9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_INFO</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079ae88684e6ac3d6f889b5d1603395c6bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRACE_VERBOSE</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a87213b0396d0aa046bd9116e89152079af0102c5618b566755d3d0315aeb18ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UTraceFunctionNumber</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a6076ad13223437bd15a3266791905308</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrace_setLevel</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>aeb56de5759104ee6379b8144afbe6d01</anchor>
      <arglist>(int32_t traceLevel)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrace_getLevel</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>afc368ae253afd3d22821a868765e54e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrace_setFunctions</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>aa87ea156afa4807f0a3db73d85c66551</anchor>
      <arglist>(const void *context, UTraceEntry *e, UTraceExit *x, UTraceData *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrace_getFunctions</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a15c3bee50058d10cdaa1ecc87cd18bae</anchor>
      <arglist>(const void **context, UTraceEntry **e, UTraceExit **x, UTraceData **d)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrace_vformat</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>abcd5b54f8b10a9a319abf195711c717a</anchor>
      <arglist>(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, va_list args)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrace_format</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>ab1c46bbcc3ae5dda6eeb89ba0b04eab5</anchor>
      <arglist>(char *outBuf, int32_t capacity, int32_t indent, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>utrace_functionName</name>
      <anchorfile>utrace_8h.html</anchorfile>
      <anchor>a888fae89e1bae1080cca94e4284bfeea</anchor>
      <arglist>(int32_t fnNumber)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utrans.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>utrans_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="localpointer_8h" name="localpointer.h" local="yes" imported="no">unicode/localpointer.h</includes>
    <includes id="urep_8h" name="urep.h" local="yes" imported="no">unicode/urep.h</includes>
    <includes id="parseerr_8h" name="parseerr.h" local="yes" imported="no">unicode/parseerr.h</includes>
    <includes id="uenum_8h" name="uenum.h" local="yes" imported="no">unicode/uenum.h</includes>
    <class kind="struct">UTransPosition</class>
    <member kind="typedef">
      <type>void *</type>
      <name>UTransliterator</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a1230b61c2370123b3f17d88dcdc13154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UTransDirection</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a04f480e9e8e40f0d8067521668dc06ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRANS_FORWARD</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a04f480e9e8e40f0d8067521668dc06eca112cbaa326ae590fb91ecd99839b6f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTRANS_REVERSE</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a04f480e9e8e40f0d8067521668dc06eca5e10b16d78c21a0df70390998e488c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UTransliterator *</type>
      <name>utrans_openU</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a014170af31c08e811a61c6b4109b20c9</anchor>
      <arglist>(const UChar *id, int32_t idLength, UTransDirection dir, const UChar *rules, int32_t rulesLength, UParseError *parseError, UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>UTransliterator *</type>
      <name>utrans_openInverse</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a9dbdef3ebe320c3e4da826af27ca8bf5</anchor>
      <arglist>(const UTransliterator *trans, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UTransliterator *</type>
      <name>utrans_clone</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>ac271881fd04dff0dc71bc1d25c807fae</anchor>
      <arglist>(const UTransliterator *trans, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_close</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a148066969cc61b36a8cbcc76f7dd02f8</anchor>
      <arglist>(UTransliterator *trans)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>utrans_getUnicodeID</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a1f2aa5ab7f6dd0fb220602db34975367</anchor>
      <arglist>(const UTransliterator *trans, int32_t *resultLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_register</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a1d456df4a9bffef39f2a209283b30c4d</anchor>
      <arglist>(UTransliterator *adoptedTrans, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_unregisterID</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a6ee706f8cfbda8f7efbd844415700c74</anchor>
      <arglist>(const UChar *id, int32_t idLength)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_setFilter</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>aa2523d2f0eb13e3011980cb9d9d0bfa0</anchor>
      <arglist>(UTransliterator *trans, const UChar *filterPattern, int32_t filterPatternLen, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrans_countAvailableIDs</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a9153da8ece577f232fd2a48d4c412577</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UEnumeration *</type>
      <name>utrans_openIDs</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a489c970cc731dac45c3bb5cced4ccb52</anchor>
      <arglist>(UErrorCode *pErrorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_trans</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a183f6e0cd5b9ef82f3be82c1f6a1b20a</anchor>
      <arglist>(const UTransliterator *trans, UReplaceable *rep, UReplaceableCallbacks *repFunc, int32_t start, int32_t *limit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_transIncremental</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>ac22b8fe64729a6c99d750020946adad2</anchor>
      <arglist>(const UTransliterator *trans, UReplaceable *rep, UReplaceableCallbacks *repFunc, UTransPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_transUChars</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>af415d8aa51e79d4494ebb8ef8fc76ae2</anchor>
      <arglist>(const UTransliterator *trans, UChar *text, int32_t *textLength, int32_t textCapacity, int32_t start, int32_t *limit, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_transIncrementalUChars</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a9c1e78cfd3e397ea4d8218b4e2572735</anchor>
      <arglist>(const UTransliterator *trans, UChar *text, int32_t *textLength, int32_t textCapacity, UTransPosition *pos, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>UTransliterator *</type>
      <name>utrans_open</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>afaa9d751e1d24617ba1071d8d4c887a3</anchor>
      <arglist>(const char *id, UTransDirection dir, const UChar *rules, int32_t rulesLength, UParseError *parseError, UErrorCode *status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrans_getID</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a5820268446001f80e9cc5fd8c5dc3399</anchor>
      <arglist>(const UTransliterator *trans, char *buf, int32_t bufCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utrans_unregister</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a71b5c2733100e28705a87aa68a99e469</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>utrans_getAvailableID</name>
      <anchorfile>utrans_8h.html</anchorfile>
      <anchor>a7ba86b3ce05c45b22b53cdc718266223</anchor>
      <arglist>(int32_t index, char *buf, int32_t bufCapacity)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utypes.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>utypes_8h</filename>
    <includes id="umachine_8h" name="umachine.h" local="yes" imported="no">unicode/umachine.h</includes>
    <includes id="utf_8h" name="utf.h" local="yes" imported="no">unicode/utf.h</includes>
    <includes id="uversion_8h" name="uversion.h" local="yes" imported="no">unicode/uversion.h</includes>
    <includes id="uconfig_8h" name="uconfig.h" local="yes" imported="no">unicode/uconfig.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_SHOW_CPLUSPLUS_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ad8fa5bb3076c4f8cdb9ba547089f2ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ASCII_FAMILY</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ac909e31de712001c1f7b4697ce741bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_EBCDIC_FAMILY</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a6d9eee92eaf6704604a5951470786cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CHARSET_FAMILY</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a7fb0b0fede299f9d74973b15e79d3085</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CHARSET_IS_UTF8</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a0a33e1edf3cd23d9e9c972b63c9f7943</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ICUDATA_TYPE_LETTER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a5ffc2b3a9a3b3e33c35e8b9f1d5b5055</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ICUDATA_TYPE_LITLETTER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a8f6a7088610de8810d4892c72d07f857</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ICUDATA_NAME</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a2c1a674c492e0cd5019006c64ed1fa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_USRDATA_NAME</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>aa0969bef2f7d5e4736ddfff1556cc7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_USE_USRDATA</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a946d158adf828cfec4cea8060e5b253a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_ICUDATA_ENTRY_POINT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a1d160c8ac5758feae64eccf08557d9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DEF2_ICUDATA_ENTRY_POINT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a24ed1c481bf131937c2bd505119aebc0</anchor>
      <arglist>(major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DEF_ICUDATA_ENTRY_POINT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a7ec71c08c0f02f795466b82c12c91426</anchor>
      <arglist>(major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_CALLCONV</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a1fae478cb5a46c7e4a0673d267626696</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MILLIS_PER_SECOND</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a38068d79565f22b0f14ff562f2fb5b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MILLIS_PER_MINUTE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>aabc4b1495952bc1ad9707930dd4562b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MILLIS_PER_HOUR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ada7332e7606334a9c09e510862f1b80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MILLIS_PER_DAY</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ad0729b7981555063c58da3cc3969dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DATE_MAX</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ad047bd98b890fc992cbf550ed3cf2b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DATE_MIN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a040c4cf82b8780ca1daeb5bab0f659c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_DATA_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a12732929e67c6d977b94c68c8911ae21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_COMMON_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a559955ec3bc692657c5d8b1c6de8e334</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_I18N_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ab9d90a30137b6ec046fe59e79b09745a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_LAYOUT_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a623f81640d6092d9141a1d4d24ccaffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_LAYOUTEX_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a29c71565364a6e97d98b45c4e928d567</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_IO_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a845bce6fe50083b4fc9c890286aa509e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_TOOLUTIL_API</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>aa03f48d3ba4dd985dcde4d6c0e5b2d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_STANDARD_CPP_NAMESPACE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a13b45bffcfdecc8f549963443b5aeac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_SUCCESS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a527f2c69e6b2e3b2c53ad8a99fb36711</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_FAILURE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a4d202200b6aa6f3c965ea370e0c8155f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>UDate</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>ace1704e9e77d407d1eaaa2e73ec0c039</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>UClassID</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a22af10545208a455a6e884008df48e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>UErrorCode</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_USING_FALLBACK_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad5587ac25f5b1f340bed0ed09d45d77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ERROR_WARNING_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cacfc1c1bb23eb007f8a61b966ae58da08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_USING_DEFAULT_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caed8d36a0afbe3e5a2242f0005fcfad84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_SAFECLONE_ALLOCATED_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5bb41deb082d216dd5315e29f2727405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_STATE_OLD_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae0626ff8bde8f7f0106562a89ef2ea72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_STRING_NOT_TERMINATED_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca34815fae03bafa4b3dd9685489f1c8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_SORT_KEY_TOO_SHORT_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca78081263df2c8503a63084605098ee3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_AMBIGUOUS_ALIAS_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca90c95e7c0f281420f210a552baa7c13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DIFFERENT_UCA_VERSION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cab2163a7cc546a28c1f4c78aff39c99a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PLUGIN_CHANGED_LEVEL_WARNING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae8c4445c092f24e308e3de408d5c38a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ERROR_WARNING_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae2073a8ed9011fdcf255a26f11a624b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ZERO_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa43dbfc9499c5f911d04e1a0ca3bf6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_ARGUMENT_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca309ec9eeda4fba18847cf61f833445ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISSING_RESOURCE_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca170fabb40612097923596f80536a07b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_FORMAT_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca3b2830761371670dcbe807353eba2b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FILE_ACCESS_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca620c910f69c3f27151ce5b1215a8662a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INTERNAL_PROGRAM_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa982af5a82abf1560473c7531f30a2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MESSAGE_PARSE_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca48ad88b7be07ab3e2ad9110195e18afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MEMORY_ALLOCATION_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca243253eeb4885e17158b876849063269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INDEX_OUTOFBOUNDS_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca80c72dc6aa73be1a0ea6586a6ab8d73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PARSE_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cac45cee739cf5ac404a09ee6555f28881</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_CHAR_FOUND</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae502473abb14aca98816038f02050abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_TRUNCATED_CHAR_FOUND</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf0c13ee36e89774c7056360b81c76caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_CHAR_FOUND</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca616dcef9e839f1f7d2b15d9ad300f7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_TABLE_FORMAT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cab1b46153d94ce20a3cac0b6c9550963b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_TABLE_FILE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca2137af5bb9737b75855f7079d2b35706</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BUFFER_OVERFLOW_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca294424f5f497a3161ed08b63ac962135</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNSUPPORTED_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca65a5a3a1b2f8ed0fb97e26068729a758</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RESOURCE_TYPE_MISMATCH</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca7cd9d3af8106c1b382989157231c0665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_ESCAPE_SEQUENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae769daf822521fe8d36b8749246b9f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNSUPPORTED_ESCAPE_SEQUENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca16db18ca778f2592b98780dc7a18d759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_NO_SPACE_AVAILABLE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caeac8862f7c2a47173a69908dcc1f42ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_CE_NOT_FOUND_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca50a9aa38bb45d5a82b8e08896f45b27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PRIMARY_TOO_LONG_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca9a7178629da59c629b17814c2ec99f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_STATE_TOO_OLD_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca70eacab52e96e3dea2d6b3a141751cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_TOO_MANY_ALIASES_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca6cd747442c17866090e3c3994d49d3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ENUM_OUT_OF_SYNC_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf1014aa7aa1eec9e3f905384749c7545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVARIANT_CONVERSION_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca97525a3511b2c591162ed77701199bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_STATE_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca790a28fc945834604e4427c43ec4d44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_COLLATOR_VERSION_MISMATCH</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca8352f1cee5f89b40b5aded225a593464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_USELESS_COLLATOR_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca581795b7e78afdef483a5d40fb375cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_NO_WRITE_PERMISSION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca3913819239c9825d3b3bb6a0cb1d0a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_STANDARD_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cac95be10a0360afc8388874d592bd4074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BAD_VARIABLE_DEFINITION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca50abf3ccf88eac601ca09bf61a481ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PARSE_ERROR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caec7ea07e89fe6a730ce09a8f6809db7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_RULE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf8f95e1a86910196fe3a0e5035be261b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_SET</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cac9f1e99ef167efb2c2c5ff3275d5dc96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_SYMBOL_REFERENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca51b7ac271c05ab7ebb542b9fbc0ce1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_UNICODE_ESCAPE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad2fdf57ac1e600a0df82c2f291b09cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_VARIABLE_DEFINITION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca106338b0bffa6a9ea609b71248875c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_VARIABLE_REFERENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa4c1301c8a9be1f8702cf23ecf368278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISMATCHED_SEGMENT_DELIMITERS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca10b78ae0d07d5a8e26c6b9e456e811f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISPLACED_ANCHOR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca00aec83ccfff4956f935ccf38b12b29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISPLACED_CURSOR_OFFSET</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf882f276381c050b003d6362dbb5058b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISPLACED_QUANTIFIER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca30d5acd21c9ecbc8f730a41699c199ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISSING_OPERATOR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad87737926f4b233af6ce9565bfa81a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISSING_SEGMENT_CLOSE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cadc9ce9558c209821a9d7659e6b229733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_ANTE_CONTEXTS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca707c6061ad56bba1f743b53881e44a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_CURSORS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae372e7e28fb47cca90da238d59ce0793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_POST_CONTEXTS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca86d28c53aa7b81b97bcd1eabcbd9cf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_TRAILING_BACKSLASH</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca443d8966c7e15de3d94abf88d29d2beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNDEFINED_SEGMENT_REFERENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca41a94a1720054961f1017c66bd26628d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNDEFINED_VARIABLE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cac995e7e9423963fd341fd7ec03578e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNQUOTED_SPECIAL</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca750906a142c04e162ea5bb6167411f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNTERMINATED_QUOTE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5d7fb2a6ceb9425e787380c06932b721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_RULE_MASK_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca64deab5ad883d0b98f4e34a003cdee74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MISPLACED_COMPOUND_FILTER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca29c6b7710dd0b2b8994e17da66f89e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_COMPOUND_FILTERS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad892b393c258949c152eb3eff308c68b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_RBT_SYNTAX</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cacf6fe18f0d25f256620ce4ac2a387e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_PROPERTY_PATTERN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca9fa5da278a2680afcb071ead158ab95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_PRAGMA</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca514841a426025a6957b6d11ea207a754</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNCLOSED_SEGMENT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caae4a595a231d975465c645adbd39a57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_CHAR_IN_SEGMENT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cabd5b105dae090d5fa649bff207d38c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_VARIABLE_RANGE_EXHAUSTED</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca2de147d1b7be08244899c3e1daeda686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_VARIABLE_RANGE_OVERLAP</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf58b05f041edd7c47bc4e348648ac0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_CHARACTER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca7b8a758591ac2fba23bc089daf461d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INTERNAL_TRANSLITERATOR_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5565ed94e6edc7c5bc91344c021cb22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_ID</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca30e61bc30bde484b10be863ed95f6bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_INVALID_FUNCTION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa07903569836a4303ce25e16ca26487b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PARSE_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca7c3149ecac825fdea24fe3bd6bc097c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNEXPECTED_TOKEN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5fe9c6fff314fa4216c3620f0c0a3e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FMT_PARSE_ERROR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca1543d02dfce2f7b01b57ad882c65c470</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_DECIMAL_SEPARATORS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caaebc292d3c792264512d92d54975b98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_DECIMAL_SEPERATORS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cabdd40525be1960330852363dcead1f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_EXPONENTIAL_SYMBOLS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa4bca1e41f3f5326ccd942a870ed84db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MALFORMED_EXPONENTIAL_PATTERN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cada16431d7e64fb0fbf33dd243f98c53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_PERCENT_SYMBOLS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca17f25ea678b6c7a708c9d4375799c383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_PERMILL_SYMBOLS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca7ee91a3227e15a738068609836f6c12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_MULTIPLE_PAD_SPECIFIERS</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca619fdb4d123a8db36dc0a4de49a5e77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PATTERN_SYNTAX_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca94bdd0fcb81e66c9a35e012266490748</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ILLEGAL_PAD_POSITION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca0780797f658a0ce7d6bfea272bf83277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNMATCHED_BRACES</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cab0996404b555df6f27b3df22b585824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNSUPPORTED_PROPERTY</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca38f8cd32b3ee005b378bac6041143279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNSUPPORTED_ATTRIBUTE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caca32851eb79fc23c4c317bdc6a6b9c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ARGUMENT_TYPE_MISMATCH</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca11747c9cad5f2e652b8ced9ae4712370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DUPLICATE_KEYWORD</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca3f7af9b12cc2e789b09c50cfbe18520c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_UNDEFINED_KEYWORD</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca6a313309d52ce98e3583307315def866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DEFAULT_KEYWORD_MISSING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5a95466f8f658ab21c430a0b6d6fd153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_DECIMAL_NUMBER_SYNTAX_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca4d747b8462b52f716833e223ab38c125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FORMAT_INEXACT_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cabe16597a109d16d958bada098f7813fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_FMT_PARSE_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca0de6e0b25ba1af9b5e5197a104a86c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_INTERNAL_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca8ebaa33af906deb1919c154f6ecc8bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_ERROR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa04c56bb85e8c660a149af213a1c16eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_HEX_DIGITS_EXPECTED</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca95f5e504e28e34d8c1961ea3554b859c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_SEMICOLON_EXPECTED</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad1a561a593cae45f0870feeb5d533e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_RULE_SYNTAX</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad9eb5f57e3ce0ae1513c6af6e9a7f26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_UNCLOSED_SET</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca9ae495564696e360a64e69c04e328d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_ASSIGN_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca90f9350c9815ac1753fa6ecfcfa72202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_VARIABLE_REDFINITION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca5af6b7b2ac5a0bf9b766d0d0dbce5391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_MISMATCHED_PAREN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca786bd587116eb657a1c17df1820b5c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_NEW_LINE_IN_QUOTED_STRING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cabb5958d9fedfdc8755a0e3d6eb60fa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_UNDEFINED_VARIABLE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca6917c38c966be30c57455247bf7ae98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_INIT_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca86b9d24bf7bc48f6ebfd9ee76f2dd406</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_RULE_EMPTY_SET</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca4b5d04fbb22a826e56112cf743cce449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_UNRECOGNIZED_OPTION</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca46c8330d5d1ee0b6d1248536a3ca963d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_MALFORMED_RULE_TAG</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf85f658b26f83d683de3cd0d943c2435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_BRK_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca6f7028fcc27d5e583873df027be17718</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_INTERNAL_ERROR</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca30d5e3ae5f9c11e5adcc0a15f6600981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_ERROR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cacbde4696a63fa1ab358131b7148461dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_RULE_SYNTAX</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caa29705b19e5107222d9dd481342860fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_INVALID_STATE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cadf17d183789528d9f02bba60b698590a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_BAD_ESCAPE_SEQUENCE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca06679e78947417e52a12cbe1f1b1df29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_PROPERTY_SYNTAX</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca217a040cc2a3757a5821232989659267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_UNIMPLEMENTED</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca299b06abcbff1d470222e6f1522a6dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_MISMATCHED_PAREN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca87ea0641eb620d9a20f2a760a092089d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_NUMBER_TOO_BIG</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca78073885b5f48f21fe1daf1e1a782300</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_BAD_INTERVAL</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cafca17e0e28b27701b8adebe9cb379960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_MAX_LT_MIN</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caedaeec4f630c43294cf59422d15e811d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_INVALID_BACK_REF</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca6c6c9f669dc9210f2dc7161d7925cda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_INVALID_FLAG</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cad34950bf8a463d7e819e682b1d178cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_LOOK_BEHIND_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca03eb7cf44e4e79ef3c4368a3297c8069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_SET_CONTAINS_STRING</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caf2b434e65a7d60093d9160f8c53375d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_OCTAL_TOO_BIG</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca3d17b45498904d2f58035cedd4273c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_MISSING_CLOSE_BRACKET</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca344cd348bb04a35e32e16b10d928e4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_INVALID_RANGE</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca61c10aeaf63195ec1d8b66042958b6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_STACK_OVERFLOW</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae512a17030a5bffdd965ae308191e2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_TIME_OUT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca54c16ef9081b5b60880c9025f224a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_STOPPED_BY_CALLER</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cab1b67db3e354111549c068f957ea395e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_REGEX_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78caabd1e7808122f0213e71412a7b7a2867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PLUGIN_ERROR_START</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca230191609565517f54598ba4eedbddf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PLUGIN_TOO_HIGH</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca20dd581201f57bf222bfdad856b58ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PLUGIN_DIDNT_SET_LEVEL</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78cae51be4fe37326384a841098a6ea508d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_PLUGIN_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca1e2a4a06e8db173a080676fee08ad99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U_ERROR_LIMIT</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a3343c1c8a8377277046774691c98d78ca1ee60e67a1a4b175e00d0e9f0e449b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>u_errorName</name>
      <anchorfile>utypes_8h.html</anchorfile>
      <anchor>a89eb455526bb29bf5350ee861d81df92</anchor>
      <arglist>(UErrorCode code)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uversion.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/common/unicode/</path>
    <filename>uversion_8h</filename>
    <includes id="umachine_8h" name="umachine.h" local="yes" imported="no">unicode/umachine.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>U_COPYRIGHT_STRING_LENGTH</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a8855561449c5835245f330ce18b4f781</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MAX_VERSION_LENGTH</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>acf6cc6b794656998aaaba2ab03f29baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_VERSION_DELIMITER</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a7d52298e2afe0f592cf53023d20c31e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_MAX_VERSION_STRING_LENGTH</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>af204c175920d1e8b82b1042447194977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NAMESPACE_BEGIN</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a7d9374e037299886d4192b763b4c5e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NAMESPACE_END</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a3da1f00f3b02976ac53c014a3e4c0933</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NAMESPACE_USE</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>aa0c93141ff345327f966fda6c3a2366f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U_NAMESPACE_QUALIFIER</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a398d471a6b925791d52b72d7bb700bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>UVersionInfo</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a61caef96ba86d8e86a4031925ea44e94</anchor>
      <arglist>[U_MAX_VERSION_LENGTH]</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_versionFromString</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>a358c6faf63bf23f51fc5153351866c95</anchor>
      <arglist>(UVersionInfo versionArray, const char *versionString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_versionFromUString</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>afd8b49a4f07e049445f8891ae0aa6add</anchor>
      <arglist>(UVersionInfo versionArray, const UChar *versionString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_versionToString</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>af5ca24a76d47d742ec5837ef96b026b7</anchor>
      <arglist>(UVersionInfo versionArray, char *versionString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u_getVersion</name>
      <anchorfile>uversion_8h.html</anchorfile>
      <anchor>afcdc1acb19210765c232f93da732e22e</anchor>
      <arglist>(UVersionInfo versionArray)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vtzone.h</name>
    <path>/usr/src/icu/icu-4.8.1-1/src/icu/source/i18n/unicode/</path>
    <filename>vtzone_8h</filename>
    <includes id="utypes_8h" name="utypes.h" local="yes" imported="no">unicode/utypes.h</includes>
    <includes id="basictz_8h" name="basictz.h" local="yes" imported="no">unicode/basictz.h</includes>
    <class kind="class">VTimeZone</class>
  </compound>
  <compound kind="group">
    <name>ustring_ustrlen</name>
    <title>String Length</title>
    <filename>group__ustring__ustrlen.html</filename>
    <member kind="function">
      <type>int32_t</type>
      <name>u_strlen</name>
      <anchorfile>group__ustring__ustrlen.html</anchorfile>
      <anchor>gac4d8a5581fc5bde71d62ebd0a7a84ec5</anchor>
      <arglist>(const UChar *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlphabeticIndex</name>
    <filename>classAlphabeticIndex.html</filename>
    <base>UObject</base>
    <class kind="struct">AlphabeticIndex::Bucket</class>
    <class kind="struct">AlphabeticIndex::Record</class>
    <member kind="enumeration">
      <name>ELangType</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad20af51c0447c195a9a341c2bd990712</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNormal</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad20af51c0447c195a9a341c2bd990712ae19ea3620d3a91e07e20441dda79e01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSimplified</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad20af51c0447c195a9a341c2bd990712aa3ced2f02625e001be2d391c7b38f8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTraditional</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad20af51c0447c195a9a341c2bd990712a3ead1bb95256b711ac30417c2d6d693d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlphabeticIndex</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad037b1af32d29cc1521bf82634c808d9</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>addLabels</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a3e53fcf26fb65f624dad39d4c5bd8cb1</anchor>
      <arglist>(const UnicodeSet &amp;additions, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>addLabels</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a0abd6bc7ef45e7c2eb361188e3aebea2</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AlphabeticIndex</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a770a49eccf2b3f89d6da7f7688caef56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RuleBasedCollator &amp;</type>
      <name>getCollator</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad91a05e8649f7e7e8f9f2581d1fe8cf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getInflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>af47b1f1dedbf4658a7b1b3494c933daf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>setInflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a9396297bd37ac793035919962b5f86c1</anchor>
      <arglist>(const UnicodeString &amp;inflowLabel, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getOverflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a3c715296f67285c496a6f8ebc8cc877b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>setOverflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>afc12abed4c5215414b26c0f95fbd2ba7</anchor>
      <arglist>(const UnicodeString &amp;overflowLabel, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getUnderflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a1f69442f2421f7dbbca97e26d760dd30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>setUnderflowLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a32d8bbc8273e04ff01050de0e7e08e8e</anchor>
      <arglist>(const UnicodeString &amp;underflowLabel, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getMaxLabelCount</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ad49996f93228d8609de73f6a64168373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>setMaxLabelCount</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>ac74db7633495b59fb86745890526fb09</anchor>
      <arglist>(int32_t maxLabelCount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getOverflowComparisonString</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>adcbeb34197b04b075adab28de566aa35</anchor>
      <arglist>(const UnicodeString &amp;lowerLimit, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>addRecord</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a2d8f8ac595a41f1dd63ffaf78a4dde20</anchor>
      <arglist>(const UnicodeString &amp;name, const void *data, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>clearRecords</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a11d3077ac9d02bcb617265e67d91d38b</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getBucketCount</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a74615b5157cf44cc1cd645cf198a5bd9</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRecordCount</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a17f4a6c2dcccd15528e036921a26ae07</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getBucketIndex</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a30a605dc012b33b6b6f2cd4e4a3fa496</anchor>
      <arglist>(const UnicodeString &amp;itemName, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getBucketIndex</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a787976cd5e88b44157e718f19c6847f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>nextBucket</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>aefa336cda70e3e48ae1c4396decd295a</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getBucketLabel</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a35d4c28c749701f93da5c9d1bd6bd6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UAlphabeticIndexLabelType</type>
      <name>getBucketLabelType</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a2ec5721b315b47b86637c8c5bb4de7bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getBucketRecordCount</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>abc115f3f29ffd8f6a6665a091db286e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>resetBucketIterator</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a7785cc956f67016ca585969aeb50a032</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>nextRecord</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a2caa4800a3bbd7643ab204c163ddf126</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getRecordName</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a82392f8751e5f7ff423a42e29567c99f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getRecordData</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a1d4d90a51c674ff2e794484173a41a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AlphabeticIndex &amp;</type>
      <name>resetRecordIterator</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a7b2c382730d338e4fabb886640319137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>staticCleanup</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a10d496623339498a76b3238b1b407add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ELangType</type>
      <name>langTypeFromLocale</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a78121d74fad8dc8014ff74457f0b3e95</anchor>
      <arglist>(const Locale &amp;loc)</arglist>
    </member>
    <member kind="variable">
      <type>UVector *</type>
      <name>inputRecords_</name>
      <anchorfile>classAlphabeticIndex.html</anchorfile>
      <anchor>a57710f17956e43f73d9beb7943c1fdbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AlphabeticIndex::Bucket</name>
    <filename>structAlphabeticIndex_1_1Bucket.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>Bucket</name>
      <anchorfile>structAlphabeticIndex_1_1Bucket.html</anchorfile>
      <anchor>abad8e9e79f40249da50e489358d6d2a8</anchor>
      <arglist>(const UnicodeString &amp;label, const UnicodeString &amp;lowerBoundary, UAlphabeticIndexLabelType type, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="variable">
      <type>UnicodeString</type>
      <name>label_</name>
      <anchorfile>structAlphabeticIndex_1_1Bucket.html</anchorfile>
      <anchor>ae05edc641c779e883119d8e687781c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnicodeString</type>
      <name>lowerBoundary_</name>
      <anchorfile>structAlphabeticIndex_1_1Bucket.html</anchorfile>
      <anchor>acb6e46e3ef26028764267f49f9a7af8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UAlphabeticIndexLabelType</type>
      <name>labelType_</name>
      <anchorfile>structAlphabeticIndex_1_1Bucket.html</anchorfile>
      <anchor>a096fedea3e53531c3aa3650274e8c4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UVector *</type>
      <name>records_</name>
      <anchorfile>structAlphabeticIndex_1_1Bucket.html</anchorfile>
      <anchor>a15c418c36faf72f4880310faac7cdb65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AlphabeticIndex::Record</name>
    <filename>structAlphabeticIndex_1_1Record.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>Record</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>a46ba7fe6211f28f20c8ec12f2a9eb7eb</anchor>
      <arglist>(AlphabeticIndex *alphaIndex, const UnicodeString &amp;name, const void *data)</arglist>
    </member>
    <member kind="variable">
      <type>AlphabeticIndex *</type>
      <name>alphaIndex_</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>a386533cfe9ada253bba504d70e6ffdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UnicodeString</type>
      <name>name_</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>aa3afebb8e0224b1bdd6d77b23c091289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnicodeString</type>
      <name>sortingName_</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>ad27fc03d7cd36073eb1681684577c93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>data_</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>a9780495752a8ee510405531c5c90b4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>serialNumber_</name>
      <anchorfile>structAlphabeticIndex_1_1Record.html</anchorfile>
      <anchor>a1768927edbc29e7a95e887fc31947cc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnnualTimeZoneRule</name>
    <filename>classAnnualTimeZoneRule.html</filename>
    <base>TimeZoneRule</base>
    <member kind="function">
      <type></type>
      <name>AnnualTimeZoneRule</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a6d568c96596ce2a06feddb83efe3d801</anchor>
      <arglist>(const UnicodeString &amp;name, int32_t rawOffset, int32_t dstSavings, const DateTimeRule &amp;dateTimeRule, int32_t startYear, int32_t endYear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnnualTimeZoneRule</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a19bf453eb7cb806a6f1c9c7d0fdf4679</anchor>
      <arglist>(const UnicodeString &amp;name, int32_t rawOffset, int32_t dstSavings, DateTimeRule *dateTimeRule, int32_t startYear, int32_t endYear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnnualTimeZoneRule</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a4a08de25e8cef245d1b7594c7fa30520</anchor>
      <arglist>(const AnnualTimeZoneRule &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnnualTimeZoneRule</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a67ba4f0412d3eb1381bef04e6acd6bc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AnnualTimeZoneRule *</type>
      <name>clone</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>aaf3199d195e611738c20ffffcb58147a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>AnnualTimeZoneRule &amp;</type>
      <name>operator=</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a918295fb242491c0c78626ec1c74c2d3</anchor>
      <arglist>(const AnnualTimeZoneRule &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a318392f6fadea74afd5af006d0fbc531</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a4fcecb0890bed0bcd66ac464a880b5d3</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>const DateTimeRule *</type>
      <name>getRule</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>ad5832460171861b9e747c10f02c04c8a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getStartYear</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a9780782ac1447b028764c318659bc3b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getEndYear</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a4f3bd00bfb516813661c10b41b51861c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getStartInYear</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a7e071889f3e1b9be7d180d060b6e99b9</anchor>
      <arglist>(int32_t year, int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>aff3e0c624e2297d798f26121c5f27e89</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFirstStart</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>aec9e446be61c6bb3a6c2980ec2124d7c</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFinalStart</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>acc7e921f12275b9543e43ec04318a3ad</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextStart</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>af0fbea22717a4b5ba59f1f6ecfda5233</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousStart</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a02c351ee0209609b0199a478d07ed2c1</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>aba2bd3bcacfea016a8a8daa41a8345c3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>a0d1d6d27e1c218d3c75b885b9a6b5bbb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>MAX_YEAR</name>
      <anchorfile>classAnnualTimeZoneRule.html</anchorfile>
      <anchor>aad329b6ae413ccabf3a8a40fa8600223</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Appendable</name>
    <filename>classAppendable.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>appendCodeUnit</name>
      <anchorfile>classAppendable.html</anchorfile>
      <anchor>a5e9851386b9f3b63e750d4d31149f023</anchor>
      <arglist>(UChar c)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>appendCodePoint</name>
      <anchorfile>classAppendable.html</anchorfile>
      <anchor>a5292cdc7ee62dc99a9ac58fecfbba9b5</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>appendString</name>
      <anchorfile>classAppendable.html</anchorfile>
      <anchor>a5edf68de9d036d3bcf1cac6d3131c933</anchor>
      <arglist>(const UChar *s, int32_t length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>reserveAppendCapacity</name>
      <anchorfile>classAppendable.html</anchorfile>
      <anchor>ad6db9e7d1a842f22d0b03882719204d5</anchor>
      <arglist>(int32_t appendCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar *</type>
      <name>getAppendBuffer</name>
      <anchorfile>classAppendable.html</anchorfile>
      <anchor>ace1dc7b1d182e77f31932c6f99d6cd6a</anchor>
      <arglist>(int32_t minCapacity, int32_t desiredCapacityHint, UChar *scratch, int32_t scratchCapacity, int32_t *resultCapacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicTimeZone</name>
    <filename>classBasicTimeZone.html</filename>
    <base>TimeZone</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicTimeZone</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a04187c449e9d480c310c52632f71ff6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getNextTransition</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a7139f3be13450d9833717644227fd2e4</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getPreviousTransition</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a8eb6e573592f43efdb497e20c7a34beb</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasEquivalentTransitions</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a3d90e8f1bea2ce3b6530970ed9a551c1</anchor>
      <arglist>(BasicTimeZone &amp;tz, UDate start, UDate end, UBool ignoreDstAmount, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>countTransitionRules</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a6a24226cfc738d554a2a563021ccee28</anchor>
      <arglist>(UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTimeZoneRules</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a4db4254a521bad3811df69ba032369fe</anchor>
      <arglist>(const InitialTimeZoneRule *&amp;initial, const TimeZoneRule *trsrules[], int32_t &amp;trscount, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSimpleRulesNear</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a38a6f7109a6b550d14833dfd511078d1</anchor>
      <arglist>(UDate date, InitialTimeZoneRule *&amp;initial, AnnualTimeZoneRule *&amp;std, AnnualTimeZoneRule *&amp;dst, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffsetFromLocal</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a4d84c1cdcdd96ae9ac75cdb9e04002fe</anchor>
      <arglist>(UDate date, int32_t nonExistingTimeOpt, int32_t duplicatedTimeOpt, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicTimeZone</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a72ed5780ab456efe6cc185aaafa0e8c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicTimeZone</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>ac57d49a09cf61768ba663f69eab05863</anchor>
      <arglist>(const UnicodeString &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicTimeZone</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a2898331d9e1dca31ed4fd6cfeaeebbf9</anchor>
      <arglist>(const BasicTimeZone &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getTimeZoneRulesAfter</name>
      <anchorfile>classBasicTimeZone.html</anchorfile>
      <anchor>a2e029ef64dee2348f679a55f62e9bb5d</anchor>
      <arglist>(UDate start, InitialTimeZoneRule *&amp;initial, UVector *&amp;transitionRules, UErrorCode &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoyerMooreSearch</name>
    <filename>classBoyerMooreSearch.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>BoyerMooreSearch</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a332f1fe871a374a51ef5c67558234080</anchor>
      <arglist>(CollData *theData, const UnicodeString &amp;patternString, const UnicodeString *targetString, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoyerMooreSearch</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a7b5616443bbba8b7ec88f383de45ddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>empty</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>ab6a4e76423cbafe07465805f2899cd6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>search</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a65d2f4ccb9107fbeb4fb5abe41029b04</anchor>
      <arglist>(int32_t offset, int32_t &amp;start, int32_t &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetString</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a86045ca4487146520c2aaf75974ae102</anchor>
      <arglist>(const UnicodeString *targetString, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>CollData *</type>
      <name>getData</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a93107993396145ab62948701bfe26816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CEList *</type>
      <name>getPatternCEs</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a8cf795309a69e33c564e134d111bcf0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BadCharacterTable *</type>
      <name>getBadCharacterTable</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a1c8c9dc3464f6a3917f89746af96be3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GoodSuffixTable *</type>
      <name>getGoodSuffixTable</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a50250100d6fe9cb2cf1972355af7662a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>a8901e315d00cf583e3b697c72683fdcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classBoyerMooreSearch.html</anchorfile>
      <anchor>abd23e2c725eb32113903024a11b7f6f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BreakIterator</name>
    <filename>classBreakIterator.html</filename>
    <base>UObject</base>
    <member kind="enumvalue">
      <name>DONE</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a08bd7354c8ac72497a46bbe4d3f4a3feae32f847673a92726e06dfce66fea909c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BreakIterator</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a3cbedcb4750bac9e8d301138d61a8411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>adef035120a8805b350ae7ec789b43093</anchor>
      <arglist>(const BreakIterator &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a188fb5d54bae55e4f9ea9730e44919a5</anchor>
      <arglist>(const BreakIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BreakIterator *</type>
      <name>clone</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>aa17a81d41fa791049a10c37594dad88f</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>aeaf98baae1d91e224ef8ccced5d2266c</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharacterIterator &amp;</type>
      <name>getText</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ab12b76622eaa6df7d0df48778f5de1aa</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UText *</type>
      <name>getUText</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a724d55795f3edb7748e6d6dffd80d926</anchor>
      <arglist>(UText *fillIn, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ac50a6618fe83b9b96a7a9213c5da3f21</anchor>
      <arglist>(const UnicodeString &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a74d79d97bbc2265753486704111d29eb</anchor>
      <arglist>(UText *text, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>adoptText</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a729dbe9a6437070d9fb056c6c7589563</anchor>
      <arglist>(CharacterIterator *it)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>first</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ae09bd26e3559e18e8e46699075f477e4</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>last</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ab21a3083a947dd4b4f3653a0a51080c2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>previous</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ac4f27d685b8c1bacbad7e27a6af141f2</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>next</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a68f3b6be789195b55204a6d86d58a8ad</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>current</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a36835a8123d823f333af822d9c7cb8a6</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>following</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a57f98a77f67b2ca34c26ee2e77d76e09</anchor>
      <arglist>(int32_t offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>preceding</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a9230e330fd08bad1b6c278d322ef2385</anchor>
      <arglist>(int32_t offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>isBoundary</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a9ac740557f08c879cceffdbb4a15fe7b</anchor>
      <arglist>(int32_t offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>next</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>abc5223195e31b93657dffa305592bcd7</anchor>
      <arglist>(int32_t n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BreakIterator *</type>
      <name>createBufferClone</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a6ea0e9828c9ef650086f4d3a17ce5c61</anchor>
      <arglist>(void *stackBuffer, int32_t &amp;BufferSize, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isBufferClone</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>afd5e718cd3b674c792f65ab8fd0da3d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a4be3c06bc51b35a5f5fbc75f7f0a47c9</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLocaleID</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ab934df15f2b12f8f1cbf7053abf8192a</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BreakIterator *</type>
      <name>createWordInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>afc0385b348d5156de7cc45f34ba660fa</anchor>
      <arglist>(const Locale &amp;where, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BreakIterator *</type>
      <name>createLineInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a83ed35d09a8ab8b18ace13e073cf8434</anchor>
      <arglist>(const Locale &amp;where, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BreakIterator *</type>
      <name>createCharacterInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ae2cac7b85aa5407a98d4849bb38cdcc3</anchor>
      <arglist>(const Locale &amp;where, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BreakIterator *</type>
      <name>createSentenceInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>aa8dde1f41bd781071e3c61b77020a279</anchor>
      <arglist>(const Locale &amp;where, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BreakIterator *</type>
      <name>createTitleInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ac4472928a37903bc7144e7cb9b52cf85</anchor>
      <arglist>(const Locale &amp;where, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a4df68870381a0f18b32df66f4b3e3b84</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a226fa492661a3c5168711dfd76b3db17</anchor>
      <arglist>(const Locale &amp;objectLocale, const Locale &amp;displayLocale, UnicodeString &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a0f3ae6a2de27880e9037452591c428b7</anchor>
      <arglist>(const Locale &amp;objectLocale, UnicodeString &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URegistryKey</type>
      <name>registerInstance</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a25f88e97609e60d6efd832869e3a8f20</anchor>
      <arglist>(BreakIterator *toAdopt, const Locale &amp;locale, UBreakIteratorType kind, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>unregister</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a4c010d2a3f111fd49801eabe28375096</anchor>
      <arglist>(URegistryKey key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a3cdd392e1a0b5683f9932f471c016cca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BreakIterator</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>acea8fffaad4c79ddded9a53a718fc33e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BreakIterator</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ab8538351f56a2bbfee9af33f2417e553</anchor>
      <arglist>(const BreakIterator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fBufferClone</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a9fa7a1741b71fa9b2228455b0dad3c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUBreakIteratorFactory</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>a9d94f465eba6b867a8e081a6650d0aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUBreakIteratorService</name>
      <anchorfile>classBreakIterator.html</anchorfile>
      <anchor>ab98b7c14471379197ac959b4d8e12e4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ByteSink</name>
    <filename>classByteSink.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>ByteSink</name>
      <anchorfile>classByteSink.html</anchorfile>
      <anchor>a6247961c1b73f897b276a540cd0288f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ByteSink</name>
      <anchorfile>classByteSink.html</anchorfile>
      <anchor>ac2e07401e236bcb8545ce9ee96d801fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Append</name>
      <anchorfile>classByteSink.html</anchorfile>
      <anchor>a1f04f7474f4822c29b3a20fde509a3d8</anchor>
      <arglist>(const char *bytes, int32_t n)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>GetAppendBuffer</name>
      <anchorfile>classByteSink.html</anchorfile>
      <anchor>afbff3e7aca11c652464153b955071201</anchor>
      <arglist>(int32_t min_capacity, int32_t desired_capacity_hint, char *scratch, int32_t scratch_capacity, int32_t *result_capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Flush</name>
      <anchorfile>classByteSink.html</anchorfile>
      <anchor>aa73d9401de89bca953f70eacc0ac9e45</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BytesTrie</name>
    <filename>classBytesTrie.html</filename>
    <base>UMemory</base>
    <class kind="class">BytesTrie::Iterator</class>
    <class kind="class">BytesTrie::State</class>
    <member kind="function">
      <type></type>
      <name>BytesTrie</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a825ad12c8f79acca8a78d9da221ae317</anchor>
      <arglist>(const void *trieBytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BytesTrie</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>aff2f0b07fbe6640037b58e092c6f5bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BytesTrie</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a893563c65ad3ffe270c71fa5f2aca8f2</anchor>
      <arglist>(const BytesTrie &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BytesTrie &amp;</type>
      <name>reset</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>afc757e5e65aa884035922ae83cc482cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BytesTrie &amp;</type>
      <name>saveState</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a6134259fb8423b91fb3e90a0454e6e23</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>BytesTrie &amp;</type>
      <name>resetToState</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a20e44d9e566dbef4929e16c9921c0078</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>current</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>ae76a0fef356291c3f6efab5832aeb586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>first</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a0e04ba3a56c62cb8e3c0922c6f403a95</anchor>
      <arglist>(int32_t inByte)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>next</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>ae308908b07a9fd9037585b4a68298eb9</anchor>
      <arglist>(int32_t inByte)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>next</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a4e673fdb65f7ce7efe90cb35da7a17c9</anchor>
      <arglist>(const char *s, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>ad85fe71943d42f9081ffdf469819e143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasUniqueValue</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>afd4deead31241780791bc6a7e551da8b</anchor>
      <arglist>(int32_t &amp;uniqueValue) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNextBytes</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>a2236fe55a85bbd33012b83b04cce5eeb</anchor>
      <arglist>(ByteSink &amp;out) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BytesTrieBuilder</name>
      <anchorfile>classBytesTrie.html</anchorfile>
      <anchor>ac9c15bc2f42d2934d0654c9e332ed8d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BytesTrie::Iterator</name>
    <filename>classBytesTrie_1_1Iterator.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a7d82a0e59ec7bc14f82185a2e9e95df0</anchor>
      <arglist>(const void *trieBytes, int32_t maxStringLength, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a294e5c15e44a508fe20c2c4281e8fe94</anchor>
      <arglist>(const BytesTrie &amp;trie, int32_t maxStringLength, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>aa40e057a5089e80b130ebc0345d5fb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>reset</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a650b3a021e32c0504db13a598d988006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasNext</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a6aa7d10342377ed3a62e3cc1ba17c6a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>next</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a884233b34ad474ad69b78a72ed9203f0</anchor>
      <arglist>(UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>const StringPiece &amp;</type>
      <name>getString</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>a24e4776e8691e864529cfaa4bb62faa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>classBytesTrie_1_1Iterator.html</anchorfile>
      <anchor>ad04949c38712acbdbe0bac3f3a7abca6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BytesTrie::State</name>
    <filename>classBytesTrie_1_1State.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classBytesTrie_1_1State.html</anchorfile>
      <anchor>a3dd56e123f7f6eadf3694b1f23f20f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BytesTrie</name>
      <anchorfile>classBytesTrie_1_1State.html</anchorfile>
      <anchor>a3388e3caf1440f26a386c1028adb88e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BytesTrieBuilder</name>
    <filename>classBytesTrieBuilder.html</filename>
    <base>StringTrieBuilder</base>
    <class kind="class">BytesTrieBuilder::BTLinearMatchNode</class>
    <member kind="function">
      <type></type>
      <name>BytesTrieBuilder</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>a0bb564d6fed85e2e2b6c2ec1669b25f3</anchor>
      <arglist>(UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BytesTrieBuilder</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>ab805872c9c02b0d011eab11eca5ca479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BytesTrieBuilder &amp;</type>
      <name>add</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>ada1371fc8ffcd819ca137c585514e066</anchor>
      <arglist>(const StringPiece &amp;s, int32_t value, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>BytesTrie *</type>
      <name>build</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>abdc65da0894e93b41fbd47fbbf663091</anchor>
      <arglist>(UStringTrieBuildOption buildOption, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>StringPiece</type>
      <name>buildStringPiece</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>a4da44745054516be687638b8d2d4b051</anchor>
      <arglist>(UStringTrieBuildOption buildOption, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>BytesTrieBuilder &amp;</type>
      <name>clear</name>
      <anchorfile>classBytesTrieBuilder.html</anchorfile>
      <anchor>ae2a654364053dd6688e6c089fa29baee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Calendar</name>
    <filename>classCalendar.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>EDateFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a9aa66a9e8030312d5314e306c713913e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EDaysOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a28d5c395b3200c812950321637796aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EMonths</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a26f00f1507a3dd73ba4553b6e04d8313</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EAmpm</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ab68462e2ea07c44eaa88265c8c80ed28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Calendar</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a3d5422cc908f8666dd295f4f25a793e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Calendar *</type>
      <name>clone</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a369327438e076e64c99ec1d669919957</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a84d108d140a43b019c3ab3d022d7c68b</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4b918629b9bfd29e888f5ab933bd0b9b</anchor>
      <arglist>(UDate date, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aa231d324e53576d3198a0aedd129f3ad</anchor>
      <arglist>(const Calendar &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ab35bae6d03802181b0b529955126c6f0</anchor>
      <arglist>(const Calendar &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a50ab4c5aa1f93959282c71de04625935</anchor>
      <arglist>(const Calendar &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>equals</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a3ed5a35ec465912fed9e8ed90992cdc9</anchor>
      <arglist>(const Calendar &amp;when, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>before</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a46f47197740b6ea80d81743ec3af3fab</anchor>
      <arglist>(const Calendar &amp;when, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>after</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a2ca85aeccfad737241317ad4a3571926</anchor>
      <arglist>(const Calendar &amp;when, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4c480d382487d1f05b717dbd310515b3</anchor>
      <arglist>(EDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a743c11819bc8823ece3d7ee9260f174f</anchor>
      <arglist>(UCalendarDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roll</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a98e5b80bb733a6e8dec95b8ac0225a68</anchor>
      <arglist>(EDateFields field, UBool up, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roll</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1a95a3e423d17c1f415bc39b75cf77d2</anchor>
      <arglist>(UCalendarDateFields field, UBool up, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>roll</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>abff9f8c5e0b0206b9312e64a0ff89666</anchor>
      <arglist>(EDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>roll</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a5d5aa7348953398da594654c3edbb681</anchor>
      <arglist>(UCalendarDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>fieldDifference</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a6cf48d67d31ee09a3ed5c6064a64e4cd</anchor>
      <arglist>(UDate when, EDateFields field, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>fieldDifference</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1a735b5e3c69f937e58dbb58c1ec50bd</anchor>
      <arglist>(UDate when, UCalendarDateFields field, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptTimeZone</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>af018c3a61cec42d055e320c1ff1d4292</anchor>
      <arglist>(TimeZone *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeZone</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a26bbb988eecad26152a26c5b6aa183ef</anchor>
      <arglist>(const TimeZone &amp;zone)</arglist>
    </member>
    <member kind="function">
      <type>const TimeZone &amp;</type>
      <name>getTimeZone</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1ef5c22031d5899ffbedc7032d892087</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TimeZone *</type>
      <name>orphanTimeZone</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a0d42eafa6a420463fa981aa34a3a6150</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a8199d459b6d2171fb62620fab29b8668</anchor>
      <arglist>(UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLenient</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a7d4084cd44bc04497309e01c161f45ee</anchor>
      <arglist>(UBool lenient)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isLenient</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a183d1b14292fe017fc206a80e6734db9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstDayOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ab7df065eb046cd863eb201fc56b0429e</anchor>
      <arglist>(EDaysOfWeek value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstDayOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad304c4129e472a106b4027ac78aa09b8</anchor>
      <arglist>(UCalendarDaysOfWeek value)</arglist>
    </member>
    <member kind="function">
      <type>EDaysOfWeek</type>
      <name>getFirstDayOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a0a8bdc7ffb9d13e948ef0268dbdddc26</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UCalendarDaysOfWeek</type>
      <name>getFirstDayOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a063ed9d458f2ab4fd0f4e40ab7d81307</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimalDaysInFirstWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad3c13b061c7ed103d6b31ac08a9026a6</anchor>
      <arglist>(uint8_t value)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getMinimalDaysInFirstWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac39fb4eea23b9ea863ac3119913a3322</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a2c0793eb4f9ff0fc0cc1313188ee203a</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a3b36ad1a0ae8cc44faf2062971c54dad</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac751035e7d9e6e744edc7d92fd471a4f</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a53ddf6470cb971f44d501a097ca52e7e</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getGreatestMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a5b6cbd4db4fbfa4fb686689e70633265</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getGreatestMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a82e27703afb741739d0505b58d6860df</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getLeastMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aacf8382337e234b96bfe4e470dcc4817</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getLeastMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a053ab977d86c1a7256ccf59e13e87d88</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4e67d27df4e1579ce031de5e6ea05a2e</anchor>
      <arglist>(EDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getActualMinimum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>affad02342fc829b1cb623698a57a1917</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a62c65424820ca64e850b346212eb35a7</anchor>
      <arglist>(EDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getActualMaximum</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>af41a2769b5ce810d3ea5750c391c53b3</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>get</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a0e86c32f3c5e1e45420d1b57fc5c369e</anchor>
      <arglist>(EDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>get</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a473c5a767a72a2c390e2ffc6b971dbd9</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aa58ac68d0d775d0766cf2d69d145233b</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>abc3510e5a75c30637122bff345f639cb</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a98ba908ffc6a88d6566983d4f95245df</anchor>
      <arglist>(EDateFields field, int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a558039a413ea1e1a9bfd47375d12e4ea</anchor>
      <arglist>(UCalendarDateFields field, int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a0de0f9d494dc1a347c64560c73609b09</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>acea9496f6dbb52f8682abe3c99c7c6c4</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a53bae01ea06605c7506d9956db1ef165</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a7e0409b7750ff09b7275a061bd6ae816</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac62813e912368d76cec3fccfba231108</anchor>
      <arglist>(EDateFields field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aad6c0532f6b52c5feb288615e3e2b681</anchor>
      <arglist>(UCalendarDateFields field)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a13e235c4396d92fc3b129d6a07e6076a</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getType</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a46741d547451faae02591381593d127b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCalendarWeekdayType</type>
      <name>getDayOfWeekType</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>abec2a3692bdce31b2e341353a5f25bbe</anchor>
      <arglist>(UCalendarDaysOfWeek dayOfWeek, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getWeekendTransition</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4a059bb760a45a663a690c7507c09019</anchor>
      <arglist>(UCalendarDaysOfWeek dayOfWeek, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isWeekend</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a73f2c04e318b4721b78191251fd33599</anchor>
      <arglist>(UDate date, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isWeekend</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a8e5dc579bef95c7293823e6ba65eaea3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>haveDefaultCentury</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ae5bb9c44ecea69ad64d813fe41de6efa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UDate</type>
      <name>defaultCenturyStart</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a745cdbb7e0477cb7c3bb2b29bd0b4350</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>defaultCenturyStartYear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4fa3cf26747f8decdb71d2f3786e9a34</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a019f867554a0f3dbc3ee865bf7864295</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLocaleID</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aec71fd785775da0decb82cd819ccfaba</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1872a90e5aaae1cfe3e826248fa9b497</anchor>
      <arglist>(UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad1991655c5d12be8f321026c8b86e33a</anchor>
      <arglist>(TimeZone *zoneToAdopt, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a175df133c28993f82204a45f606cf6dd</anchor>
      <arglist>(const TimeZone &amp;zone, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a60ba2c6b6de35fb26560b796d726d9b3</anchor>
      <arglist>(const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4e58744fcd29c45b18826b9b7ebf6a3b</anchor>
      <arglist>(TimeZone *zoneToAdopt, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Calendar *</type>
      <name>createInstance</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a264ca0cd356b7431080d4de4078bb905</anchor>
      <arglist>(const TimeZone &amp;zoneToAdopt, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a6b87567eb37ad5c07c17e6a2c46d257e</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getKeywordValuesForLocale</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4e13223ab9167f43c9bddb06a58225b4</anchor>
      <arglist>(const char *key, const Locale &amp;locale, UBool commonlyUsed, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UDate</type>
      <name>getNow</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aab1712ccf7b261332a4d14c71dc6994e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>adc0142552cd2e3fa56ed7a800edf4f2d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URegistryKey</type>
      <name>registerFactory</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a8118ce78632ea4a749e15d24a5f9560a</anchor>
      <arglist>(ICUServiceFactory *toAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>unregister</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a397c5c9c48463610bc87fcb84ac7a855</anchor>
      <arglist>(URegistryKey key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="enumeration">
      <name>ELimitType</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aed3b40eef888db3a26315f3a0c37b076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kResolveSTOP</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a32849615a60cbfe0fbcadfacb05eedb6a629ecd3850c09395432c5d86b6339951</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kResolveRemap</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a32849615a60cbfe0fbcadfacb05eedb6af9aab2d453c5af0e81408c797ea39395</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calendar</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1807a722455fad6331a8a064273e6e20</anchor>
      <arglist>(UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calendar</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac96446048cf739bc1d280cdc65a23db0</anchor>
      <arglist>(const Calendar &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Calendar &amp;</type>
      <name>operator=</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac3bcbd2497e977c8324cc0b089879c3a</anchor>
      <arglist>(const Calendar &amp;right)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calendar</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>acf90dad3da55d4c3ffa5fdabf099b88c</anchor>
      <arglist>(TimeZone *zone, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Calendar</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a41eb1824078a3d3d371e97c0314e3eda</anchor>
      <arglist>(const TimeZone &amp;zone, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>acd6f300d2cc51b0d75b57d7be1347844</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>computeFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad0ff8705abd13f9c568fb4053e35e27b</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getTimeInMillis</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a5aa1432697348561cc9259bc2c0974c0</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTimeInMillis</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4e33e7f83e803fb6092e32b988fe5305</anchor>
      <arglist>(double millis, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>complete</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a90717eab221acdd4d67b5d250c56247e</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>internalGet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>afcc83cb53a32ea4898280dfaa1a1d881</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>internalGet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ada18cdb870dd8e8e8507018c93a42ec0</anchor>
      <arglist>(UCalendarDateFields field, int32_t defaultValue) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>internalGet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>abe0e23ba4107c023faf3fd6f70a1e78c</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a1966488fa1954b3ef426c8dde4d341c6</anchor>
      <arglist>(EDateFields field, int32_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a80318e4604dde732ac89aa81311fbf68</anchor>
      <arglist>(UCalendarDateFields field, int32_t value)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>prepareGetActual</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a660d320b4e90c159bdf1bb8f0678818a</anchor>
      <arglist>(UCalendarDateFields field, UBool isMinimum, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>handleGetLimit</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>afd43a5f74be144b5ac90bc57a2f9cede</anchor>
      <arglist>(UCalendarDateFields field, ELimitType limitType) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getLimit</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a8083df729da06f0271e29e8b7e4376d6</anchor>
      <arglist>(UCalendarDateFields field, ELimitType limitType) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>handleComputeMonthStart</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>addb140c1bca76059b1a4084433ab67db</anchor>
      <arglist>(int32_t eyear, int32_t month, UBool useMonth) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetMonthLength</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aaa7b064d37f1ac4b66dc57fef6481cda</anchor>
      <arglist>(int32_t extendedYear, int32_t month) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetYearLength</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>acb983bdeebcfb0441ed46256b0f444cc</anchor>
      <arglist>(int32_t eyear) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>handleGetExtendedYear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a465fbc6494f2126892dcd694217697f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleComputeJulianDay</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>afd953ab4dc160ffc1b586c627c2c6ad9</anchor>
      <arglist>(UCalendarDateFields bestField)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetExtendedYearFromWeekFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a116247236ceda5f3d5424767d3c3c561</anchor>
      <arglist>(int32_t yearWoy, int32_t woy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>computeJulianDay</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad32ba7616507ea59d2f59ee4a5f82fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>computeMillisInDay</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a8c299396a6124e4cbdc9ef88642d0151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>computeZoneOffset</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a17f77e9844d0fd3a86ba9c72e93d3e69</anchor>
      <arglist>(double millis, int32_t millisInDay, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>newestStamp</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ae2d514396d6fd85c25d9af9eb14b6215</anchor>
      <arglist>(UCalendarDateFields start, UCalendarDateFields end, int32_t bestSoFar) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UCalendarDateFields</type>
      <name>resolveFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a10718404e300cb17f0d678f7cd1cfa8e</anchor>
      <arglist>(const UFieldResolutionTable *precedenceTable)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const UFieldResolutionTable *</type>
      <name>getFieldResolutionTable</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a25bc194dc5449b325b1d44c8f1d29d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UCalendarDateFields</type>
      <name>newerField</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a3449f24abb996590a0df022367599a87</anchor>
      <arglist>(UCalendarDateFields defaultField, UCalendarDateFields alternateField) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UDate</type>
      <name>internalGetTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ad20fe42624b49a8a3fca48a06425c4f9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>internalSetTime</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a5066148dcb8ef8c6452b77a0d468344c</anchor>
      <arglist>(UDate time)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleComputeFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a195fad36b525b46df8934aca312db35e</anchor>
      <arglist>(int32_t julianDay, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>getGregorianYear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a5393a0561dd038edff6eddb3be6c999d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>getGregorianMonth</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>adf8c69e617291bb10a56d683fa8282e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>getGregorianDayOfYear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ab4a3b8fb109ffa673e0333a1006a7c70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>getGregorianDayOfMonth</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ab93138a7b1ce4a87216ae10165e9cbae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getDefaultMonthInYear</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a3e79fb81c806fd5ff9c64acc7c8bebc8</anchor>
      <arglist>(int32_t eyear)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getDefaultDayInMonth</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>acbee04cad5b9e301e47e1a47fb978002</anchor>
      <arglist>(int32_t eyear, int32_t month)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>pinField</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>afaeebecc193f1fce5fb616462f4cc593</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>weekNumber</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac06ba54055473049be6427add1fa99e0</anchor>
      <arglist>(int32_t desiredDay, int32_t dayOfPeriod, int32_t dayOfWeek)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>weekNumber</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac37c766c0d2b648b451186132e19004a</anchor>
      <arglist>(int32_t dayOfPeriod, int32_t dayOfWeek)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>getLocalDOW</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a0a80956bea5e66c6cabd5485a98bd3bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeGregorianFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a61c3cc26aa39009391dff9e89a41ec67</anchor>
      <arglist>(int32_t julianDay, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static uint8_t</type>
      <name>julianDayToDayOfWeek</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ac80054059c45d5b2466c9aaab596ec1e</anchor>
      <arglist>(double julian)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fIsTimeSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a6a3812124ab9abbd2a2f75b490a6b700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fAreFieldsSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>af19aa6e54f1220ffaf74d29071a6a589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fAreAllFieldsSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aa198993ac97bca6bf80c2beb6657ed03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fAreFieldsVirtuallySet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a223fef486de9d84635c8c2c887dee2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fFields</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a4aeb857bb89a74dbe261896e6b6f6681</anchor>
      <arglist>[UCAL_FIELD_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fIsSet</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a557209952758b6c128ddbc26955eb9dc</anchor>
      <arglist>[UCAL_FIELD_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fStamp</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ae1ab437231e76896ce2b7ccdbc106b0b</anchor>
      <arglist>[UCAL_FIELD_COUNT]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const UFieldResolutionTable</type>
      <name>kDatePrecedence</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a443112ee30874283a616c536293892c4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const UFieldResolutionTable</type>
      <name>kYearPrecedence</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>ae116e0cc5a2c5af58f736fd2199ebcd0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const UFieldResolutionTable</type>
      <name>kDOWPrecedence</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a253f88ce055abc651d4784634bb65635</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CalendarFactory</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>a7b8da58f16be9990955f60c930b4376d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CalendarService</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>aef82cfadea9ca1be538463884884c8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DefaultCalendarFactory</name>
      <anchorfile>classCalendar.html</anchorfile>
      <anchor>affad2f956e924717f3de7ccd94224551</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CanonicalIterator</name>
    <filename>classCanonicalIterator.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>CanonicalIterator</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>a581c81477525fb72415b732ee787245c</anchor>
      <arglist>(const UnicodeString &amp;source, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CanonicalIterator</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>abe0bf9f1eff2eb424a2882da89925fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getSource</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>aa9fa2c21b52c2e2cac9e8f76aefde683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>a561310848158d309f57f9068cecfcaef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>next</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>a085fdd3e06f8a9895f3295ddf202ee92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>a68c9a2ca974735c9399b7c0b831097b9</anchor>
      <arglist>(const UnicodeString &amp;newSource, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>a63a54fdebc38f92648e588ec4aeec9cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>permute</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>abdcec3eed4a26de48c0e9c27f6d2223c</anchor>
      <arglist>(UnicodeString &amp;source, UBool skipZeros, Hashtable *result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCanonicalIterator.html</anchorfile>
      <anchor>ab9ff3b473ca8fc28b9c104633efec51f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CEList</name>
    <filename>classCEList.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>CEList</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>abf99e598a1d6426ec5338a4f8193ee2e</anchor>
      <arglist>(UCollator *coll, const UnicodeString &amp;string, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CEList</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a82625296ba6bab84db6083ec0eadeb8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>size</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a9a022681cd11cf7f561c081f8e352dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>get</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a5798cbcdeabb3a34d6a0776ef714b7a0</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>matchesAt</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a59d5abd34f52a3382488f1b35214b229</anchor>
      <arglist>(int32_t offset, const CEList *other) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a551179fab3d6ebae3caf7dc4852d8b90</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>aa0eb5c99e6ad284bf637524fabe669cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCEList.html</anchorfile>
      <anchor>a09ce636621d595b224df6f5e9adce98f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CharacterIterator</name>
    <filename>classCharacterIterator.html</filename>
    <base>ForwardCharacterIterator</base>
    <member kind="enumeration">
      <name>EOrigin</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>aa400f3cff117a0e79ab4246c606c9141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CharacterIterator *</type>
      <name>clone</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>adc8a708194960bd2ed640ba8a23e565a</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>first</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>afe22aec945697b4459fb4195e1b621c7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>firstPostInc</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>afe620dca9c565e933dca7139ab1f4210</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>first32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a26486be2a3a24bb1634c3279139d549c</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>first32PostInc</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a9e13e7752a9a3091476ef3d42252bf40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>setToStart</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a70bb6445dc7e7cafbd02852a8100cd9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>last</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>ace1cd4d7bad7cd6b302df4beef3640be</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>last32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a88c76a273fb1889aa00272fe0965831b</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>setToEnd</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a38e0b6be47a35be38fc13172d67005f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>setIndex</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a0a1fd04a11c18fc3049934b353c431eb</anchor>
      <arglist>(int32_t position)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>setIndex32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a380715d71de513e075e3e27d2abe595e</anchor>
      <arglist>(int32_t position)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>current</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a6a481f104f8b9446c1e95ea4c47d8228</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>current32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>af2e58620e65172866d073435a3425a11</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>next</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a82bd3961ea1e045cbb533633d15ab00d</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>next32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a9521fd47c8637a99776254ee0a0d469e</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>previous</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a7dfde118a5b6e7755cb4b237c616873f</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>previous32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a9630a5fbd755633cf46c33c3a42c5457</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>hasPrevious</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a785a86ae2f1730806eef19595f14d1aa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>startIndex</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a9183d23e57ab5571c907295f5a45893d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>endIndex</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a3a4f8b46a10f11f0b2d1a393c02d84e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getIndex</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a522cefaae2a07cd2b2f3282e7da60fdb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLength</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a41436db33a5481117f89b343d47a6e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>move</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a16d3fd1fd0cd893b48a0a5697192d634</anchor>
      <arglist>(int32_t delta, EOrigin origin)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>move32</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a711c44e0d1a4dbe0a191ff8d2e14b73e</anchor>
      <arglist>(int32_t delta, EOrigin origin)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getText</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a03c54d93e6fe1d3be187c67acb957410</anchor>
      <arglist>(UnicodeString &amp;result)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharacterIterator</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a1221d9ac55c0c3dbdc91d4ae667888db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharacterIterator</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a546dee20db39cdee1fae5deab92e67ff</anchor>
      <arglist>(int32_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharacterIterator</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a4da97d3afb6b8434eea11823f8eb78d6</anchor>
      <arglist>(int32_t length, int32_t position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharacterIterator</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a73d8a50abf33ac9da63c3c9d463ef7ab</anchor>
      <arglist>(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharacterIterator</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a5ef75872ea49689d6c75a2597d8028ef</anchor>
      <arglist>(const CharacterIterator &amp;that)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CharacterIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a24bbd0b8ba0893633c7ddac569f5161a</anchor>
      <arglist>(const CharacterIterator &amp;that)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>textLength</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>aa30eb2520df4a1737bb8716b07faebc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>pos</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>a31cf308271cffffd314e8e93e7e9518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>begin</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>ac16ef20e110321b0a78a05193d845dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>end</name>
      <anchorfile>classCharacterIterator.html</anchorfile>
      <anchor>afccadd77d7c4440b30816c302ece13d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedArrayByteSink</name>
    <filename>classCheckedArrayByteSink.html</filename>
    <base>ByteSink</base>
    <member kind="function">
      <type></type>
      <name>CheckedArrayByteSink</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>a8911bf2ecf8d6e4845b65e31936dfdb5</anchor>
      <arglist>(char *outbuf, int32_t capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CheckedArrayByteSink &amp;</type>
      <name>Reset</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>a3efce767288f0c989455088730b23fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Append</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>ace4a9f8d0ac6f44f6cfbab126cec36fc</anchor>
      <arglist>(const char *bytes, int32_t n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>GetAppendBuffer</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>ac9b54c8bd9002d867648feb39b82a61c</anchor>
      <arglist>(int32_t min_capacity, int32_t desired_capacity_hint, char *scratch, int32_t scratch_capacity, int32_t *result_capacity)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>NumberOfBytesWritten</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>a83068a3fcf59cc7af120de540b423371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>Overflowed</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>adb0ed4a2592e3c8e09fff38d2fe94981</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>NumberOfBytesAppended</name>
      <anchorfile>classCheckedArrayByteSink.html</anchorfile>
      <anchor>a23dcb404199df5788ae29efd3e814c04</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChoiceFormat</name>
    <filename>classChoiceFormat.html</filename>
    <base>NumberFormat</base>
    <member kind="function">
      <type></type>
      <name>ChoiceFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a9551b876e173743f214d1530368ee92d</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChoiceFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a5f097ff199910610ab5a5eb113e034e8</anchor>
      <arglist>(const double *limits, const UnicodeString *formats, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChoiceFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a491cc4d24cbd4c42acebb158b1e04204</anchor>
      <arglist>(const double *limits, const UBool *closures, const UnicodeString *formats, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChoiceFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>aaac82d203aea4854d148eabe422a8b17</anchor>
      <arglist>(const ChoiceFormat &amp;that)</arglist>
    </member>
    <member kind="function">
      <type>const ChoiceFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a2873dacc65a6fd80c8111711a6f0c3b4</anchor>
      <arglist>(const ChoiceFormat &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChoiceFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a13b14e531d655819e8f3ab2c10bf9cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a3ebd2e04337baee2dbb8c7629592714d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a68b2c94926681294a2fe0d1c7cf52975</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a9e558988f447da3af36ef7fc8245fb55</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a01a7bc685dacb242a2cc12f502a88546</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a8a78bcd2a5d928a6e9fd29d5f95d86b1</anchor>
      <arglist>(UnicodeString &amp;pattern) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChoices</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a5b737cf15cc825a52b7ef14b77a5b2b2</anchor>
      <arglist>(const double *limitsToCopy, const UnicodeString *formatsToCopy, int32_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setChoices</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a7a9bfd3b21d29c46ffce3329b2d96668</anchor>
      <arglist>(const double *limits, const UBool *closures, const UnicodeString *formats, int32_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double *</type>
      <name>getLimits</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>afa32b852545c0ba36952df0b3a88b252</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UBool *</type>
      <name>getClosures</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a9966403f7f19dbb378921a417e033bb1</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString *</type>
      <name>getFormats</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>ac48619b6d0315ade9984e9b33ee86398</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a3488103b67c452ace7cac7f6da452e72</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a4c31ee3278dc0afb02e83127d4677161</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a066409675f3c1ec30237668f7e3a80f0</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>afd1964f35f534b3dc9aff6e13e37e6e1</anchor>
      <arglist>(const Formattable *objs, int32_t cnt, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a4282d9e61550d4abb84d5c6f1ce29f6f</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a1df3b8b4b32453583e6cef2aa74c5d97</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>af4a83c08f52e73d89efa3ae68b938e0d</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a5c48a05a17d3f3e33bd18d1674c90c66</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>af39ef720dd6a46678563da4f4f185bdd</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;parsePosition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>aa1d8199f4ac3743ffb19f9deec3648f9</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a3bb9d296446885cca90a38e477ef5527</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>adaeccf67d5eac282b6b3c4ccf020e9b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MessageFormat</name>
      <anchorfile>classChoiceFormat.html</anchorfile>
      <anchor>a878637013842f94d9e8f7eb5ec0411b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollationElementIterator</name>
    <filename>classCollationElementIterator.html</filename>
    <base>UObject</base>
    <member kind="enumvalue">
      <name>NULLORDER</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ae9485707afe11ee27db1a92c33653e22ae6c5a810a2b83426dfcd03714076d57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollationElementIterator</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>abdd21e6c40c4b30e625aa2219447fd7e</anchor>
      <arglist>(const CollationElementIterator &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollationElementIterator</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a1520541069568e65f9c6876ec2c0f549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a641def3a04da7bda41ab1c52b911160f</anchor>
      <arglist>(const CollationElementIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a9b34d706755dee4116de536525615d8c</anchor>
      <arglist>(const CollationElementIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a9d9ad0ca4208888e53452e7868e62eb2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>next</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a5399fd6f2442c75fef0aef0561a1f487</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>previous</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a1052461ecaa4ef8f7b6904ca16f22275</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaxExpansion</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ab0cc9747f553df1649021d677061497e</anchor>
      <arglist>(int32_t order) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>strengthOrder</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a18c1fde03bc63a9185059ee8af5819d1</anchor>
      <arglist>(int32_t order) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>af800b86206814828221f8410cd2e9a52</anchor>
      <arglist>(const UnicodeString &amp;str, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ae60d0b5c20b9eaf788123a2adb42be8b</anchor>
      <arglist>(CharacterIterator &amp;str, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getOffset</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>addf5ceade65878a92ca3fb8f3ea9b3af</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>aa267b27b2078ec9ff998df4a6a5fc20e</anchor>
      <arglist>(int32_t newOffset, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a7903132671ddaacd41774162597fbe47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>primaryOrder</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ae09d16618097b31ed15bd05e99d35e3d</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>secondaryOrder</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>af13e4d75c867a2d9706e2923cc8c3e6c</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>tertiaryOrder</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ac154c9eceda5c4810241f60208da0684</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>isIgnorable</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>aab4a3b39c449460ee7dd6726e257f78e</anchor>
      <arglist>(int32_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a998eb0226d4f5cff0574f47b89ec69d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollationElementIterator</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a461371fcb9d86aa87c23a3aeed6a8847</anchor>
      <arglist>(const UnicodeString &amp;sourceText, const RuleBasedCollator *order, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollationElementIterator</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>ab8fc4a949e6eaa2f909ae1848a45fbd4</anchor>
      <arglist>(const CharacterIterator &amp;sourceText, const RuleBasedCollator *order, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const CollationElementIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a2e0131a00dff1a0c40378263ece4f6e2</anchor>
      <arglist>(const CollationElementIterator &amp;other)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>RuleBasedCollator</name>
      <anchorfile>classCollationElementIterator.html</anchorfile>
      <anchor>a1918e53ed4bb8208fdd6df3ed4ec2548</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollationKey</name>
    <filename>classCollationKey.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>CollationKey</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a236ce6b7d878eb6a0d5ee583eeb7f6db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollationKey</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>aec3b2c31ee34d6019991b24b7a975493</anchor>
      <arglist>(const uint8_t *values, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollationKey</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a62c797dd9568e240cdcdd3e0b8fb466b</anchor>
      <arglist>(const CollationKey &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollationKey</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a39b57d5e52b60506ad9a99242b19c1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollationKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a38541209bbf6084770d4973ed6cada18</anchor>
      <arglist>(const CollationKey &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a26887fbeff16532382794b91faebaae4</anchor>
      <arglist>(const CollationKey &amp;source) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a85bb52c50f3baf2aad76282f719d6193</anchor>
      <arglist>(const CollationKey &amp;source) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isBogus</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a2b5cbecf80d0c583ec608eb88628f4bd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const uint8_t *</type>
      <name>getByteArray</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>aba4102f9d534cdf6c0ed52e1b5a7578e</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>Collator::EComparisonResult</type>
      <name>compareTo</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a175ce0d8cb5d392731a238e0de29cdda</anchor>
      <arglist>(const CollationKey &amp;target) const </arglist>
    </member>
    <member kind="function">
      <type>UCollationResult</type>
      <name>compareTo</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>ad480e22ece781340466c767c5e4e69e8</anchor>
      <arglist>(const CollationKey &amp;target, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>afddfbfd2410925a1e6a8309bbcaad82d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>aec62adb6b1550b6ff6e18a97de9c725a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>aa1a3652547245ea10c9d10d4746fc30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RuleBasedCollator</name>
      <anchorfile>classCollationKey.html</anchorfile>
      <anchor>a1918e53ed4bb8208fdd6df3ed4ec2548</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Collator</name>
    <filename>classCollator.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>ECollationStrength</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a2872c36ad74fc1100331783afe6b38d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EComparisonResult</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a05f22f81363f2613bea18a632b67686f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Collator</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aeed400dfca4ef25d95509265a1566ce9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a5e9abbd44cc648351bcb398308a062a6</anchor>
      <arglist>(const Collator &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a0ddd04141f65b3f22e1f6d2bf4f53007</anchor>
      <arglist>(const Collator &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Collator *</type>
      <name>clone</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a5b7873505ee31c3745c207cf45d114b4</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aca611b586fa47a756d2b29996f713182</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a87d53bab5e900d89ad27fd61ea6b985d</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab33b6fb1fb75bc8bf4d9d8374c9165bf</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, int32_t length) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ad0ae017f1de0edd0aa10c504ea8bfd58</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, int32_t length, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a562ace5a124eafbf623c39e19b564b25</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a5f32ec22ac5ed66bff8d7707db9260d7</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aade78c5e46f2ce1034e7644b5e375a1d</anchor>
      <arglist>(UCharIterator &amp;sIter, UCharIterator &amp;tIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compareUTF8</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ae2c325d3dece39abd1e72a3dcc321df6</anchor>
      <arglist>(const StringPiece &amp;source, const StringPiece &amp;target, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CollationKey &amp;</type>
      <name>getCollationKey</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab48ddb212e12b9ef4ffa7163e2d7810a</anchor>
      <arglist>(const UnicodeString &amp;source, CollationKey &amp;key, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CollationKey &amp;</type>
      <name>getCollationKey</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>afd733f040738213f0e46847b1e31cf6a</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, CollationKey &amp;key, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a989efcbd6664efd0a8e738a2c1d3f357</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Locale</type>
      <name>getLocale</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab29b8994ac25fd1c5c9f5f58757c0d0c</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>greater</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aea0a4ed08d95791194c307f95e4cd8f2</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>greaterOrEqual</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aa87d324253cf094dc48a7a1e9b7b6afa</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>equals</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ae00999fae1a46616421f3469c53b82f3</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ECollationStrength</type>
      <name>getStrength</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>abbd68b496b6063c5a09a35ce96e4ce93</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStrength</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a0337d30970c7b73a6885a31d6d7d2afa</anchor>
      <arglist>(ECollationStrength newStrength)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getReorderCodes</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aa71d1044c0d4f3e45aaf749295f59761</anchor>
      <arglist>(int32_t *dest, int32_t destCapacity, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReorderCodes</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a5462d7d4f6043505f764a1c05c710f8f</anchor>
      <arglist>(const int32_t *reorderCodes, int32_t reorderCodesLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVersion</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a5884f921390751a8b6f831bd259a7b8d</anchor>
      <arglist>(UVersionInfo info) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aeaf10ab8b08d195a294a9b15aa7195da</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a132f1d7ad918bc1f4dcb956fd74ea808</anchor>
      <arglist>(UColAttribute attr, UColAttributeValue value, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UColAttributeValue</type>
      <name>getAttribute</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a84c6c013a46196d829f71fa843ae7933</anchor>
      <arglist>(UColAttribute attr, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>setVariableTop</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab6e4fc13e278beca8a39539dc326a913</anchor>
      <arglist>(const UChar *varTop, int32_t len, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>setVariableTop</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>adbf3ad5122866f9a16d39ca07779ddce</anchor>
      <arglist>(const UnicodeString varTop, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVariableTop</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>afc34e06d5d3675e6e6ad26a1ee303690</anchor>
      <arglist>(const uint32_t varTop, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint32_t</type>
      <name>getVariableTop</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>adff24c669022242ae00dd2c0c460bbf1</anchor>
      <arglist>(UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet *</type>
      <name>getTailoredSet</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a905d1e33377b611a78ec63ae6c15d3c6</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Collator *</type>
      <name>safeClone</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aa97156a2a27c2e7fc0fccd0aee61de5a</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getSortKey</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ae524fd43a06d4429e2c76bef35874d4c</anchor>
      <arglist>(const UnicodeString &amp;source, uint8_t *result, int32_t resultLength) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getSortKey</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>af379292af58ae29650690a02c410bfe1</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, uint8_t *result, int32_t resultLength) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Collator *</type>
      <name>createInstance</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a685bc906ba633d0d7653089d1f1a4dc5</anchor>
      <arglist>(UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Collator *</type>
      <name>createInstance</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a8487edc8b01ce2e8267053b19ba114ee</anchor>
      <arglist>(const Locale &amp;loc, UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getEquivalentReorderCodes</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ac592373c515b7200d9408333598e9e59</anchor>
      <arglist>(int32_t reorderCode, int32_t *dest, int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a6aed25d37a7937d21599685754198689</anchor>
      <arglist>(const Locale &amp;objectLocale, const Locale &amp;displayLocale, UnicodeString &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ace5e715921cbc6129449d08711c152df</anchor>
      <arglist>(const Locale &amp;objectLocale, UnicodeString &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>af12be166591b536009fbcb636e56515f</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>acd369233c66c780d7ef230fa4fc5d972</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getKeywords</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aa7f1d5f15b6fc722e8aace3160c52504</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getKeywordValues</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a1a1cc517b9c3b82cf8eea3956abdafc5</anchor>
      <arglist>(const char *keyword, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getKeywordValuesForLocale</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a4be23583fa02f2074923858c2522acf8</anchor>
      <arglist>(const char *keyword, const Locale &amp;locale, UBool commonlyUsed, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Locale</type>
      <name>getFunctionalEquivalent</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a23ffda18b6d183b6c62b36718416b528</anchor>
      <arglist>(const char *keyword, const Locale &amp;locale, UBool &amp;isAvailable, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URegistryKey</type>
      <name>registerInstance</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a101e1f1b5eac8264ad5274b8e8bb9eed</anchor>
      <arglist>(Collator *toAdopt, const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URegistryKey</type>
      <name>registerFactory</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>aabab7bd7531b5697256e7e7f5437faa1</anchor>
      <arglist>(CollatorFactory *toAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>unregister</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>afb6f76b673673ddd0bbb2690d135fd56</anchor>
      <arglist>(URegistryKey key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getBound</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a771c2a750d025b9c5497210318473465</anchor>
      <arglist>(const uint8_t *source, int32_t sourceLength, UColBoundMode boundType, uint32_t noOfLevels, uint8_t *result, int32_t resultLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UCollator *</type>
      <name>createUCollator</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a79465f4dba5cd6a6ee0ff1dc12f82ad9</anchor>
      <arglist>(const char *loc, UErrorCode *status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Collator</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a81d189c935adebdb742589212f9ba0e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Collator</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a2d56899e3a0bca4fa08a3b8a5f1752bc</anchor>
      <arglist>(UCollationStrength collationStrength, UNormalizationMode decompositionMode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Collator</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a57d135eb7bb3a137536554f2bd979b05</anchor>
      <arglist>(const Collator &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocales</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab480c30e10864f7c46cda00389bd2d34</anchor>
      <arglist>(const Locale &amp;requestedLocale, const Locale &amp;validLocale, const Locale &amp;actualLocale)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CFactory</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>ab6a9dabbbc5633905fce8c282b031ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimpleCFactory</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a80bbb65f28838eba42b00d611909e8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUCollatorFactory</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>adbce2a122c7c040633075706b9867183</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUCollatorService</name>
      <anchorfile>classCollator.html</anchorfile>
      <anchor>a49f66cb9f432dd77eefae3d1ecaeb9f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollatorFactory</name>
    <filename>classCollatorFactory.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollatorFactory</name>
      <anchorfile>classCollatorFactory.html</anchorfile>
      <anchor>a965c8077151efec8a169dbf534315b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>visible</name>
      <anchorfile>classCollatorFactory.html</anchorfile>
      <anchor>ad7a91609868c9c9da9fd76bbe51e6027</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Collator *</type>
      <name>createCollator</name>
      <anchorfile>classCollatorFactory.html</anchorfile>
      <anchor>ab1ba9eec8827e0432cba88fad9afc051</anchor>
      <arglist>(const Locale &amp;loc)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classCollatorFactory.html</anchorfile>
      <anchor>a721690212a243922f1604fdbb5b93880</anchor>
      <arglist>(const Locale &amp;objectLocale, const Locale &amp;displayLocale, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const UnicodeString *</type>
      <name>getSupportedIDs</name>
      <anchorfile>classCollatorFactory.html</anchorfile>
      <anchor>a47f4f598d9d27e2892b4c2bf2ad14d7e</anchor>
      <arglist>(int32_t &amp;count, UErrorCode &amp;status)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CollData</name>
    <filename>classCollData.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type>UCollator *</type>
      <name>getCollator</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>ae6e0b03b2de8ad3a51ce502b7ad737d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringList *</type>
      <name>getStringList</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>ad9a3cee8ee21ba9a15b5527c5c1e78bb</anchor>
      <arglist>(int32_t ce) const </arglist>
    </member>
    <member kind="function">
      <type>const CEList *</type>
      <name>getCEList</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>ae329ca6f37a0c065ba1b65d52d10e98c</anchor>
      <arglist>(const UnicodeString *string) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeCEList</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a77423e4703645bb956d66b335312b781</anchor>
      <arglist>(const CEList *list)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>minLengthInChars</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a59f514d423aef79078bc07a5e69d3c0b</anchor>
      <arglist>(const CEList *ces, int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>minLengthInChars</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a8775f56ba51f054fbfed7b633ccf7b78</anchor>
      <arglist>(const CEList *ces, int32_t offset, int32_t *history) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a8a1215fe9adf56bd35026cbd98840371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollData *</type>
      <name>open</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>aebf674446064095bc2527ab1c0e93dd1</anchor>
      <arglist>(UCollator *collator, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>close</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>ace312528a2209fa44a65c914f7c20f84</anchor>
      <arglist>(CollData *collData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a95055b1bb2e59688ede407ebe5d3156b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeCollDataCache</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>ada12238ab63535d66f993b0cdd217f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>flushCollDataCache</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>aaa122c473c2459af3dce95a1e26e6ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollDataCache</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>a22e711f86472e2cf11650bbc6554ccd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollDataCacheEntry</name>
      <anchorfile>classCollData.html</anchorfile>
      <anchor>addbca66ab81a7349e225978c82453bae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CurrencyAmount</name>
    <filename>classCurrencyAmount.html</filename>
    <base>Measure</base>
    <member kind="function">
      <type></type>
      <name>CurrencyAmount</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>aa01ed3e0ec82d5074c40812c9664b765</anchor>
      <arglist>(const Formattable &amp;amount, const UChar *isoCode, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrencyAmount</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a96bd4e3e106d7892b49d45af01fb4a1e</anchor>
      <arglist>(double amount, const UChar *isoCode, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrencyAmount</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>aac10e9dcf1578af646760d01d9c1eed1</anchor>
      <arglist>(const CurrencyAmount &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CurrencyAmount &amp;</type>
      <name>operator=</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a715828f7d013aa777e091730ac2d33b7</anchor>
      <arglist>(const CurrencyAmount &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a324129012688a7d6213669f062b74b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurrencyAmount</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>abfee982a80a6241961b02b883c1852f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a656cac9ccc74debabb28ae79942b082f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CurrencyUnit &amp;</type>
      <name>getCurrency</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a9601d6dd26b64a40978c64b074b64073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getISOCurrency</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a99954a6dac387603d04cedaa1333a78b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCurrencyAmount.html</anchorfile>
      <anchor>a068714f400a5c13931cd9ba31c82ff21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CurrencyPluralInfo</name>
    <filename>classCurrencyPluralInfo.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>CurrencyPluralInfo</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a51564ff0e7cf0ff8ecdcfbd0e2f01586</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrencyPluralInfo</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>aceb61512e7a98f4082c5dcc306b363bd</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrencyPluralInfo</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>abd873cd925e9ba0e4ee6a6498a5fefac</anchor>
      <arglist>(const CurrencyPluralInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>CurrencyPluralInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a8f5812d8a9ce2098b8022eb4f5837222</anchor>
      <arglist>(const CurrencyPluralInfo &amp;info)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurrencyPluralInfo</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>ac9ec760d48586b9abf921e73419725d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a334b5d47f05f15eff723a5b4b936aa44</anchor>
      <arglist>(const CurrencyPluralInfo &amp;info) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a4563d66a4ee0ae288731eff01217f272</anchor>
      <arglist>(const CurrencyPluralInfo &amp;info) const </arglist>
    </member>
    <member kind="function">
      <type>CurrencyPluralInfo *</type>
      <name>clone</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>ae42f239465560ec295539eb7b51a530e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PluralRules *</type>
      <name>getPluralRules</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a2d3bde1a97d0529eff8e4c3602dd645f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getCurrencyPluralPattern</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a95ec95880633507afcd981f01cc7035a</anchor>
      <arglist>(const UnicodeString &amp;pluralCount, UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>const Locale &amp;</type>
      <name>getLocale</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>aa2f8ae2d7ac4ef14628d1af6c0af545e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPluralRules</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a8f8c2851a632ef379b419435a36836d4</anchor>
      <arglist>(const UnicodeString &amp;ruleDescription, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrencyPluralPattern</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>ae41ae0092093d2889aa199c07f5d1de5</anchor>
      <arglist>(const UnicodeString &amp;pluralCount, const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocale</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>aadc5a110f0fd817a7926b286b6daa378</anchor>
      <arglist>(const Locale &amp;loc, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>a3c75795c67644335034f426410245432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>afe3d99914b0f6687761872977f81f49d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DecimalFormat</name>
      <anchorfile>classCurrencyPluralInfo.html</anchorfile>
      <anchor>acd9e1cddab5dd42aab15f1c4644ebdc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CurrencyUnit</name>
    <filename>classCurrencyUnit.html</filename>
    <base>MeasureUnit</base>
    <member kind="function">
      <type></type>
      <name>CurrencyUnit</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a730fd929c8fba95407996401a37fa9c2</anchor>
      <arglist>(const UChar *isoCode, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrencyUnit</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a206e26b3939378044aa9e9bc33f02e4f</anchor>
      <arglist>(const CurrencyUnit &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CurrencyUnit &amp;</type>
      <name>operator=</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a652ca28074ddeb812337a30237a86723</anchor>
      <arglist>(const CurrencyUnit &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a28a559d844290aec11e25ef20c4bbaa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurrencyUnit</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>ace5ca87b4dcd3ba93f58f0b8edff189a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a701050ee514770f7383a55df5a0abe71</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>aca7e85865e301276d2dacb6e3799478f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getISOCurrency</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a23a93a872b11b8315f05894247ef7360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classCurrencyUnit.html</anchorfile>
      <anchor>a45f3040e2094a74ad8caeed529d040cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateFormat</name>
    <filename>classDateFormat.html</filename>
    <base>Format</base>
    <member kind="enumeration">
      <name>EStyle</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a960020b0c7ec1b66798022681473e04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FULL</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a960020b0c7ec1b66798022681473e04da61bcc8b716ce88570990bc538ab0e770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EField</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a2bdbb8f1ac253e350dded1bd4cc1105a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a15ec30ed9553462c326b48d9ee2b9542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a4b11dc83bba269b4a5966b91f0dde5b5</anchor>
      <arglist>(const Format &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a75b3bbdb1b728fa9c8ddaa344915427d</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>ada22d0b844417bdcf425d5613fd9979e</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a6a43ee1f7a2db50e70675fe365e26bd5</anchor>
      <arglist>(Calendar &amp;cal, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>aefc3666fdfe047d71f8fcda1b5a0786d</anchor>
      <arglist>(Calendar &amp;cal, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a8eef30d8294185a29bc755292219daf7</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a0ffa389af7f314f345ab092e2d8d07cb</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a85657ecb3891e2f94b7aadcf0741528a</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a5f83e587088badccff4ef25b4b8fcd78</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDate</type>
      <name>parse</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a9b9493fd564b7268f8e42921e4ac6822</anchor>
      <arglist>(const UnicodeString &amp;text, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a7b659b020ec1dc76c6cc1032b878289c</anchor>
      <arglist>(const UnicodeString &amp;text, Calendar &amp;cal, ParsePosition &amp;pos) const =0</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>parse</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a3b6df3a263da2d8e4ea72e79a1f61071</anchor>
      <arglist>(const UnicodeString &amp;text, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a37ffcef643dda5667e736ea715ee9a4d</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isLenient</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a8baf20a26e3c8bd68085c95be83d2aa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLenient</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a6b0da8c6169b80f5adafc9099ed29b11</anchor>
      <arglist>(UBool lenient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Calendar *</type>
      <name>getCalendar</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a2709a585c8ef4397d5c392c5e8962dc9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptCalendar</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a82d9d571d5764024766bb3750759bb4b</anchor>
      <arglist>(Calendar *calendarToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCalendar</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a630055ba1fe47d7ff32616dd2b18fe7d</anchor>
      <arglist>(const Calendar &amp;newCalendar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const NumberFormat *</type>
      <name>getNumberFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>aec908179e2acbfbf3b15a7e056dc5938</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptNumberFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a647d861ff2b5a8099a014c1f5bf422bf</anchor>
      <arglist>(NumberFormat *formatToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumberFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>ac8231aff2cf3d7abe75a6ee18756c67f</anchor>
      <arglist>(const NumberFormat &amp;newNumberFormat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TimeZone &amp;</type>
      <name>getTimeZone</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a08e6d3b2da81e396953220b0a8f26a15</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptTimeZone</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a8158b0bad37c50bfe9f66e6ca2b0a604</anchor>
      <arglist>(TimeZone *zoneToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeZone</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a3671f7110383b5b0062f5cfbbd22b122</anchor>
      <arglist>(const TimeZone &amp;zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateFormat *</type>
      <name>createInstance</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a1542fb2dd41dcf16f50b797c9d0d57ed</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateFormat *</type>
      <name>createTimeInstance</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>abfd5a63e39e890a2ff07a5b15ec88a42</anchor>
      <arglist>(EStyle style=kDefault, const Locale &amp;aLocale=Locale::getDefault())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateFormat *</type>
      <name>createDateInstance</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a4421ca0c8b71b078f3ab9433f5413380</anchor>
      <arglist>(EStyle style=kDefault, const Locale &amp;aLocale=Locale::getDefault())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateFormat *</type>
      <name>createDateTimeInstance</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a62fa8d2242bc72e5737131925f478453</anchor>
      <arglist>(EStyle dateStyle=kDefault, EStyle timeStyle=kDefault, const Locale &amp;aLocale=Locale::getDefault())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a5934ceffff9eafdd3edeb466a2a619e1</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DateFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a5d5c353fee433a94c298643a40886642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DateFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>ab370602cca07d66a02607e2a0a9f12e6</anchor>
      <arglist>(const DateFormat &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DateFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>acc1631f81d9ce43f827a88a92e9e3b6a</anchor>
      <arglist>(const DateFormat &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Calendar *</type>
      <name>fCalendar</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a1c6089b62ba441c5ece52fd7650b3403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NumberFormat *</type>
      <name>fNumberFormat</name>
      <anchorfile>classDateFormat.html</anchorfile>
      <anchor>a418c15b2f4b0717fb40b2a189e230ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateFormatSymbols</name>
    <filename>classDateFormatSymbols.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>DtContextType</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ade23480efc5a6422087f3ed5f36f6e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DtWidthType</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ada0b843f1b60a2ee25b4f4a51dbfbbf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a15f744c2d6fab5071e784e10f747f91c</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a01196552c6e8c4011b2d95fc4da07482</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>addabb006b929a5b555f2c7f961938c70</anchor>
      <arglist>(const char *type, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a645f5ca5228929bc7abb527e21830ba3</anchor>
      <arglist>(const Locale &amp;locale, const char *type, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a0599b7d975cb668577c0cec2c2fc316f</anchor>
      <arglist>(const DateFormatSymbols &amp;)</arglist>
    </member>
    <member kind="function">
      <type>DateFormatSymbols &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>acabd19259650d4a0543735d074678ef3</anchor>
      <arglist>(const DateFormatSymbols &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateFormatSymbols</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a11c9670a8cac5e237ea45f44ea6e459a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a40ada75e53728562e7cc0edee39b4ceb</anchor>
      <arglist>(const DateFormatSymbols &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a9e0e4e15c921898607844822db1d8f7b</anchor>
      <arglist>(const DateFormatSymbols &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getEras</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>af9ce5be9dc0ce3938589fc497ccf73fd</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEras</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>adfbc37cab10dacdbe1c5a1af86819b23</anchor>
      <arglist>(const UnicodeString *eras, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getEraNames</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>aaf93fcefeb4330091177a5c14e6f7116</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEraNames</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ac9fb051dd664c3c1bc2a8ca1e149c7b5</anchor>
      <arglist>(const UnicodeString *eraNames, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getNarrowEras</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a89458a92facb32cc4887f14f67acc034</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNarrowEras</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a0ffc6e59809d53fb7396b9b877642c5c</anchor>
      <arglist>(const UnicodeString *narrowEras, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ace81c0882a4ff2861c368474f5106e04</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a7d8633f879b5a74bdfc6cb08b9b2176a</anchor>
      <arglist>(const UnicodeString *months, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getShortMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a162274dc4bca3c1fa47f230fb719584b</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShortMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>aac06001169caf2cd5a7d802a38981b3c</anchor>
      <arglist>(const UnicodeString *shortMonths, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a1d3c2d23c385a44078e55d5d03324562</anchor>
      <arglist>(int32_t &amp;count, DtContextType context, DtWidthType width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMonths</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a7466cb92aed02cf42e97f5f03bc55aac</anchor>
      <arglist>(const UnicodeString *months, int32_t count, DtContextType context, DtWidthType width)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a2b40190a98fbd9aec1c4ce6cf911bc07</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a1dc2a2d4b1ec66131945a9ab4c7d0891</anchor>
      <arglist>(const UnicodeString *weekdays, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getShortWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>aab738269a814af5db875a5ca059db033</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShortWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>adf0290328482d20ab1d4ed907f67c6e3</anchor>
      <arglist>(const UnicodeString *shortWeekdays, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a3a218045625952a1653b54b461aa8229</anchor>
      <arglist>(int32_t &amp;count, DtContextType context, DtWidthType width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeekdays</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>aaf842c4f06000d4fed81c58f0e042d30</anchor>
      <arglist>(const UnicodeString *weekdays, int32_t count, DtContextType context, DtWidthType width)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getQuarters</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a5b7b2c95696401b6db13ae12e131c912</anchor>
      <arglist>(int32_t &amp;count, DtContextType context, DtWidthType width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuarters</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a0b089729741454a7b51300fcec55ed6e</anchor>
      <arglist>(const UnicodeString *quarters, int32_t count, DtContextType context, DtWidthType width)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>getAmPmStrings</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a00f363f2c8c1f26c1adc5d6ed2e504c1</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmPmStrings</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ac18d3089bf9b92792bf5374adab54884</anchor>
      <arglist>(const UnicodeString *ampms, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString **</type>
      <name>getZoneStrings</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a4191fbef81f95bb24d3233b5af834a2e</anchor>
      <arglist>(int32_t &amp;rowCount, int32_t &amp;columnCount) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZoneStrings</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a44453905971683f1d5c5f381904f6ce9</anchor>
      <arglist>(const UnicodeString *const *strings, int32_t rowCount, int32_t columnCount)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getLocalPatternChars</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a6382a192412253a873974fb81a2c6a14</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalPatternChars</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ac9e4cd64c590041dead4841197706f42</anchor>
      <arglist>(const UnicodeString &amp;newLocalPatternChars)</arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ac16c5f55923f3ea40dfe859796c33151</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a6c9a3ae9e6f2bfb144a61e5162bd6c98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UChar *</type>
      <name>getPatternUChars</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a362968cd9b5eddabd4b6da1689590ffa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a7508c7cea4b1140d1db60f56e9ddbd32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimpleDateFormat</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>ab540340747b423bc89f0e0777cd9683c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DateFormatSymbolsSingleSetter</name>
      <anchorfile>classDateFormatSymbols.html</anchorfile>
      <anchor>a88e52e249ed00a03943396105980ce2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateInterval</name>
    <filename>classDateInterval.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>DateInterval</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a95f560fb4663d65f7a93ad6f5fb2e3a6</anchor>
      <arglist>(UDate fromDate, UDate toDate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateInterval</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>afc5f7d2222696f0f55ac8b17b3906946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getFromDate</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>acd09b0653a136835f773241f3ace62e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getToDate</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a6d582c0226ea90e86b72eb8c4091bccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>af0451132759524cc19d6a4ea9a6bc368</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateInterval</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a40bb39fc80d03464916e20077c8b9488</anchor>
      <arglist>(const DateInterval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DateInterval &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>ab093e4890ccf777455fa452d47f8eb92</anchor>
      <arglist>(const DateInterval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a5038d28120a5739aec8159765e6d22b9</anchor>
      <arglist>(const DateInterval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>ac3bbfac6b8a7ff182a3e346dc4cbbcd1</anchor>
      <arglist>(const DateInterval &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DateInterval *</type>
      <name>clone</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a728fa9393e8fbca88275ff6387425bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateInterval.html</anchorfile>
      <anchor>a4ac929b85374fb21615211eb620794cf</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateIntervalFormat</name>
    <filename>classDateIntervalFormat.html</filename>
    <base>Format</base>
    <class kind="struct">DateIntervalFormat::PatternInfo</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateIntervalFormat</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>aaaed5ba68951e3f5ae353a229f154bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>af9a584ad22ff3673323b26923f8c39b4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>adb057520899e7e878c54152f990c6b28</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>ae1cd1ea9874e3da1d8e7c417850360ad</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>ad5163151a343dac64ad66c5680332ea3</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a53179e87d3552d5f9f7802896a437947</anchor>
      <arglist>(const DateInterval *dtInterval, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>aaa08ad2bb46063a00f5b41500617a40d</anchor>
      <arglist>(Calendar &amp;fromCalendar, Calendar &amp;toCalendar, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a30cd01f77584059579d72912df3e2bea</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const </arglist>
    </member>
    <member kind="function">
      <type>const DateIntervalInfo *</type>
      <name>getDateIntervalInfo</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a7508e46babb623d1383c8f85f09f1bb0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDateIntervalInfo</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>af90019c51abd9d92960dbe90043697b2</anchor>
      <arglist>(const DateIntervalInfo &amp;newIntervalPatterns, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const DateFormat *</type>
      <name>getDateFormat</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>acd674a6d5214ef0e7507637b5f8f9c89</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const TimeZone &amp;</type>
      <name>getTimeZone</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>ab5c2616acc7d1ea3bc9d1e302d49bff1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptTimeZone</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a3258ed9dae97bb6c600c9633f14a5b7f</anchor>
      <arglist>(TimeZone *zoneToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeZone</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>aa99efaa44b42c6ff09891122a431c6da</anchor>
      <arglist>(const TimeZone &amp;zone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a476faa13a44ff11411beaeb69158dd68</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateIntervalFormat *</type>
      <name>createInstance</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>adc7c2da7b2f5e29fb6b4e9caf8f33318</anchor>
      <arglist>(const UnicodeString &amp;skeleton, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateIntervalFormat *</type>
      <name>createInstance</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>aeef98399b07aaceacd7fd58ee33171c5</anchor>
      <arglist>(const UnicodeString &amp;skeleton, const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateIntervalFormat *</type>
      <name>createInstance</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a135df7221deb0e857f1c6d3b66ce7ef5</anchor>
      <arglist>(const UnicodeString &amp;skeleton, const DateIntervalInfo &amp;dtitvinf, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateIntervalFormat *</type>
      <name>createInstance</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>aa30507d97f93eb89008c5c907f6ccf27</anchor>
      <arglist>(const UnicodeString &amp;skeleton, const Locale &amp;locale, const DateIntervalInfo &amp;dtitvinf, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>ad2e287b02ed2899a3dd28d6d1414a352</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DateIntervalFormat</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>afed49bfd80382ac4269241c89aa522d8</anchor>
      <arglist>(const DateIntervalFormat &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DateIntervalFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateIntervalFormat.html</anchorfile>
      <anchor>a65a1f1d51dd4d5ac269050b220033ea5</anchor>
      <arglist>(const DateIntervalFormat &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateIntervalInfo</name>
    <filename>classDateIntervalInfo.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>DateIntervalInfo</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>ae87f68112765188129147222d9383b78</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateIntervalInfo</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a10f7a11483222b40d3731869dcee09e7</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateIntervalInfo</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>aa4f36faeb7c5de30a0fb6ac5a5399e4e</anchor>
      <arglist>(const DateIntervalInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>DateIntervalInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>ad63f6180e37eec9fb09fac3d3cef5a37</anchor>
      <arglist>(const DateIntervalInfo &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DateIntervalInfo *</type>
      <name>clone</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>addfc7c0a258f9ecd3b265dfca9b4f5ee</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateIntervalInfo</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a9630b09cae2d2cc7dcf16e9c506e252b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a6e466e574e1de3819b88c3ecb3e95823</anchor>
      <arglist>(const DateIntervalInfo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>af94119951ed7cc39ff2f85434d1ce717</anchor>
      <arglist>(const DateIntervalInfo &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntervalPattern</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a4029a4e61d6a507f6486b5db36c82faa</anchor>
      <arglist>(const UnicodeString &amp;skeleton, UCalendarDateFields lrgDiffCalUnit, const UnicodeString &amp;intervalPattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getIntervalPattern</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a053256243be8d0ae95f1af7976912831</anchor>
      <arglist>(const UnicodeString &amp;skeleton, UCalendarDateFields field, UnicodeString &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getFallbackIntervalPattern</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a5acf0d6cb618d16c8db47b9abb5e81e4</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFallbackIntervalPattern</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a9c185c5f2ce2cbdde470656ebeb78963</anchor>
      <arglist>(const UnicodeString &amp;fallbackPattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getDefaultOrder</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a659cb97a28e04827678ae318dc541730</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a5eb7f85cbba5dca2294730ba0e949383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>aec3f28eb4e1ebf686ea77a60a6749034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DateIntervalFormat</name>
      <anchorfile>classDateIntervalInfo.html</anchorfile>
      <anchor>a9acb9821e8fddc1337e8f91705b002e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateTimePatternGenerator</name>
    <filename>classDateTimePatternGenerator.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DateTimePatternGenerator</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ac5048ee4483f58c9d54a2216fc15df23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DateTimePatternGenerator *</type>
      <name>clone</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a436b0158c3d3e8424092c6485ad4386c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ae6d1c499c0cd961a73e1f635fc7da485</anchor>
      <arglist>(const DateTimePatternGenerator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a47c846342b07c09940635b2c83c94bfd</anchor>
      <arglist>(const DateTimePatternGenerator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getSkeleton</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>aa30c251609c1eea5ad60c95fc497251e</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getBaseSkeleton</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ae055e7b170198ad8ce64da3052fe2256</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UDateTimePatternConflict</type>
      <name>addPattern</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a492f293963b5f7917e070e9c25d6c5e7</anchor>
      <arglist>(const UnicodeString &amp;pattern, UBool override, UnicodeString &amp;conflictingPattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAppendItemFormat</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>abdfb3118312514bddbe411418738aabc</anchor>
      <arglist>(UDateTimePatternField field, const UnicodeString &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getAppendItemFormat</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a6a89e4ec262e5f2c18fb5569f7c30210</anchor>
      <arglist>(UDateTimePatternField field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAppendItemName</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a1ffd3b2a0db7f860cf8c98058c722422</anchor>
      <arglist>(UDateTimePatternField field, const UnicodeString &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getAppendItemName</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a4fbad10538fe98aee2056c895a3194bc</anchor>
      <arglist>(UDateTimePatternField field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDateTimeFormat</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a20b212311968e817328f03ad4e3efcab</anchor>
      <arglist>(const UnicodeString &amp;dateTimeFormat)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getDateTimeFormat</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a1125be2327c7650cdd2e01599a70bb82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getBestPattern</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a13f3478486d5848abfa3ce28707dc944</anchor>
      <arglist>(const UnicodeString &amp;skeleton, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getBestPattern</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ab917a946e05333c20996e93b0449fd33</anchor>
      <arglist>(const UnicodeString &amp;skeleton, UDateTimePatternMatchOptions options, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>replaceFieldTypes</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a9baa763462b245c845d736f8113b9ce5</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;skeleton, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>replaceFieldTypes</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ab400c25ad7e51795ec2bf51139541c71</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;skeleton, UDateTimePatternMatchOptions options, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>StringEnumeration *</type>
      <name>getSkeletons</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a67d26d69c7ca4c7b8c6d596f26aa16c5</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getPatternForSkeleton</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a8221c6d538b9fcac3b9ce99179f389b2</anchor>
      <arglist>(const UnicodeString &amp;skeleton) const </arglist>
    </member>
    <member kind="function">
      <type>StringEnumeration *</type>
      <name>getBaseSkeletons</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>af235baf09e51f1cc670175573ab54036</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>StringEnumeration *</type>
      <name>getRedundants</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a93d007806554bea0813ab5b99682ac2a</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecimal</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a3c393a45b7303157ba63f28f7f3a9428</anchor>
      <arglist>(const UnicodeString &amp;decimal)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getDecimal</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>ae10f10dbe9ca48e83651f5b00321274b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a4f38c3f07f6a7a91bae4ffe5403081fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTimePatternGenerator *</type>
      <name>createInstance</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a6b4c66f8471fe9829e4e161011a8c472</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTimePatternGenerator *</type>
      <name>createInstance</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a1f8e268f98675dea264f0a8953fdf96b</anchor>
      <arglist>(const Locale &amp;uLocale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTimePatternGenerator *</type>
      <name>createEmptyInstance</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a0b9c60fc1daa8f64f35db20bf021886a</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateTimePatternGenerator.html</anchorfile>
      <anchor>a3b0a7ea9f9c4f104806aea1d67316b61</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DateTimeRule</name>
    <filename>classDateTimeRule.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>DateRuleType</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a54bd953f366fc89279e8bb8ffdadc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOM</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a54bd953f366fc89279e8bb8ffdadc7d8a438dbcb7645554fd1d7a8db771604d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOW</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a54bd953f366fc89279e8bb8ffdadc7d8a780c0fa10fa5f572f29745c57793105e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOW_GEQ_DOM</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a54bd953f366fc89279e8bb8ffdadc7d8ad8fe18c70614f5359cb909cf5d8316e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOW_LEQ_DOM</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a54bd953f366fc89279e8bb8ffdadc7d8a1948ee978a8797ca8b0b67a0cda9c3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TimeRuleType</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a587bb19278c1b9b30d32e33eb88111d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WALL_TIME</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a587bb19278c1b9b30d32e33eb88111d0aefbb25a99824295386e616a78ff89567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STANDARD_TIME</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a587bb19278c1b9b30d32e33eb88111d0af288aca0a107e583468033eba69747ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UTC_TIME</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a587bb19278c1b9b30d32e33eb88111d0ae2fd733a37e5133d961e1fa89a7cf4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTimeRule</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>adb804909d83acd919ebafb12b92d2e8f</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t millisInDay, TimeRuleType timeType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTimeRule</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>ae2d2049f61c3f2a3c88c132fd4dfc19f</anchor>
      <arglist>(int32_t month, int32_t weekInMonth, int32_t dayOfWeek, int32_t millisInDay, TimeRuleType timeType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTimeRule</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>aa37433620c2215eace502921d6d25cb5</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, UBool after, int32_t millisInDay, TimeRuleType timeType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTimeRule</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a5dd4a9dd719ffc9f9af787265130f081</anchor>
      <arglist>(const DateTimeRule &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DateTimeRule</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a32e5b5048afdecf080e3cc8e89364ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DateTimeRule *</type>
      <name>clone</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a3f8ec0d9074cd75b704198157288cd98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>DateTimeRule &amp;</type>
      <name>operator=</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>acfa3647907a3b803cc0ab604aa2f55c8</anchor>
      <arglist>(const DateTimeRule &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>afcd44c4452e4ca846acd98772be4ad7f</anchor>
      <arglist>(const DateTimeRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a8c6bdf2e0752fdf8a5947d506927baa9</anchor>
      <arglist>(const DateTimeRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>DateRuleType</type>
      <name>getDateRuleType</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>abc077b38c57e3aa833259f2f09fcaa66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TimeRuleType</type>
      <name>getTimeRuleType</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>ad53c841e8bb9e0fe39ba10766cdba8dc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRuleMonth</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>ad49a3145c6bd0afc41653f1d54866b91</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRuleDayOfMonth</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a966bf14eaa7f96220e97e5f41e754ed7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRuleDayOfWeek</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a58681ba5850111050da38b1e2354e50b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRuleWeekInMonth</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>ae78f630ab446eb546e959d948b2217a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRuleMillisInDay</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a9557e4b81d446a51e5dd04e97412895c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>a4a11a272988bf4a4b85e60697830b6f3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDateTimeRule.html</anchorfile>
      <anchor>afdd91a931e68adeb4c6dcdf374135ed0</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecimalFormat</name>
    <filename>classDecimalFormat.html</filename>
    <base>NumberFormat</base>
    <member kind="enumeration">
      <name>ERoundingMode</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundCeiling</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7af146ca0a8b344f70cecb3803ae0f570b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundFloor</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7abfbc6479dc0e17828284c1c9defb1a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundDown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7a2533285a97586f0dbd50b800fd6122c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundUp</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7a704fbaff22d357bf8e050996bd685301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundHalfEven</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7a66aca6588fc0e4dbf998f1218c650a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundHalfDown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7aa6798557d8ca6479fcaf9f413f149471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundHalfUp</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7ab7ea67fe0f5eb967ab3e21ec59aec926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoundUnnecessary</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a00f3e49ce35985df764feb658371b7e7a7cb5e1defde9d23c7c0ea23f9ddb7687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EPadPosition</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ad9cabc444ffb51c72c4c11be6d004e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a8a421e9ca43a31cb308c8052cf82850e</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aaadc21eab2ef6252f25eada5440e3c65</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aeac00ab9c6c9bd9bf08d00db52ec5512</anchor>
      <arglist>(const UnicodeString &amp;pattern, DecimalFormatSymbols *symbolsToAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aeeb5453a4c9d4e3b044307341f6bc0a1</anchor>
      <arglist>(const UnicodeString &amp;pattern, DecimalFormatSymbols *symbolsToAdopt, UNumberFormatStyle style, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af5ef6767e465d243dddea9d8d3bd9a57</anchor>
      <arglist>(const UnicodeString &amp;pattern, DecimalFormatSymbols *symbolsToAdopt, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a6202bc1606eb3800758ec33fc05b6d2b</anchor>
      <arglist>(const UnicodeString &amp;pattern, const DecimalFormatSymbols &amp;symbols, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ab9370805544903b8a5040468619a34ed</anchor>
      <arglist>(const DecimalFormat &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>DecimalFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a80ae4009d0a89aaa339e38328c5f5f31</anchor>
      <arglist>(const DecimalFormat &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecimalFormat</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a1c39af86d6186c5ffd8ae49d32a87cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ab708755522b88a31695ed54eac6f1bbe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a3d3a2d71fcf817ddc1473e9e5c59756c</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aed19f9279def60133b3122a2435ea568</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a15bb0a7e2c377a4bc0a3d786694f30d9</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aa2bab620a29369c545e85d544d73ad05</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a78ad4a93bb4af259f0909b5f4c207312</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a4239fefb073af94327ccdac88bb5bf3e</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a12d61d1634942c8fd8dbc99e379eac64</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a92b6cd5af73a8183eb3a3322db4a2c61</anchor>
      <arglist>(const StringPiece &amp;number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af1eef78b146ce1ee5ee6c8c580e602ca</anchor>
      <arglist>(const DigitList &amp;number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a1afb44274993754d2099fe78f24c95c5</anchor>
      <arglist>(const DigitList &amp;number, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a9cd8dc27d2e975c453b12e123225da17</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aaf9c44cbcc2b7f0279dcc6f121b8bf13</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ac5b6d7339b4ea565dee15147cd29df09</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a353940a76151b71b954fcfb37a0f9611</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a7bd1ea414645fcce54268b47d38c84ae</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>afe6f4084b4a6ccff6977501d90011fa4</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;parsePosition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a9c0309ac314fe3ec8a7cc4b50b99940a</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Formattable &amp;</type>
      <name>parseCurrency</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aa83789398c1b9baa69aa31a5391eadf2</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DecimalFormatSymbols *</type>
      <name>getDecimalFormatSymbols</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a32cc0bfc2cffa8cb3978a67555fe7253</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptDecimalFormatSymbols</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a13825fd336e4de55dfc5cd13616430b2</anchor>
      <arglist>(DecimalFormatSymbols *symbolsToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDecimalFormatSymbols</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a973c2dd6666737ba8d91384ea77ff26b</anchor>
      <arglist>(const DecimalFormatSymbols &amp;symbols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CurrencyPluralInfo *</type>
      <name>getCurrencyPluralInfo</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a022de957369cbea0811ee07b3d934a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptCurrencyPluralInfo</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a176a66f28389d420e6cb8f9d6ef33888</anchor>
      <arglist>(CurrencyPluralInfo *toAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrencyPluralInfo</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a3ee9dab51dcd5eac0534964c26b90d72</anchor>
      <arglist>(const CurrencyPluralInfo &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getPositivePrefix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a542dc4e58b1d27bf9acc04caf6c392fe</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPositivePrefix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a955034e72cf166f9b9c933b2e7d0c0ce</anchor>
      <arglist>(const UnicodeString &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getNegativePrefix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a85918d546a872ca3d33a4f1f15a9e5e0</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNegativePrefix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a923f9be542ebdbdf07f26dd849a6047b</anchor>
      <arglist>(const UnicodeString &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getPositiveSuffix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>abc219af67d858829b4f258e42be2b362</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPositiveSuffix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>acc7ebd164e98f56a044861a77eb5b7b0</anchor>
      <arglist>(const UnicodeString &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getNegativeSuffix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a74c128baec0b40c6a02d495e9d1b66f6</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNegativeSuffix</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aee6c5f9d27a8df1d33bc65d9a5b546bf</anchor>
      <arglist>(const UnicodeString &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMultiplier</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aa7ed11a9a3bfecf78bf0323c09a89ce5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMultiplier</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aeaa002ef2300082f24802df929162f83</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRoundingIncrement</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a2625aaab4e08c60f390f72ba3ef512a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoundingIncrement</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a7d2a985abd8e4ac25c77e94f7f8ae2e7</anchor>
      <arglist>(double newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ERoundingMode</type>
      <name>getRoundingMode</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a9dd8911ea74be813c2446ee7a6657385</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRoundingMode</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a4c4239c9afd29b26ab405efda8d7f993</anchor>
      <arglist>(ERoundingMode roundingMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getFormatWidth</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a96acb157e41ca30d73f7baef3e78e0a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormatWidth</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a16b35a9d59d21f140c31e73dbb08758f</anchor>
      <arglist>(int32_t width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getPadCharacterString</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ae5eb36a42f0bc5b38585762fa819792b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPadCharacter</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a23c909183f4e0ed0c938fb67a1f5b5dd</anchor>
      <arglist>(const UnicodeString &amp;padChar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EPadPosition</type>
      <name>getPadPosition</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a44433620af9101170cdf90f5b56c9581</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPadPosition</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a466c599088e944d2f9a73d2d251af4f3</anchor>
      <arglist>(EPadPosition padPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isScientificNotation</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ae27960a24003cd84116cb94d05efd893</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScientificNotation</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a280ddb4755eadd569c668844eea83ec1</anchor>
      <arglist>(UBool useScientific)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int8_t</type>
      <name>getMinimumExponentDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a7f2624eca4e37bfdebcb8b27f016abb0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinimumExponentDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aa9bbe051c7f9962bb8a4a91cc32bb001</anchor>
      <arglist>(int8_t minExpDig)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isExponentSignAlwaysShown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a3f6ed363c1f0a3260153822f159ef136</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExponentSignAlwaysShown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a4c341614d4fcdceb83345a32ab125ec1</anchor>
      <arglist>(UBool expSignAlways)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getGroupingSize</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a2609e24ab824305f1ed4c68523aa9820</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupingSize</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af1111f8ae6bcae827973d5114b5a1dd7</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getSecondaryGroupingSize</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aa215994a121009e3619e6e3884ced73b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSecondaryGroupingSize</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a489755a7c9b3a772d950c952c2e513d5</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isDecimalSeparatorAlwaysShown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a856515c53689f8bbedf695b17b3e3769</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDecimalSeparatorAlwaysShown</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a1c767fd7397fd26ca7c0bae7fdcf2343</anchor>
      <arglist>(UBool newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ab5d50567589c29105075cecfea1c98dc</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toLocalizedPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a1eaa21381319486ce285ab680a14c918</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af2d13a3de17cf4085cc82f74a915af6d</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a1cc6a469471eeae2356819552281001b</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyLocalizedPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a3a9842cd391ea434e18889f5b04fb42d</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyLocalizedPattern</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ad20c4e92d192db4f70bc9631a67a0c1e</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumIntegerDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aaf3692b04cf2fafbc536bcdaf9caea25</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinimumIntegerDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>acda98ebc96abd54c9d796e90231f3bf9</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumFractionDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a383f882e65849d2cf59550c875f61f1d</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinimumFractionDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>acb6abe86ebcfd4bb0b91dec005da9d7b</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMinimumSignificantDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a0f903265e1115115509d1d45da5c5d15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaximumSignificantDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a415f43f510424b6606d8529933e6a284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSignificantDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af970944ad7d9d249aeb488bd4872fe2a</anchor>
      <arglist>(int32_t min)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumSignificantDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a985457f807266318caaa13a20554906b</anchor>
      <arglist>(int32_t max)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>areSignificantDigitsUsed</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a8dfe7ad867c1480858a6902314bc96b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSignificantDigitsUsed</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aea4a7be245a5094ad7225a443ee39409</anchor>
      <arglist>(UBool useSignificantDigits)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrency</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a4c87fca5e0d14886bdaa4e0969f814e5</anchor>
      <arglist>(const UChar *theCurrency, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrency</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a2ac00a272f0b9f01c4004372c417d347</anchor>
      <arglist>(const UChar *theCurrency)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a29d58da07dee220c1661ec37397babb2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a2c44dda0c6621b3ff10b120fd760ea88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>fgNumberPatterns</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>af41fc1a3bde85bec4649668300f60148</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getEffectiveCurrency</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a9ff71ee7d761b1f802aa7e5d899ebe5c</anchor>
      <arglist>(UChar *result, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32_t</type>
      <name>kDoubleIntegerDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>a8d5140e73b831fedb039ccf3c303c156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32_t</type>
      <name>kDoubleFractionDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>ab499b677e78e3320d6704b21f8a3ad23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32_t</type>
      <name>kMaxScientificIntegerDigits</name>
      <anchorfile>classDecimalFormat.html</anchorfile>
      <anchor>aefc212fd0526b37ca733b1827d28f440</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecimalFormatSymbols</name>
    <filename>classDecimalFormatSymbols.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>ENumberFormatSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDecimalSeparatorSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5afbc1c361e234d7c4a1956cd23598b958</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kGroupingSeparatorSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a285c84ec337e2de67a5d15f1e54d82b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPatternSeparatorSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5aecebed5dcd39ac6a37f2abc0c26d2052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPercentSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a6e7c212e015d16d13211981dba1a3d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kZeroDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5ade30415fa7dfab1f9bd5ecd6c9eca30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a8a1ae3b194d957cd0bfdb468777dd51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kMinusSignSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5abe50fb06b881a7bfea25968c3907c9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPlusSignSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a427c5f11c61035460bc9909bac3d3e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kCurrencySymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a8a3108032a077f7fc9782ab96623d163</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kIntlCurrencySymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5ad05569e73197ebc571dd5d593fd98ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kMonetarySeparatorSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a3cdd94060e4816226bfbaf5f851b1bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kExponentialSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5af0f3897fd4f2cf76981bc76e60f5d8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPerMillSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a0bc83888deb7b62bffffd8196bfc80c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPadEscapeSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a7e2aaf6cc78c1f63bda0bd7295bc97c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInfinitySymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a2291a12b826711fad797fe079fead9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNaNSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a540b88b52352d8b4a28b7b6a4b6ee8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSignificantDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a555556b91942d0406da8a30a80039a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kMonetaryGroupingSeparatorSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5ae66b88c99b1a13649454fcc881120e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kOneDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a521d7c5b58150cdb50894c1fdfc21db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTwoDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5ae9cd7897c702dc7be852c19c973e01b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kThreeDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a7db786e86904eacc9fbc1d5988663737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFourDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a0662d79a313561c81e5fb19f4e0525a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFiveDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a7f3a4ec5f063537e91327e65aaca1131</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSixDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a21a08d19aaaa4a5ed2ad30003777e5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSevenDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a4421531781f19843250fc08d28bdfb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kEightDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5a89331046be02a74184df265f6041c922</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNineDigitSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5aef23faf11f0eb0dad31bc4d3f3ef477c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFormatSymbolCount</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a165fe72713f240477c2d4572a77997e5afcaaa868d2bd8d72da3a14138b90636e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormatSymbols</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a9b766386e1ea51b530ac76f5a9f43fb8</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormatSymbols</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a93c8443585f64a8c8a02380c5f5e5a62</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecimalFormatSymbols</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a1b1e4b9956197aefe8cb4fe986c38662</anchor>
      <arglist>(const DecimalFormatSymbols &amp;)</arglist>
    </member>
    <member kind="function">
      <type>DecimalFormatSymbols &amp;</type>
      <name>operator=</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a6077633d939b64e3dcce482d3ba28d8c</anchor>
      <arglist>(const DecimalFormatSymbols &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecimalFormatSymbols</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>aa3a5b3466fa4f71e18afc25b54b05dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a0b0fa70ae257ce478f090a5227bf7d3d</anchor>
      <arglist>(const DecimalFormatSymbols &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a5b8847a58bdd183fb3a16ebb75b9534b</anchor>
      <arglist>(const DecimalFormatSymbols &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>ab83313d76403a414dca162111f13c110</anchor>
      <arglist>(ENumberFormatSymbol symbol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a8d82fd47acd519c7263328a5032abfb8</anchor>
      <arglist>(ENumberFormatSymbol symbol, const UnicodeString &amp;value, const UBool propogateDigits)</arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>addbd92170a4b33436d1815d4169fea33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>aadee36a7de58e534b27090e4bdd455d1</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getPatternForCurrencySpacing</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a4c55dddc4533dfa5725c5d20249f7734</anchor>
      <arglist>(UCurrencySpacing type, UBool beforeCurrency, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatternForCurrencySpacing</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a99663161ca9f780dbfb90fab0b775881</anchor>
      <arglist>(UCurrencySpacing type, UBool beforeCurrency, const UnicodeString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a8871fd8e3b933f483c2dc0c3cbfd0811</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getConstSymbol</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a278c120329862607234c43a84d8e1131</anchor>
      <arglist>(ENumberFormatSymbol symbol) const </arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getCurrencyPattern</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>aebc6b8ef500935de1d604fa3e59af1df</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classDecimalFormatSymbols.html</anchorfile>
      <anchor>a4df00b320e7eefce7c70e1bc6405db2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ErrorCode</name>
    <filename>classErrorCode.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>ErrorCode</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>adaf19e1a90d5552207ab98595d90129f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ErrorCode</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>ae2f6100798cd438dabeae33baad364ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator UErrorCode &amp;</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a0a4838eab08afeb636a572cbab1c43bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator UErrorCode *</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>ad7c50161393172c0e6571857522f70fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isSuccess</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>adda7ef44a460f8ec081cad5841189a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isFailure</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a58311f5c65807f1ce64e5458dfda74c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UErrorCode</type>
      <name>get</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>afe64b6732f4d12d984f8c0756ccfb4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a062be13bd2216ed70ce9844ab6a29441</anchor>
      <arglist>(UErrorCode value)</arglist>
    </member>
    <member kind="function">
      <type>UErrorCode</type>
      <name>reset</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a52f1f0c6687084d980df923ecd76945d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertSuccess</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a7697311334f1c312276236c62424d413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errorName</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a73244a121c08a3e4b4a4d2f51448a6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleFailure</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>a0f81ad4f9be3a2f0724934ed2e9d9c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UErrorCode</type>
      <name>errorCode</name>
      <anchorfile>classErrorCode.html</anchorfile>
      <anchor>acb34773ffbcba381a3e90e07925bb72f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldPosition</name>
    <filename>classFieldPosition.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>FieldPosition</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a75a87d2e7d6d97217daff8e029a0f9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldPosition</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>aa03f4d3490bf5f56b797c36363bfae4f</anchor>
      <arglist>(int32_t field)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldPosition</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>aee8d7c91df960f9f020b480e7b2fa628</anchor>
      <arglist>(const FieldPosition &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FieldPosition</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a29226fbee478ae6ff23ef868e7810793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FieldPosition &amp;</type>
      <name>operator=</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a71afa3cf2ccf393943034c2c7d7eb7ce</anchor>
      <arglist>(const FieldPosition &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ae9dbfaa44ccd20e4eb792546df80e714</anchor>
      <arglist>(const FieldPosition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ad142ffe1884a49a2bf4d4073aa303038</anchor>
      <arglist>(const FieldPosition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>FieldPosition *</type>
      <name>clone</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a64641de3d32fedd8dcc7cf299cd1f9cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getField</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ad62441dc0bcc91af346d78a3faca2812</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getBeginIndex</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ac1b3be1343963a616b7eaf335437a2ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getEndIndex</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ad94244fb17162aa8a6629bd5e978f5d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setField</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>aa5fab63fb11108011e818b7904648a98</anchor>
      <arglist>(int32_t f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeginIndex</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>ae08c2e084a51bc0602b374d5ac69d76f</anchor>
      <arglist>(int32_t bi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndIndex</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a272f8398a2757804560771cc67d1f0f8</anchor>
      <arglist>(int32_t ei)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>acdf9fdcb5a7d838293537a6459eb997d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classFieldPosition.html</anchorfile>
      <anchor>a953781a8cc4ab8919c74d7b5633b4b06</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldPositionIterator</name>
    <filename>classFieldPositionIterator.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>~FieldPositionIterator</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a99c8261bcabccf7f9021048f434b8637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldPositionIterator</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a261336db06eddf69a2de075a930256ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldPositionIterator</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a1ee7fb97b699749292f9f5751ddae729</anchor>
      <arglist>(const FieldPositionIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>aad3f5660944756a2870f27386c75bbbb</anchor>
      <arglist>(const FieldPositionIterator &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a2577c8b21530671bbabebfa5710db09f</anchor>
      <arglist>(const FieldPositionIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>next</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a0f620f47a6594d0d6cb2631e3bae9b13</anchor>
      <arglist>(FieldPosition &amp;fp)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FieldPositionIteratorHandler</name>
      <anchorfile>classFieldPositionIterator.html</anchorfile>
      <anchor>a521af666ba6670f8c8a975d22cc0400a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FilteredNormalizer2</name>
    <filename>classFilteredNormalizer2.html</filename>
    <base>Normalizer2</base>
    <member kind="function">
      <type></type>
      <name>FilteredNormalizer2</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>a4766e7d5a07cc54fb1314fe3fa20b113</anchor>
      <arglist>(const Normalizer2 &amp;n2, const UnicodeSet &amp;filterSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>normalize</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>ab0a164b19c39ae83f6fa0e39de03b577</anchor>
      <arglist>(const UnicodeString &amp;src, UnicodeString &amp;dest, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>normalizeSecondAndAppend</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>a4da04a1bc80036517a4882fc92d44660</anchor>
      <arglist>(UnicodeString &amp;first, const UnicodeString &amp;second, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>aa9fd39238503044982bbf2daff42511a</anchor>
      <arglist>(UnicodeString &amp;first, const UnicodeString &amp;second, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getDecomposition</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>acc05326f94edcb8ba9abd13cf76ed3da</anchor>
      <arglist>(UChar32 c, UnicodeString &amp;decomposition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isNormalized</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>a576f5d048a152e09da79f66c7bfb58c4</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UNormalizationCheckResult</type>
      <name>quickCheck</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>ad6a49b1af0723123fa8dac23dd36f0f6</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>spanQuickCheckYes</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>aca6b13adc468f9d229eb01d84f8bcead</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasBoundaryBefore</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>a9f447d4ef069df91885ed443b15ce3ae</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasBoundaryAfter</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>af6670c5560d57f87b92add8b07136931</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isInert</name>
      <anchorfile>classFilteredNormalizer2.html</anchorfile>
      <anchor>acb08c5dfd669fd09d3e0cf62806f8a3a</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FontRuns</name>
    <filename>classFontRuns.html</filename>
    <base>RunArray</base>
    <member kind="function">
      <type></type>
      <name>FontRuns</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>abed9bd234037ff00ab329b4b32db46c6</anchor>
      <arglist>(const LEFontInstance **fonts, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FontRuns</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>a6762a2a5c25ecd1bd1859231ae03df10</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FontRuns</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>a72aa025756c91fc3642231ac39709b04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LEFontInstance *</type>
      <name>getFont</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>aa6ebcbf3a862e8c56748ead5af1b66f9</anchor>
      <arglist>(le_int32 run) const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>add</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>a3dcbb98d93f65611ff3385f65852e44e</anchor>
      <arglist>(const LEFontInstance *font, le_int32 limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>a25081829cead67f5bea9f4713ed1bc0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>aec8bc3b6506ef15bb628ca85bc3bee03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>a54b467a29c09e1a9a05c4da12c1553d9</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>grow</name>
      <anchorfile>classFontRuns.html</anchorfile>
      <anchor>aafd123d2d077d7ce16e2760f70c905df</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Format</name>
    <filename>classFormat.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>aafee703f14d0f5ddb264b708a75174a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>ad9be7e8b7bef97013ff74ef1be3903a5</anchor>
      <arglist>(const Format &amp;other) const =0</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a4f65d87226814931dde8b035f47b69f3</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a4e7ebd5cfd390c35e2bda88257f8b51a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>af3f0b157f07d6e9f908da69c99239600</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a12ffb857c5c9a553270dfe9a71fbd8e9</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a820c1ea5bf5fd4f65de463a74ddf113e</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>aa53bea97b986c2f21e5638aa30aa08b7</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseObject</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a90da11177ef906f464d63ca14300e1c9</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>getLocale</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a4502b04fe77be54f9f0343a87156fbd5</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLocaleID</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>ad8ca4e4cbd2a11b4de3c748c48c7c536</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setLocaleIDs</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>ae15f405ad3805e8d6691354047b500ca</anchor>
      <arglist>(const char *valid, const char *actual)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a9326a787208f39b9544fc6fcbcbfcad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Format</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>ab69111c370cfe44f9508e78e5431cc65</anchor>
      <arglist>(const Format &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Format &amp;</type>
      <name>operator=</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a7a5276a88c488462eea3a508b71f4d9c</anchor>
      <arglist>(const Format &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>syntaxError</name>
      <anchorfile>classFormat.html</anchorfile>
      <anchor>a98213ada53770537d242f4bf0ba43b73</anchor>
      <arglist>(const UnicodeString &amp;pattern, int32_t pos, UParseError &amp;parseError)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Formattable</name>
    <filename>classFormattable.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>ISDATE</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a0016ff3fd3a8b77b1775db4d8053dc77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDate</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9a5b0ae01d869868e36ddc2d548bdfebbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDouble</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9a20df50b64f4c08d5ddc94d5491978bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kLong</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9ab2c013b122f7d28fc6cb971c6be8fb81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9a065be6ed91ee0a3d57cbac3df2755415</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kArray</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9a91a06b3e0bcd39b0d25be34ece2f85e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInt64</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9aeea564410cc4d45c86d9e6477d4247be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kObject</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a6116dce32d34fe529d3a15c4f4d587a9a950ff294472e1c07e148a21f98f56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a1b05d47998d1d08e2d3a4a772f482d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a72bada90a8c8c0fddcad9e8c6e172890</anchor>
      <arglist>(UDate d, ISDATE flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a57cfe4ad057dc091814d380da9b33d63</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a94fe9340c7d26bd247eb34cc077ba2d6</anchor>
      <arglist>(int32_t l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a0ac0e62441b18c7fdadf4d8a070d3cd5</anchor>
      <arglist>(int64_t ll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a09ede03bafb98f409597eb15f1ce2c4c</anchor>
      <arglist>(const char *strToCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a3613a941665a4d994b5cd959532dedb4</anchor>
      <arglist>(const StringPiece &amp;number, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a40b32124a7750edd8fdd9fe33062dda0</anchor>
      <arglist>(const UnicodeString &amp;strToCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a10210c262e0e2ca49adebd71d04512f4</anchor>
      <arglist>(UnicodeString *strToAdopt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a8ec708cf73438029dfb7347b1df400ab</anchor>
      <arglist>(const Formattable *arrayToCopy, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a261760e59c78a4b94797c9b0457a9b78</anchor>
      <arglist>(UObject *objectToAdopt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a483628d21dab7e101a953c6ce26d6f2b</anchor>
      <arglist>(const Formattable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Formattable &amp;</type>
      <name>operator=</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a5236bed18d2df007c9badcebed0ff827</anchor>
      <arglist>(const Formattable &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a569b2871185bf920541e35854e7acf6a</anchor>
      <arglist>(const Formattable &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>acf1439b3bd065e6a72cbd2b93ac0ff7b</anchor>
      <arglist>(const Formattable &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Formattable</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>affa7784f060d736f816080b2f8bd264d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Formattable *</type>
      <name>clone</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a22da1f90aa428c9e6f550c8db0fa6170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>aaf6a729059c865edb91d8f43f54382fa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isNumeric</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ab151afe425035dc64e81d71cf368a007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a9a0118fa9015a633493e37aa421c7f63</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDouble</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a1b0009b703fa26eeafeb19fb101be372</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLong</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>af23eee6502b54acea1f83549e87ba28e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLong</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ad0a1283fb572442657927d556ec3e158</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getInt64</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ad09bd66550cb50d0577ce413c9cb627d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getInt64</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ab1db21328cb215916c5941c2b7f60189</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getDate</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a13eb5e3f597081089fa54aedaaa1bbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getDate</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>af0cb44babfc420a6f1fc42817c2e3675</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a5eb518dc3b86ed33b57351f002f8e6f0</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a4add509111870deeb1146d6049eafa2a</anchor>
      <arglist>(UnicodeString &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ad73e152f9bf909ebfb6d743f0061b136</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a649b76697136c8435f1e2f0a4d513a8c</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a599fc22b94579d3d60a05219dad54bc4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a46705d8f815d66367004ba40b3f350dc</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const Formattable *</type>
      <name>getArray</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a1209ed6660b4f0148b4f191f3d1e75a9</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>const Formattable *</type>
      <name>getArray</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>ad85060803f97934c4c8792f9a58a17f3</anchor>
      <arglist>(int32_t &amp;count, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>Formattable &amp;</type>
      <name>operator[]</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a8f546115a6d407bd7a812165af4bb9c4</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>const UObject *</type>
      <name>getObject</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a369d8d938f9a3a553d4e0c52c602d5de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringPiece</type>
      <name>getDecimalNumber</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a538ff5bd4dffa772daa0f790b098993d</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDouble</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>acb096fd7b81a93cab2d8c4c6e2c0854e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLong</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>aafa2d23eda301a1909f7586fc78dd7b9</anchor>
      <arglist>(int32_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInt64</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a82fdbd66a6e9d496d7aee61969bbe518</anchor>
      <arglist>(int64_t ll)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDate</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a91da497e8c98a9b7062afed1157560ce</anchor>
      <arglist>(UDate d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a58298eefc0fde88be748e663a57e1d52</anchor>
      <arglist>(const UnicodeString &amp;stringToCopy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArray</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a3e9b1c18da9da9c38d90d88f84ef3e01</anchor>
      <arglist>(const Formattable *array, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptString</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a0f4689ccee46804a84219d934c84d220</anchor>
      <arglist>(UnicodeString *stringToAdopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptArray</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a4fea1f1272412f7a145b3d19edf3917d</anchor>
      <arglist>(Formattable *array, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptObject</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a949fd086ba20b88c1af4d55906711335</anchor>
      <arglist>(UObject *objectToAdopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecimalNumber</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a781d07d572b721d59fd1045bbe92fb97</anchor>
      <arglist>(const StringPiece &amp;numberString, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>af226a9a011a911af20cba78fd5109d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLong</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a7ea4122be7eec20f523e9eaa3200ca63</anchor>
      <arglist>(UErrorCode *status) const </arglist>
    </member>
    <member kind="function">
      <type>DigitList *</type>
      <name>getDigitList</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a050bf65094f969627c9269ebd5470f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptDigitList</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>aa916199fe4e27ab43d16f18caac3551b</anchor>
      <arglist>(DigitList *dl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classFormattable.html</anchorfile>
      <anchor>a704fd6a9c62d33929ff2d9f6f965e3f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForwardCharacterIterator</name>
    <filename>classForwardCharacterIterator.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ForwardCharacterIterator</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a5d7a74e28d40b3234f7beb4f175649d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a3359b21f630495c271715decce6703f4</anchor>
      <arglist>(const ForwardCharacterIterator &amp;that) const =0</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>ab55ea12533e313565bef5d4b3b020f76</anchor>
      <arglist>(const ForwardCharacterIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a0b9696ca3d4d27b22a2744a2c498b4d7</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>ac86e1b248f61b462458896b2113099b3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar</type>
      <name>nextPostInc</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a713194d8a27d3f50fe0454b8286921cc</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UChar32</type>
      <name>next32PostInc</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>acb902b4e8c192937270157bb1afca237</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>hasNext</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>ab53c28ee0b9ff659983ded76e53f6251</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ForwardCharacterIterator</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>acf59da5fdaf57d8be166ccec06d54672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ForwardCharacterIterator</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a1debdc2a50bd25e3663deb46f5bc8f3d</anchor>
      <arglist>(const ForwardCharacterIterator &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForwardCharacterIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classForwardCharacterIterator.html</anchorfile>
      <anchor>a76c13ba2ac6386e2d46ad41df4b7b9a3</anchor>
      <arglist>(const ForwardCharacterIterator &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GregorianCalendar</name>
    <filename>classGregorianCalendar.html</filename>
    <base>Calendar</base>
    <member kind="enumeration">
      <name>EEras</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>afeedaf0d04321220e77c46ba69b78619</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>aef459c49036add0f69c9991ff7d7f11d</anchor>
      <arglist>(UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a062240b2ac5791cc8b00ff871b022ec0</anchor>
      <arglist>(TimeZone *zoneToAdopt, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a072fb9cf35f38dc78b5f6ac09856ce2b</anchor>
      <arglist>(const TimeZone &amp;zone, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a6b1045e9d4426d089d3c9fccf3ed1520</anchor>
      <arglist>(const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>aa4776493fdf072637107e33db27ae0f4</anchor>
      <arglist>(TimeZone *zoneToAdopt, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a331be71044f6f7be43ddc9c65c0d47ea</anchor>
      <arglist>(const TimeZone &amp;zone, const Locale &amp;aLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>aee943a8e7ad66de21cf68f65d131583e</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a9d653bb7fd8865fd40f9bd8e499d4e00</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ae4312d4bda173f6d707b08d389dd0525</anchor>
      <arglist>(int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a5ccea6f20e8762609df45b85450299e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GregorianCalendar</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a73927d036deb23cbc22de2ead041ced9</anchor>
      <arglist>(const GregorianCalendar &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>GregorianCalendar &amp;</type>
      <name>operator=</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ac178802905971d48556c0ac8a77bb3c4</anchor>
      <arglist>(const GregorianCalendar &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Calendar *</type>
      <name>clone</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a6924d2c9812c8af226ca941b024c56aa</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGregorianChange</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a5e643d82a8dba031b54c97f057d804f6</anchor>
      <arglist>(UDate date, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getGregorianChange</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a3e038439da10df6dec13fc500f2b54b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isLeapYear</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a74481deb64e01bbcd8d0f72ff99b687f</anchor>
      <arglist>(int32_t year) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ab72c13d826e10d9292760b083c63f956</anchor>
      <arglist>(const Calendar &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>roll</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a94eb045ce42c58b4f823e55f91bb695e</anchor>
      <arglist>(EDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>roll</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a356ca180f51ab33ce27f41fde8c43739</anchor>
      <arglist>(UCalendarDateFields field, int32_t amount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMinimum</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ac4638c3ac6effee100f6b18081533943</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMinimum</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>af24993c1cd9d48e203b820f6981f991e</anchor>
      <arglist>(EDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMinimum</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a3cddc1a8bd73250d23ef4ccd632c21c8</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getActualMaximum</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a1fe4199946f259c5fff4b3a976db628f</anchor>
      <arglist>(EDateFields field) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getActualMaximum</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>aa6dffa7c30b24613fa6762c715dc24ab</anchor>
      <arglist>(UCalendarDateFields field, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>aa9dcb25c2fefe715f33fad5e11075cd8</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ad692fc0734c8b0dd5af7cf8f403caa87</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getType</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a9d3dbbead3bf74c685b479e5115e514c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>haveDefaultCentury</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a777df4314a0e9266ee3fd20afcdb3218</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDate</type>
      <name>defaultCenturyStart</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a3c11c790997b4a7ef2009c9db5dfc7dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>defaultCenturyStartYear</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>ad308638658b0758dcdaaae57a3599a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a0f6db4c67cbe5b671aee4cb8934c3fd8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>internalGetEra</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>acad345a12f58ef31e2a7b275e0c3dd23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleComputeMonthStart</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a87badc27fdb6dc0638bc94864a4961d9</anchor>
      <arglist>(int32_t eyear, int32_t month, UBool useMonth) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleComputeJulianDay</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a59b86395575bf7784ffe1f2edac5b165</anchor>
      <arglist>(UCalendarDateFields bestField)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetMonthLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a05a03940641b2455a2875cbc31f386e9</anchor>
      <arglist>(int32_t extendedYear, int32_t month) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetYearLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a32772c0335d2440b8fcb4cf7569e9f84</anchor>
      <arglist>(int32_t eyear) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>monthLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a4d4fc48ebc080768c5850f95c7d6cff7</anchor>
      <arglist>(int32_t month) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>monthLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a2204aacfc59e4e74760e0aceaee38f62</anchor>
      <arglist>(int32_t month, int32_t year) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>yearLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a127be84d5a2d75ca5c7e382c59c97235</anchor>
      <arglist>(int32_t year) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>yearLength</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a256c2c34dd24f4c5def8bd97bedf80a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pinDayOfMonth</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>afc614bc74d3d9ce7272947b8e136d6ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UDate</type>
      <name>getEpochDay</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a87a5e98e6893195878c88371510c6a70</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetLimit</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a6075f0ad5bbe0cecd8283e45e93d482c</anchor>
      <arglist>(UCalendarDateFields field, ELimitType limitType) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetExtendedYear</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a9c8ef3f3ae56e41f52c7fd353348a09f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleGetExtendedYearFromWeekFields</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a9068000f1c22c0d27ab752e01cacf082</anchor>
      <arglist>(int32_t yearWoy, int32_t woy)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleComputeFields</name>
      <anchorfile>classGregorianCalendar.html</anchorfile>
      <anchor>a2f31b54f19ec8588cb1cfe1ade77eb07</anchor>
      <arglist>(int32_t julianDay, UErrorCode &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IDNA</name>
    <filename>classIDNA.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>labelToASCII</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>aaef1a26492d68398b95dbd14f1f1edb4</anchor>
      <arglist>(const UnicodeString &amp;label, UnicodeString &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>labelToUnicode</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>a82e90cc557f7640288df292137e8f654</anchor>
      <arglist>(const UnicodeString &amp;label, UnicodeString &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>nameToASCII</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>a8208300e4138a059ad8e3edce103ddfe</anchor>
      <arglist>(const UnicodeString &amp;name, UnicodeString &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>nameToUnicode</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>a7446df679555a96e0c966b114b91e895</anchor>
      <arglist>(const UnicodeString &amp;name, UnicodeString &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>labelToASCII_UTF8</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>a2091a4a4a7933c6ec4c727dbaa8e801b</anchor>
      <arglist>(const StringPiece &amp;label, ByteSink &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>labelToUnicodeUTF8</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>ac76652d2806dc19bc0da8e40eb709403</anchor>
      <arglist>(const StringPiece &amp;label, ByteSink &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nameToASCII_UTF8</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>af536bee8d1e0701c1354bcb2011ddc62</anchor>
      <arglist>(const StringPiece &amp;name, ByteSink &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nameToUnicodeUTF8</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>af46685d1a5bfd1da47cdd67d67a87f1a</anchor>
      <arglist>(const StringPiece &amp;name, ByteSink &amp;dest, IDNAInfo &amp;info, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IDNA *</type>
      <name>createUTS46Instance</name>
      <anchorfile>classIDNA.html</anchorfile>
      <anchor>adc7314a7b6ba20ad40204e5016de33a5</anchor>
      <arglist>(uint32_t options, UErrorCode &amp;errorCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IDNAInfo</name>
    <filename>classIDNAInfo.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>IDNAInfo</name>
      <anchorfile>classIDNAInfo.html</anchorfile>
      <anchor>aa431175d329828fba55cc5a94560e665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasErrors</name>
      <anchorfile>classIDNAInfo.html</anchorfile>
      <anchor>a6e82eae73e0f211f2bc9f217c57ba9f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getErrors</name>
      <anchorfile>classIDNAInfo.html</anchorfile>
      <anchor>acaae27d7b3c97a90e20bafba0df8b3c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isTransitionalDifferent</name>
      <anchorfile>classIDNAInfo.html</anchorfile>
      <anchor>ac99a5309b89bdabbd36e1f9ffdf6b4d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UTS46</name>
      <anchorfile>classIDNAInfo.html</anchorfile>
      <anchor>a68f8dcc0c70059589da1ad2f9a30de55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InitialTimeZoneRule</name>
    <filename>classInitialTimeZoneRule.html</filename>
    <base>TimeZoneRule</base>
    <member kind="function">
      <type></type>
      <name>InitialTimeZoneRule</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>add09552aaef5ad49f5c9c2145fad8359</anchor>
      <arglist>(const UnicodeString &amp;name, int32_t rawOffset, int32_t dstSavings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InitialTimeZoneRule</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>acd13c26f738db78c99c446c1ea00a2e7</anchor>
      <arglist>(const InitialTimeZoneRule &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InitialTimeZoneRule</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a4376fb40a4ae7ae86495085a693b923e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InitialTimeZoneRule *</type>
      <name>clone</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a8d6ded81ca57ac5ee02ba9e948b7b6d4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>InitialTimeZoneRule &amp;</type>
      <name>operator=</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a933dc93686293a02441f71c4ae786d19</anchor>
      <arglist>(const InitialTimeZoneRule &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>af1be5a28d084664bdc55448d5998729f</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>af1b9f97548b316474fce1715c9a1f859</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getStartInYear</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>afbf3ff14631ca1e778b0b706be1fc714</anchor>
      <arglist>(int32_t year, int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>af27da873e83f3943afeec053448c2283</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFirstStart</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>af21b772d1cc066f4cf41367525369dcb</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFinalStart</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a4c67e348c0f1dad357083f8d8ef61bd7</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextStart</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a127f54df991127d83b3a7653a5fd45f3</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousStart</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a8079595454978c350885b846c17f03d7</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a5070a1a2c6be7e47631e99967a15f4fe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classInitialTimeZoneRule.html</anchorfile>
      <anchor>a09f8451b1bc4473e7cf677a7185af7dd</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LayoutEngine</name>
    <filename>classLayoutEngine.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayoutEngine</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a9cb6f6edc66b0fc7df34ca09750459b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>layoutChars</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a5f18786782f4383d25f2d319e992ce0c</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_int32 max, le_bool rightToLeft, float x, float y, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getGlyphCount</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a35ca148be1817597d8a8449c066aa3d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a55e7ea6e89ba0f41718c6f343d0f0026</anchor>
      <arglist>(LEGlyphID glyphs[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>ae016b87b52e33daf23c23054408f53e6</anchor>
      <arglist>(le_uint32 glyphs[], le_uint32 extraBits, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCharIndices</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a43ded1a973722b0b4dc361ef6ba80a0f</anchor>
      <arglist>(le_int32 charIndices[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCharIndices</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>afdf0cff690c2c90efda698fc4848cd7c</anchor>
      <arglist>(le_int32 charIndices[], le_int32 indexBase, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a4af0b513b0187d7f7b09cffc93c2e66c</anchor>
      <arglist>(float positions[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPosition</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>aad69145083ea27c95c835662d6d1ac75</anchor>
      <arglist>(le_int32 glyphIndex, float &amp;x, float &amp;y, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a6732b79fdbe4221b613847e4b4f8780f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>ae221a54f672f0e7a1462d2c33935ea86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LayoutEngine *</type>
      <name>layoutEngineFactory</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>ac1c6ee98399910fc179ffd74477add18</anchor>
      <arglist>(const LEFontInstance *fontInstance, le_int32 scriptCode, le_int32 languageCode, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LayoutEngine *</type>
      <name>layoutEngineFactory</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a1b968876ec10972d66edfcf58b6ab103</anchor>
      <arglist>(const LEFontInstance *fontInstance, le_int32 scriptCode, le_int32 languageCode, le_int32 typo_flags, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>afb5f548783a7ea02e1944162a8014b1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const le_int32</type>
      <name>kTypoFlagKern</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>ad936a6ab91544466c509c6e48640122e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const le_int32</type>
      <name>kTypoFlagLiga</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a1f71f0af79c5b470aaed5abdbc696719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LayoutEngine</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a561ded2e32413cf1b4666b4242140902</anchor>
      <arglist>(const LEFontInstance *fontInstance, le_int32 scriptCode, le_int32 languageCode, le_int32 typoFlags, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LayoutEngine</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>ae149df76eb6771956c01ed6c7cba6d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>characterProcessing</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a9bc36adaea6bc7953eef955d9a29889b</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_int32 max, le_bool rightToLeft, LEUnicode *&amp;outChars, LEGlyphStorage &amp;glyphStorage, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>computeGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a0555af37c7c1d5e4dfeba0c6724f02e8</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_int32 max, le_bool rightToLeft, LEGlyphStorage &amp;glyphStorage, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>positionGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a2d78e005db15395bf20a9fd5c19246e7</anchor>
      <arglist>(LEGlyphStorage &amp;glyphStorage, float x, float y, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>adjustGlyphPositions</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a1b13cfd60781c887506b848e2a905490</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_bool reverse, LEGlyphStorage &amp;glyphStorage, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getFontTable</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>af0a35c0c69e8fbaf92300a60f7fbff75</anchor>
      <arglist>(LETag tableTag) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mapCharsToGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a298b698b3c730c286410014c745af9a9</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_bool reverse, le_bool mirror, LEGlyphStorage &amp;glyphStorage, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>adjustMarkGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a3729b640c996a45f510969ceb9a803b1</anchor>
      <arglist>(LEGlyphStorage &amp;glyphStorage, LEGlyphFilter *markFilter, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>adjustMarkGlyphs</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a097d008d225306db35b9e9dffe4b6ba7</anchor>
      <arglist>(const LEUnicode chars[], le_int32 charCount, le_bool reverse, LEGlyphStorage &amp;glyphStorage, LEGlyphFilter *markFilter, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LEGlyphStorage *</type>
      <name>fGlyphStorage</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>af143b52b77689d4402a9ca6a400f84d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LEFontInstance *</type>
      <name>fFontInstance</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a09445420f49f99a22773bce90419a4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>le_int32</type>
      <name>fScriptCode</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>aed10d9cec637cf12e36f11462dd6f36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>le_int32</type>
      <name>fLanguageCode</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a0460d81c3330be246b29ae41d788215b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>le_int32</type>
      <name>fTypoFlags</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>a458289a246aedacb18a5025802cb9666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>le_bool</type>
      <name>fFilterZeroWidth</name>
      <anchorfile>classLayoutEngine.html</anchorfile>
      <anchor>aa59dcfed5649c96d5e813ff5acbb0f74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LECharMapper</name>
    <filename>classLECharMapper.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LECharMapper</name>
      <anchorfile>classLECharMapper.html</anchorfile>
      <anchor>aa33a80a6f3612726e7c4a0441975565a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEUnicode32</type>
      <name>mapChar</name>
      <anchorfile>classLECharMapper.html</anchorfile>
      <anchor>a9bced2d7d41aacba12124228c58b5210</anchor>
      <arglist>(LEUnicode32 ch) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LEFontInstance</name>
    <filename>classLEFontInstance.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LEFontInstance</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>afff0147e7d59cd2d9e6c52b20e135dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const LEFontInstance *</type>
      <name>getSubFont</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ada40c86fd1aa1e90dd2c1fadce30d96e</anchor>
      <arglist>(const LEUnicode chars[], le_int32 *offset, le_int32 limit, le_int32 script, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>getFontTable</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>aaf1da7510c05deebcab885b4f351db33</anchor>
      <arglist>(LETag tableTag) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_bool</type>
      <name>canDisplay</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>aeda37f791b8772ea118055c5967a7c0d</anchor>
      <arglist>(LEUnicode32 ch) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual le_int32</type>
      <name>getUnitsPerEM</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a96ff76ba24e7b5e3a676a96522fd527e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mapCharsToGlyphs</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a40ae46572b1230e460801cc4245f20d6</anchor>
      <arglist>(const LEUnicode chars[], le_int32 offset, le_int32 count, le_bool reverse, const LECharMapper *mapper, le_bool filterZeroWidth, LEGlyphStorage &amp;glyphStorage) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LEGlyphID</type>
      <name>mapCharToGlyph</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>aee1e7102bf00f45880155f827a721791</anchor>
      <arglist>(LEUnicode32 ch, const LECharMapper *mapper, le_bool filterZeroWidth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LEGlyphID</type>
      <name>mapCharToGlyph</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a1a6594afdd3acba869187f35dc6efab1</anchor>
      <arglist>(LEUnicode32 ch, const LECharMapper *mapper) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LEGlyphID</type>
      <name>mapCharToGlyph</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a8842d891e5b920c10634e2991f8707b1</anchor>
      <arglist>(LEUnicode32 ch) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getGlyphAdvance</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a853c929a59964763742a7e6f4ad04416</anchor>
      <arglist>(LEGlyphID glyph, LEPoint &amp;advance) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual le_bool</type>
      <name>getGlyphPoint</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>adab675412aaabe611c06c3f662014149</anchor>
      <arglist>(LEGlyphID glyph, le_int32 pointNumber, LEPoint &amp;point) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getXPixelsPerEm</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a94d1438332f3085d74c7fb6ba352ddb2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getYPixelsPerEm</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a7adcf352e7e351a35a7117ada66cbaf6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>xUnitsToPoints</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>acd256413c31510a9bef99ede7952a866</anchor>
      <arglist>(float xUnits) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>yUnitsToPoints</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a3c0b3e39ba6061842cf3b64f6d2cc8d6</anchor>
      <arglist>(float yUnits) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unitsToPoints</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ab1e0cf2c5875a4d4710e7239b2a59694</anchor>
      <arglist>(LEPoint &amp;units, LEPoint &amp;points) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>xPixelsToUnits</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>abac7ba687628b13aafa25c63ff8907f7</anchor>
      <arglist>(float xPixels) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>yPixelsToUnits</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a21839c1d622f83399bd234f411a7ba67</anchor>
      <arglist>(float yPixels) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pixelsToUnits</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ac6dae22148f9284965758ac8f89cfb51</anchor>
      <arglist>(LEPoint &amp;pixels, LEPoint &amp;units) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getScaleFactorX</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a9cd2bee109659061d03a1e3524aa00eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getScaleFactorY</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a9ff93236e0520f32e7ab043bf069fba5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformFunits</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ae510517597d8178cd6ed40b2c99d0922</anchor>
      <arglist>(float xFunits, float yFunits, LEPoint &amp;pixels) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual le_int32</type>
      <name>getAscent</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ae998881f1c92d740d2508c34c5452d7e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual le_int32</type>
      <name>getDescent</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>aad3b9dbda9a15e478781aa033737da9e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual le_int32</type>
      <name>getLeading</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ad64ff3fc567404a2fb2bc79f2c254c00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>getLineHeight</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a7a1d0706e2ae0711332366ef1ddd8b19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>afab9ce47ba477ffaec2b20f5e160decb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>fixedToFloat</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>ae6c01ddc73d5f9dec656bc2845fdfd4b</anchor>
      <arglist>(le_int32 fixed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static le_int32</type>
      <name>floatToFixed</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a9102c10c6835d4007820f3e72ebf38cd</anchor>
      <arglist>(float theFloat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classLEFontInstance.html</anchorfile>
      <anchor>a1cfce60e1612095164b7e3d4920447b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LEGlyphStorage</name>
    <filename>classLEGlyphStorage.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>LEGlyphStorage</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a9abbaf74759172ef88462954716b7e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LEGlyphStorage</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a0179b30b5d17a3cd4fb0d3bcd961532f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getGlyphCount</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a149978b4c111189906c54b219b5c27a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphs</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a1e5ae09ec1390e13a40d7bcc7cffbf06</anchor>
      <arglist>(LEGlyphID glyphs[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphs</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>adce84973eae7497bcaeac05862c08eec</anchor>
      <arglist>(le_uint32 glyphs[], le_uint32 extraBits, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCharIndices</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>aba6259eb3b8b8e8dccf8d16fc7336aa5</anchor>
      <arglist>(le_int32 charIndices[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCharIndices</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>ae0044f33492ad7f6bcdebb91a4c3d908</anchor>
      <arglist>(le_int32 charIndices[], le_int32 indexBase, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPositions</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a17526069763f7836fe7ad0c4246bb923</anchor>
      <arglist>(float positions[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlyphPosition</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>ab1cded5c7ebd310d0a8e37b1b6f3401b</anchor>
      <arglist>(le_int32 glyphIndex, float &amp;x, float &amp;y, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateGlyphArray</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>ac589c2a2f5f6a3660f2f2d823045093a</anchor>
      <arglist>(le_int32 initialGlyphCount, le_bool rightToLeft, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>allocatePositions</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a8a7e2d2252e3ee78591129d6d693a7d4</anchor>
      <arglist>(LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>allocateAuxData</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a88dec0a3461a06947f8bbdf86802d9c7</anchor>
      <arglist>(LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAuxData</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a900f0284f9540fa7c3996695f25bb303</anchor>
      <arglist>(le_uint32 auxData[], LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>LEGlyphID</type>
      <name>getGlyphID</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a389a5929b3753e64c692dae10fc4010c</anchor>
      <arglist>(le_int32 glyphIndex, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getCharIndex</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>adf983299c3852f0ad5869fb2b55016de</anchor>
      <arglist>(le_int32 glyphIndex, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>le_uint32</type>
      <name>getAuxData</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>accb3fb243b19c89618b7854a49d44f42</anchor>
      <arglist>(le_int32 glyphIndex, LEErrorCode &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>LEGlyphID &amp;</type>
      <name>operator[]</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>ac0e5610aa6a206923ce6a39eac582649</anchor>
      <arglist>(le_int32 glyphIndex) const </arglist>
    </member>
    <member kind="function">
      <type>LEGlyphID *</type>
      <name>insertGlyphs</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a1bca6ea2d4656e06da7c665db2b1ef07</anchor>
      <arglist>(le_int32 atIndex, le_int32 insertCount, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>LEGlyphID *</type>
      <name>insertGlyphs</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a23c343f6b4aff992f1740f9119b9e9f5</anchor>
      <arglist>(le_int32 atIndex, le_int32 insertCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveGlyph</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>ae179e8dd1aa2e38d97ccccb04d6ebc5b</anchor>
      <arglist>(le_int32 fromPosition, le_int32 toPosition, le_uint32 marker)</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>applyInsertions</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a2057b358faed98cddea96fd6c2a23a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlyphID</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>acb0474cecfae8396fd3daab936187d88</anchor>
      <arglist>(le_int32 glyphIndex, LEGlyphID glyphID, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCharIndex</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a59a83e8b7610c754943460a5f112b4b6</anchor>
      <arglist>(le_int32 glyphIndex, le_int32 charIndex, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>acf5f875b9c036cab4012a2d9bdc993df</anchor>
      <arglist>(le_int32 glyphIndex, float x, float y, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustPosition</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a3ce76f642547f327959b0a06fda3e38c</anchor>
      <arglist>(le_int32 glyphIndex, float xAdjust, float yAdjust, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAuxData</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a43ee6fc4448bcab1e4e5eabfa7d2d7cb</anchor>
      <arglist>(le_int32 glyphIndex, le_uint32 auxData, LEErrorCode &amp;success)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptGlyphArray</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a478f13f3df662dc267c09cb8bfb437c5</anchor>
      <arglist>(LEGlyphStorage &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptCharIndicesArray</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>afbe13e52ef7af180ad57b02f0c8caa52</anchor>
      <arglist>(LEGlyphStorage &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptPositionArray</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a30eb6eaf638ad4500089fc8918e78b82</anchor>
      <arglist>(LEGlyphStorage &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptAuxDataArray</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a2bc75f96d51a70ef17138fe2e8931ae7</anchor>
      <arglist>(LEGlyphStorage &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptGlyphCount</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a1b4b92dd6b41fe5b170702518999b61e</anchor>
      <arglist>(LEGlyphStorage &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptGlyphCount</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a7bc9c15dcfb6458c091b4eb54858a40f</anchor>
      <arglist>(le_int32 newGlyphCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a01c89341c00c6525b74c6a2bafe24e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a3ecc2a752d6767d06abd3f7da826b3db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a3db494186bb6aecc02a4f33ce76f63f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual le_bool</type>
      <name>applyInsertion</name>
      <anchorfile>classLEGlyphStorage.html</anchorfile>
      <anchor>a5f3390d6a69d237d6fd723a0f781f400</anchor>
      <arglist>(le_int32 atPosition, le_int32 count, LEGlyphID newGlyphs[])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LEPoint</name>
    <filename>structLEPoint.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>fX</name>
      <anchorfile>structLEPoint.html</anchorfile>
      <anchor>aeeb4b31469883f6153b056bcf36afe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fY</name>
      <anchorfile>structLEPoint.html</anchorfile>
      <anchor>a12c91cba81cb2e56c4cfae0bd4f728d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LESwaps</name>
    <filename>classLESwaps.html</filename>
    <member kind="function" static="yes">
      <type>static le_uint16</type>
      <name>swapWord</name>
      <anchorfile>classLESwaps.html</anchorfile>
      <anchor>a7f7f533cacc395454739694b4e6a6e9e</anchor>
      <arglist>(le_uint16 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static le_uint32</type>
      <name>swapLong</name>
      <anchorfile>classLESwaps.html</anchorfile>
      <anchor>a9c171efa2037bcb97749271e93a956d0</anchor>
      <arglist>(le_uint32 value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Locale</name>
    <filename>classLocale.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>Locale</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a599d7bb7a08b138cb069e39987846b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Locale</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a2e847ff3c5df01b077293a30347bac11</anchor>
      <arglist>(const char *language, const char *country=0, const char *variant=0, const char *keywordsAndValues=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Locale</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ab7a2e36b993dfec56609f03348309172</anchor>
      <arglist>(const Locale &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Locale</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a69855afaa3627ce0003ca5e5946af10e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Locale &amp;</type>
      <name>operator=</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1ba398b2e0c47460cbe953ce82510139</anchor>
      <arglist>(const Locale &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>abba7de6311743eb2e42757dca2f89a27</anchor>
      <arglist>(const Locale &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a15114dcd2b70f2c98cc066e5ac83e62c</anchor>
      <arglist>(const Locale &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Locale *</type>
      <name>clone</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a3e4841a11d0f945669123a48af44a477</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLanguage</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a7c0e53c666ea52387d0edae91f75c94f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getScript</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a73e3fa1ce9df00989f59568cfb1fabed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCountry</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a07f8f74b134a356feaa9c5df102f29fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVariant</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>affc1e557e947797dbe414e58618e5e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a726741607239836d69022bf08e56f0ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseName</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a4687fb0906f86cdb82862df48fef035d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringEnumeration *</type>
      <name>createKeywords</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a4556eca1c4de3f08247d191aa15c51b9</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getKeywordValue</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>afd5dc6a5db78d87dad58e5423bbff0d9</anchor>
      <arglist>(const char *keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeywordValue</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a46d70d5e05ce686a984419555f308bfe</anchor>
      <arglist>(const char *keywordName, const char *keywordValue, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getISO3Language</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a25b8aa4568ab78a0509c8dd50d468947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getISO3Country</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a789b65b00263ba8c0b44ec7d4477f8fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getLCID</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a8f91b5cc02e8ed0f4cf0fc68bc492ae1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayLanguage</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a22ce8294a54735899bbcce3f8ad93eaf</anchor>
      <arglist>(UnicodeString &amp;dispLang) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayLanguage</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a91528f7de691ea382f7f8136bf99d8bd</anchor>
      <arglist>(const Locale &amp;displayLocale, UnicodeString &amp;dispLang) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayScript</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ab5440507507d2ab902255bccf43fec5f</anchor>
      <arglist>(UnicodeString &amp;dispScript) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayScript</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a567c4ea4a034c51b5c7bc2d5e6d1540f</anchor>
      <arglist>(const Locale &amp;displayLocale, UnicodeString &amp;dispScript) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayCountry</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ab7ea1acf0c4f58907598a9f87d44fb80</anchor>
      <arglist>(UnicodeString &amp;dispCountry) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayCountry</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a132301e5f4cdf819f5d4b8c3fd291183</anchor>
      <arglist>(const Locale &amp;displayLocale, UnicodeString &amp;dispCountry) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayVariant</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>afc45c6c509062b7f59b064835b55f6ec</anchor>
      <arglist>(UnicodeString &amp;dispVar) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayVariant</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a01bab29e4cbdc284b5ea8f166aabc457</anchor>
      <arglist>(const Locale &amp;displayLocale, UnicodeString &amp;dispVar) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>abf9e7097a9cc828b346e61c47e5e23c5</anchor>
      <arglist>(UnicodeString &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1935ea040dab51999196c0bf89e87d99</anchor>
      <arglist>(const Locale &amp;displayLocale, UnicodeString &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a664433180261f7b97a7a1a83ca3dfe78</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToBogus</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a4cb8b5e11ac02fedc83e9b23bfc5da70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isBogus</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ac671e591506f640ac36b5943230aeb18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a51d7b4c7c203e7155c30b77b83d57b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getRoot</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a9a98e06677ca89823ae88d2074c4d3c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getEnglish</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a669ca7c4ef168a75879bc2e847f151dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getFrench</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ac4577a88016e7111bd37906c136951c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getGerman</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a018ee898b7223c3b4cb3385d0f10464d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getItalian</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1154bcf5b170d721ac8e27f8fb046b8a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getJapanese</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a2131962c82b059c01da36c83de5a18aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getKorean</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ad3dc36f22bc5ef5b0fdaff1f49778b50</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getChinese</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>aeebb4e210cc2b9ea2c25a6607638ed82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getSimplifiedChinese</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1467301723a35cf6f42b0b8b47ed2dc5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getTraditionalChinese</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>afdeffb5b588d1d904e0c334b60251526</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getFrance</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>aa19e5f0ac81c6c7fd9c13d7515608ebd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getGermany</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1941bac04cee2957c063faabf6229218</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getItaly</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a83bc889adad165fb39305cf8364bb8e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getJapan</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ae8adc716e1c2a97d7dae249f1c37d8ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getKorea</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ad8ae6bb28603e762ed92055c1eaf220c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getChina</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a090facf0b2391acb387bfc2688d11686</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getPRC</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a0bdc02e24d87f235050844cd60b5eeb7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getTaiwan</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a63fbbe90140d5629c499eae70e4ee895</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getUK</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ac0738001843d2866f11031b4585c7a9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getUS</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>aee507186038b3331bc060fbd85f52af3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getCanada</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a2b10656562a9c819246eb3d6fc1be8b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getCanadaFrench</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a1625cc4f478e9e764d3e3f232029e18b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale &amp;</type>
      <name>getDefault</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ac12d6326f2d283f5643f6b6caacfe88c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefault</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a8577dcfe0faaf6eecff618c28146456c</anchor>
      <arglist>(const Locale &amp;newLocale, UErrorCode &amp;success)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Locale</type>
      <name>createFromName</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a8cea92e79f965ef653cd85059581f9ac</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Locale</type>
      <name>createCanonical</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a7b6db0c7bc1a07607ded0e8fd3adf8f6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>abfddb5ad335e43c8a3c24a37014b1429</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *const *</type>
      <name>getISOCountries</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a345746448f2df515629586db8fb7dd46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *const *</type>
      <name>getISOLanguages</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a56822f6e1ba6371254ec55554d2f6546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>ad2ab98c38e3f6795a627631fec207061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFromPOSIXID</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a132087eb22e087955c977a6c39bd79bb</anchor>
      <arglist>(const char *posixID)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>locale_set_default_internal</name>
      <anchorfile>classLocale.html</anchorfile>
      <anchor>a0982d59a0bbc49100ca15e64674e3d44</anchor>
      <arglist>(const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocaleDisplayNames</name>
    <filename>classLocaleDisplayNames.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocaleDisplayNames</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a907375bb3d2909ab26f9e418be5b4135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Locale &amp;</type>
      <name>getLocale</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a2b5c09d721dc20b899e88da5530656ba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UDialectHandling</type>
      <name>getDialectHandling</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>aa7be4db71ff7339dc2c00756a0a5c652</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>localeDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a3732764e0b5d2ac968aa841c68b51718</anchor>
      <arglist>(const Locale &amp;locale, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>localeDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a4366f3c781cc5ab240aae411775d14f2</anchor>
      <arglist>(const char *localeId, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>languageDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a0cc2ee2abd57d82277604625b479ddd1</anchor>
      <arglist>(const char *lang, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>scriptDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>af420c25e78d149d71bf664f47845b03a</anchor>
      <arglist>(const char *script, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>scriptDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a9e7ce1289c22d763cf508c958015a74c</anchor>
      <arglist>(UScriptCode scriptCode, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>regionDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a90e1aa34717eb62e75f19aee647ee0c0</anchor>
      <arglist>(const char *region, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>variantDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a8dd94423666e80aca64e570891bc9023</anchor>
      <arglist>(const char *variant, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>keyDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>a35ddd7e8c23cc73149ded396787935e6</anchor>
      <arglist>(const char *key, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>keyValueDisplayName</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>af0f14ddb91fbdac6aa3dec3ed9060618</anchor>
      <arglist>(const char *key, const char *value, UnicodeString &amp;result) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocaleDisplayNames *</type>
      <name>createInstance</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>ae19434e3d5619c51ff6fdc8ce65e739c</anchor>
      <arglist>(const Locale &amp;locale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocaleDisplayNames *</type>
      <name>createInstance</name>
      <anchorfile>classLocaleDisplayNames.html</anchorfile>
      <anchor>af3ed996c7e638898ae91fa062d224802</anchor>
      <arglist>(const Locale &amp;locale, UDialectHandling dialectHandling)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocaleRuns</name>
    <filename>classLocaleRuns.html</filename>
    <base>RunArray</base>
    <member kind="function">
      <type></type>
      <name>LocaleRuns</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>a8282fa6174a3891270703ddb4c54da6c</anchor>
      <arglist>(const Locale **locales, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocaleRuns</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>af6375d0eb7bb76da6f6f7e3b44ec0538</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocaleRuns</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>acbd03fe28b1de8c48fec0529d30e3a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale *</type>
      <name>getLocale</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>a9151f9c8003f364ee43e783be5121363</anchor>
      <arglist>(le_int32 run) const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>add</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>a6112a3fb134a6c902d8adab0979054f4</anchor>
      <arglist>(const Locale *locale, le_int32 limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>a6bda9996d279606a34deca94b171eb3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>a52edcaca01912fae1acf10599b392fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>ac1f490b06fabd89568a68afce43e758c</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>grow</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>aba460e67106115f688bae111d2cf39ca</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Locale **</type>
      <name>fLocales</name>
      <anchorfile>classLocaleRuns.html</anchorfile>
      <anchor>adcaeedc7587924add095b31165c3a7fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Measure</name>
    <filename>classMeasure.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>Measure</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a46a388e186c1f6f60ad39202ad2ac2ef</anchor>
      <arglist>(const Formattable &amp;number, MeasureUnit *adoptedUnit, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Measure</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a6860501b4d4b500d019877473ff0ad61</anchor>
      <arglist>(const Measure &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Measure &amp;</type>
      <name>operator=</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a94221e3ffde5706e1f28e0a558f34981</anchor>
      <arglist>(const Measure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>abc87db8d55945660b2ea2cd3d0713b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Measure</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a6af10081ceb2f0850e74aec7202669a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a43d8a81cfbbda7c050b7c4c38732c94d</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Formattable &amp;</type>
      <name>getNumber</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>a2935701319d4d7b2219d22130849e3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MeasureUnit &amp;</type>
      <name>getUnit</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>aca10f62e4a418373e4b1e58e39637d0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Measure</name>
      <anchorfile>classMeasure.html</anchorfile>
      <anchor>ab55c93d6121f43c91a337fb7bcd26825</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeasureFormat</name>
    <filename>classMeasureFormat.html</filename>
    <base>Format</base>
    <member kind="function" static="yes">
      <type>static MeasureFormat *</type>
      <name>createCurrencyFormat</name>
      <anchorfile>classMeasureFormat.html</anchorfile>
      <anchor>aceae6f6525274bbaed65fdb9872cab76</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MeasureFormat *</type>
      <name>createCurrencyFormat</name>
      <anchorfile>classMeasureFormat.html</anchorfile>
      <anchor>ae76ddcd000577c969f3e67ab5beac1f4</anchor>
      <arglist>(UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeasureFormat</name>
      <anchorfile>classMeasureFormat.html</anchorfile>
      <anchor>a95981b0d0d089e4371c0d6214d2e2910</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeasureUnit</name>
    <filename>classMeasureUnit.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classMeasureUnit.html</anchorfile>
      <anchor>aa1c4cd664e1d12efa53fa3c3c861e49b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MeasureUnit</name>
      <anchorfile>classMeasureUnit.html</anchorfile>
      <anchor>a64cb6aaa83fc232f69e1364a0fdf5fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classMeasureUnit.html</anchorfile>
      <anchor>a27a18f5d47424baa33927256d788d6bd</anchor>
      <arglist>(const UObject &amp;other) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MeasureUnit</name>
      <anchorfile>classMeasureUnit.html</anchorfile>
      <anchor>a8d18e2ae52ec68b7a14a78635ad5e972</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageFormat</name>
    <filename>classMessageFormat.html</filename>
    <base>Format</base>
    <class kind="class">MessageFormat::DummyFormat</class>
    <class kind="class">MessageFormat::PluralSelectorProvider</class>
    <member kind="enumeration">
      <name>EFormatNumber</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a3b02759e9345bba433598ca169fe2626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kMaxFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a3b02759e9345bba433598ca169fe2626a2c4649766d55fba1106595c70fab6a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a9bd166332a223bf4f626bd4a23826da2</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a09d0a688a0017c803eb903b5956de3a0</anchor>
      <arglist>(const UnicodeString &amp;pattern, const Locale &amp;newLocale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>adf000f6a8019f6e9999d3df283688843</anchor>
      <arglist>(const UnicodeString &amp;pattern, const Locale &amp;newLocale, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a945eac8450aca382e2db73b7c3187249</anchor>
      <arglist>(const MessageFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const MessageFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a48e4814289b48723b11e7cd00df0be69</anchor>
      <arglist>(const MessageFormat &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a37bc94ae7e3622880f9f79d58320796b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>abe6a3b6d9e7e74b7586b4644e4ba001c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a26e0c92e8035193f110b578381611c02</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocale</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a5d403deba6c059ebd752d964ad49a7c1</anchor>
      <arglist>(const Locale &amp;theLocale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Locale &amp;</type>
      <name>getLocale</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a422910b60d0e79cf37afa8a49418333b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ace3d4f8c18ba0b07aada0066efb9ab9d</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ad5e44f1a945520eefade9b60350a3327</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a6f53ab45c150a4a8b420d5af766f6da6</anchor>
      <arglist>(const UnicodeString &amp;pattern, UMessagePatternApostropheMode aposMode, UParseError *parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UMessagePatternApostropheMode</type>
      <name>getApostropheMode</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ad9115365d575c42997d3724e99f22f31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a96ffcd9c8df9b1a4b9bf604faa51eef2</anchor>
      <arglist>(UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptFormats</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a4322393c6960d0abbecb97e2d5db7032</anchor>
      <arglist>(Format **formatsToAdopt, int32_t count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormats</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a7d51d28b509a3d1365b250be805556a8</anchor>
      <arglist>(const Format **newFormats, int32_t cnt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a96f9fb97e9bc525197b39222aba74bcc</anchor>
      <arglist>(int32_t formatNumber, Format *formatToAdopt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a16530e29c89c9a569d973b0e5f0fc598</anchor>
      <arglist>(int32_t formatNumber, const Format &amp;format)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringEnumeration *</type>
      <name>getFormatNames</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a4767de0a57c55c404db332be67edb73e</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>getFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>aaa4cef286b4f4f5845ed783e079ad96b</anchor>
      <arglist>(const UnicodeString &amp;formatName, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a781ee11f6a1512717b670b6e0db229d9</anchor>
      <arglist>(const UnicodeString &amp;formatName, const Format &amp;format, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptFormat</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ab1f5fd9a8e07a97020fe8618fed368b4</anchor>
      <arglist>(const UnicodeString &amp;formatName, Format *formatToAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Format **</type>
      <name>getFormats</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ae6fab4bde713f7c17f12c8a6dc9ce89b</anchor>
      <arglist>(int32_t &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ac984e47d8f99db7f623bd60f856f8666</anchor>
      <arglist>(const Formattable *source, int32_t count, UnicodeString &amp;appendTo, FieldPosition &amp;ignore, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a427aef9177f57f8c1fd37c3a3d157437</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a7e78ae8192e0889a196b0b4ae86a3a6a</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a8fd632cd6603981f64301fca9bb15eec</anchor>
      <arglist>(const UnicodeString *argumentNames, const Formattable *arguments, int32_t count, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Formattable *</type>
      <name>parse</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ad9f1ebf28e194700db6fef7c16009ea5</anchor>
      <arglist>(const UnicodeString &amp;source, ParsePosition &amp;pos, int32_t &amp;count) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Formattable *</type>
      <name>parse</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>ac4eeb461355c2d0f7c5a76c1d640eefd</anchor>
      <arglist>(const UnicodeString &amp;source, int32_t &amp;count, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a53732066584f68579adf8bf91409217c</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>usesNamedArguments</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a40b7cb584ce76b7bc3be2289a48c9f96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getArgTypeCount</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a6e9db2c78e0488dd78130dc4eb6fe81a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a10a58c0715cac006dd4d05f1f1ad6eb2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a44ac6c9d28fcc101ba8cfce3e9230871</anchor>
      <arglist>(const UnicodeString &amp;pattern, const Formattable *arguments, int32_t count, UnicodeString &amp;appendTo, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString</type>
      <name>autoQuoteApostrophe</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a1649c7540f4789dbc2fd43bb251e3dd8</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>aabdeb33d4de48799fe111a337d0684c6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>equalFormats</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a3afa5acf20ca6101ac4cab0c55e243e6</anchor>
      <arglist>(const void *left, const void *right)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MessageFormatAdapter</name>
      <anchorfile>classMessageFormat.html</anchorfile>
      <anchor>a633236b616d8e67ea32f83ed52132aae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessagePattern</name>
    <filename>classMessagePattern.html</filename>
    <base>UObject</base>
    <class kind="class">MessagePattern::Part</class>
    <member kind="function">
      <type></type>
      <name>MessagePattern</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a0d6cb3ce4c9d415ede89e35bb83a59bc</anchor>
      <arglist>(UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessagePattern</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>ae3a302b69f850b35b497262d9fde21d9</anchor>
      <arglist>(UMessagePatternApostropheMode mode, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessagePattern</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a6c70dbbb309ec66009c79fae77b9be6e</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError *parseError, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessagePattern</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a75916d924177cad1a9890d343fa92157</anchor>
      <arglist>(const MessagePattern &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MessagePattern &amp;</type>
      <name>operator=</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a51f421a4996d6ac024e02ee49ef198ff</anchor>
      <arglist>(const MessagePattern &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessagePattern</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a2138aba9f1b9ae26373a7850e46778d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MessagePattern &amp;</type>
      <name>parse</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a335d02b6310505e1bc7f5b58808a7928</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError *parseError, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>MessagePattern &amp;</type>
      <name>parseChoiceStyle</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a977a30b8a0cee54a06bc54d2b75bc91c</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError *parseError, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>MessagePattern &amp;</type>
      <name>parsePluralStyle</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a457d759f6a0fd50867d86b381d7d389f</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError *parseError, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>MessagePattern &amp;</type>
      <name>parseSelectStyle</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>aa4c9b3078d2a746dfec49ff0481cc08a</anchor>
      <arglist>(const UnicodeString &amp;pattern, UParseError *parseError, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>aa3ac2088e388cdb69eaa0f4e4ebf7a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPatternAndSetApostropheMode</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a0c172d707bc68d862e4f832f72be879c</anchor>
      <arglist>(UMessagePatternApostropheMode mode)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a5b74650cfd031b2fefe73b6b86081054</anchor>
      <arglist>(const MessagePattern &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>aca2407d95b1c40170232693635807bae</anchor>
      <arglist>(const MessagePattern &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a79ba8dc994cd829ac507f05c27217002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UMessagePatternApostropheMode</type>
      <name>getApostropheMode</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a92def3fb9e52e86c73d2f275a9a7e5c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getPatternString</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a26d664e478ec9e6a4f222fb988049195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasNamedArguments</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a8be98b81835df3b21473414d8ac50203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasNumberedArguments</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>ad8fc15c49b8a85971ae01c6294c443bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>autoQuoteApostropheDeep</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a53cfd9e0ef622fcfce8072655eb9111a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>countParts</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a86b10d7c0844433cf6e9450d4abd3760</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Part &amp;</type>
      <name>getPart</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>acc6f5d3c29e84d3f0c1b1978def5a31c</anchor>
      <arglist>(int32_t i) const </arglist>
    </member>
    <member kind="function">
      <type>UMessagePatternPartType</type>
      <name>getPartType</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a390e96e08ad0d843a0b220d6bec9523d</anchor>
      <arglist>(int32_t i) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getPatternIndex</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a77a1748b2263e7ca476ca7d7a5752a6b</anchor>
      <arglist>(int32_t partIndex) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getSubstring</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>ae083600656e59ceb8448289cc731b424</anchor>
      <arglist>(const Part &amp;part) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>partSubstringMatches</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a763ac8f581361970b9c017c24e4ffa6d</anchor>
      <arglist>(const Part &amp;part, const UnicodeString &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNumericValue</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>ab90c71f5e0ec9383e50b263d3b8124c1</anchor>
      <arglist>(const Part &amp;part) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPluralOffset</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a088b99a63efe279e9f0b36c2cfbdfba8</anchor>
      <arglist>(int32_t pluralStart) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLimitPartIndex</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a107362faf70ad2f014bbc12fc25f6273</anchor>
      <arglist>(int32_t start) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>validateArgumentName</name>
      <anchorfile>classMessagePattern.html</anchorfile>
      <anchor>a93fcae9851f3d953cf7c57d3d2592ae7</anchor>
      <arglist>(const UnicodeString &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessagePattern::Part</name>
    <filename>classMessagePattern_1_1Part.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>Part</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a448cbdf8729483bbaa2bf5e872c98e9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UMessagePatternPartType</type>
      <name>getType</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a04eb93e8b33dae2d9af5670d7f51b02c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getIndex</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a4bb7151f028911652015bfa1e87600e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLength</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>ad513b9c366fa2b379363a55471b99807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getLimit</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a981b5e4867e8fce8dbbd5f97cf41de4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>ad405faad1cca533c5580855244fcca8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UMessagePatternArgType</type>
      <name>getArgType</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>ac898a506a5e364e212b217d424c70bca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a711bd067b5233ed0bb58fe3e0f4fc32a</anchor>
      <arglist>(const Part &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a315d6ba0b2e500e7db936d2e7d2e849e</anchor>
      <arglist>(const Part &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a052ad8a4c35fe47dfe7fdaa1470dd584</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>hasNumericValue</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>ae9dffe2c869a346dd5f27e2aefc45a80</anchor>
      <arglist>(UMessagePatternPartType type)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MessagePattern</name>
      <anchorfile>classMessagePattern_1_1Part.html</anchorfile>
      <anchor>a0057a7fab986c3e78aa8e9ab3d7d84e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Normalizer</name>
    <filename>classNormalizer.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a0b6ffd5bfbee08ea15c8b6e0172aa94e</anchor>
      <arglist>(const UnicodeString &amp;str, UNormalizationMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>acae409824a7f7367cf7e386a9c305040</anchor>
      <arglist>(const UChar *str, int32_t length, UNormalizationMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a65be33d11209ae6cf883619d75f469f8</anchor>
      <arglist>(const CharacterIterator &amp;iter, UNormalizationMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Normalizer</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>ac5ef4c7ee5d83fdb8d8cdb7dc05be9df</anchor>
      <arglist>(const Normalizer &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Normalizer</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a7ed2589076b762a7de100c3d1e566a1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>current</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>ad88243d70c16ceacda0e93e15e2c33c4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>first</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a633d6afcdb3f188ca08cc50638de61c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>last</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a5e328ba64bbfb300775c8792fa198f39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>next</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>ad7125bdd961b05a270316754bc8edca9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>previous</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>af9fd130c84e97f04c78844f4474308b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexOnly</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a3c8e33df967e2a30c6e841df988b5756</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a169f53c104e9c24d76a2176618aa9fda</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getIndex</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a2fd3f751bb5608b2465ff8260dcb1db1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>startIndex</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>afd366dd2a0ed79bf7590f20a2226c47b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>endIndex</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a1211752623804c1410665839f0e475b3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a289ed61d6dcea6992bf066516b04b757</anchor>
      <arglist>(const Normalizer &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a0c8c7519c75c5815c43634da7e1428cf</anchor>
      <arglist>(const Normalizer &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>Normalizer *</type>
      <name>clone</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a568f2be5986469c195339b4ddf07ce98</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a74f87ddd06ee86c07b64c833d0fa31c2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a966e9f989a74c5e807256f2b9438a266</anchor>
      <arglist>(UNormalizationMode newMode)</arglist>
    </member>
    <member kind="function">
      <type>UNormalizationMode</type>
      <name>getUMode</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a9d09bd43f69dc849a6616ba48996e39e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a1585e4ac5f8412162aede93932c3b190</anchor>
      <arglist>(int32_t option, UBool value)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getOption</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a8960c192a905285e203dd05e3900d823</anchor>
      <arglist>(int32_t option) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a1d5afd752479fbcb341e7c1ae37e34dc</anchor>
      <arglist>(const UnicodeString &amp;newText, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a392a18c5358e9fc96a82e79d30b9a7ef</anchor>
      <arglist>(const CharacterIterator &amp;newText, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a10994a8cedef933ce425beb8cde57959</anchor>
      <arglist>(const UChar *newText, int32_t length, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getText</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a76a7a2b7d5e69118e2e3eead4aa1b82b</anchor>
      <arglist>(UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a29c07571c8bafb7ae336476a83c7da92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>normalize</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a5124e290d18f51ed622ea073f313ea9a</anchor>
      <arglist>(const UnicodeString &amp;source, UNormalizationMode mode, int32_t options, UnicodeString &amp;result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compose</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a78b642fa070b8e5d221bb24706d459d4</anchor>
      <arglist>(const UnicodeString &amp;source, UBool compat, int32_t options, UnicodeString &amp;result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decompose</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>acc54e690cc10c327850e7bc60c3e8999</anchor>
      <arglist>(const UnicodeString &amp;source, UBool compat, int32_t options, UnicodeString &amp;result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UNormalizationCheckResult</type>
      <name>quickCheck</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a115443fa15231058506585d937d392bd</anchor>
      <arglist>(const UnicodeString &amp;source, UNormalizationMode mode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UNormalizationCheckResult</type>
      <name>quickCheck</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>ac96bb56ed31ebbb80a6483f002f8fd96</anchor>
      <arglist>(const UnicodeString &amp;source, UNormalizationMode mode, int32_t options, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>isNormalized</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a63e55029e76459caff76fab6b44f0941</anchor>
      <arglist>(const UnicodeString &amp;src, UNormalizationMode mode, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>isNormalized</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a2b68ba2a6135393c4845a2939fe24926</anchor>
      <arglist>(const UnicodeString &amp;src, UNormalizationMode mode, int32_t options, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>concatenate</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>a14d23ce2d34f95ed56109eeb8d9a1ac5</anchor>
      <arglist>(const UnicodeString &amp;left, const UnicodeString &amp;right, UnicodeString &amp;result, UNormalizationMode mode, int32_t options, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>compare</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>ac6f0a455515325bb67eb8139453690ae</anchor>
      <arglist>(const UnicodeString &amp;s1, const UnicodeString &amp;s2, uint32_t options, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classNormalizer.html</anchorfile>
      <anchor>af45d523abc650a357abca05368d651a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Normalizer2</name>
    <filename>classNormalizer2.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type>UnicodeString</type>
      <name>normalize</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>a51ac0536e77f3a23d43454be9cc08d45</anchor>
      <arglist>(const UnicodeString &amp;src, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>normalize</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>aaccb79cc4e5890a21ceab5e48bfcfa6a</anchor>
      <arglist>(const UnicodeString &amp;src, UnicodeString &amp;dest, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>normalizeSecondAndAppend</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>afd8dcff9a734a907ffcad911b1aecdaf</anchor>
      <arglist>(UnicodeString &amp;first, const UnicodeString &amp;second, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>aa701f5025a1fd268a849f22a6b3a0b7e</anchor>
      <arglist>(UnicodeString &amp;first, const UnicodeString &amp;second, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getDecomposition</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>af716c547ab2fe04cf3a2aa9222f10117</anchor>
      <arglist>(UChar32 c, UnicodeString &amp;decomposition) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>isNormalized</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>a37ef8fa354316a07e61791a681f3ae6d</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UNormalizationCheckResult</type>
      <name>quickCheck</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>a6d001fa00896a75435554fd517e17125</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>spanQuickCheckYes</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>a6c433aa0b90828674a77842af7f05af6</anchor>
      <arglist>(const UnicodeString &amp;s, UErrorCode &amp;errorCode) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>hasBoundaryBefore</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>ab7e005b753513353f4b9089aced11843</anchor>
      <arglist>(UChar32 c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>hasBoundaryAfter</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>abc2f36a74414d2ef25a4d9cb7cd91b64</anchor>
      <arglist>(UChar32 c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>isInert</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>abd3325b2bbd179697a9d7b86f7f409f1</anchor>
      <arglist>(UChar32 c) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Normalizer2 *</type>
      <name>getInstance</name>
      <anchorfile>classNormalizer2.html</anchorfile>
      <anchor>a5f4be1fb35f18125aea3e3e83373a35f</anchor>
      <arglist>(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &amp;errorCode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberFormat</name>
    <filename>classNumberFormat.html</filename>
    <base>Format</base>
    <member kind="enumeration">
      <name>EAlignmentFields</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aac1d8bfe4ccd2cdf6fa1a933b2df75a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTEGER_FIELD</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aac1d8bfe4ccd2cdf6fa1a933b2df75a1a193401497626cb3ca7f4f9baabe1c123</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NumberFormat</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ab9364f134c85197678bdb68352f2ee15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a97f4f81efd4747024deaf88ceb4d80a3</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a53e27d424735198566d90eb30401ec36</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a6a5fcafaeefe33a9c8326e3b6eb8aa55</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aae2d85a1f97ae55faf249a4a0f429976</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ad0d0bf658489e6a530a6c7716ef44320</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aaa05c67fc637d9127756d854581a17fc</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>acfd48a8b10451ea0dd4fcc3cfb121b4b</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a7078d52baaa94ddf6e0680a4bc2f542a</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a2e24260eda61044d532a577f0f711e7a</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>acaaca11795df052b165e82261b7825f1</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a917ebc57480c4244941f7750356e7596</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ac64ccd4841f822f601f2533e63e0592b</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a1879e7057949f13eb626eafc4d184c1f</anchor>
      <arglist>(int64_t number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a96cdaf515b3b3ea1d2fa685f97b4b53e</anchor>
      <arglist>(const StringPiece &amp;number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a692963dfb668c207add70f31da4dd77e</anchor>
      <arglist>(const DigitList &amp;number, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a3f66a13580f2e17ace127cd13956a2c7</anchor>
      <arglist>(const DigitList &amp;number, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a67d754f52d336d911454e97ba32654de</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ab2c59c0b036a413b6735c6d50b88ae25</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;parsePosition) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a01ac6e0a7a47b2d8e387752d1a024b29</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Formattable &amp;</type>
      <name>parseCurrency</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a08bffcf90d1cc63882ab686b6b271f9b</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isParseIntegerOnly</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a680f60d204c0d00bb06f65d7c3ea716a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setParseIntegerOnly</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ac9b8eb834f6d18a61661cff71b954e52</anchor>
      <arglist>(UBool value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLenient</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>adfb0a84956f62cd02988497a2d4f714b</anchor>
      <arglist>(UBool enable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isLenient</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a20de95cba4112b8479f05762448bb090</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isGroupingUsed</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a6fe9bf9d863b9c85ba8f61699e2bbd5b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGroupingUsed</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a42f1ff1c899ec393a87ef24cfdfdd0a1</anchor>
      <arglist>(UBool newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaximumIntegerDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a1b06a7feabb695be2e5f16a60a377cf3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumIntegerDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a561c13b71c338e6b68729c786d2a3a09</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMinimumIntegerDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aa821c67615bf12bf1e8f1157108f6ad0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinimumIntegerDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a92a1454c564b66707d0145a123f65cf3</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaximumFractionDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ae2d2e103f14b46234f6dc90125c98eb1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMaximumFractionDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>abb97d22c2d628aab87d695c6f66e8dbb</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMinimumFractionDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a11eb09d7b8f01e40766898f4614598a2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMinimumFractionDigits</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a454c39db13cb0dde930e9249ee726db5</anchor>
      <arglist>(int32_t newValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCurrency</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a1dbc762d377858e70de924aacc59d113</anchor>
      <arglist>(const UChar *theCurrency, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getCurrency</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>acc485325edc696f35f73cbdad75eed59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a63c193a4db6a1552073bf069d5d31749</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a2483fa1e87f3600395ff0c8f364f7b6f</anchor>
      <arglist>(UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a3aa6fc5e68d9d646998dbf8c91b939e2</anchor>
      <arglist>(const Locale &amp;inLocale, UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a7ea47195c3dd1b92e769e2cb295505f3</anchor>
      <arglist>(const Locale &amp;desiredLocale, UNumberFormatStyle style, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createCurrencyInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a0c5d7b55f149281ed063e6bf631e1433</anchor>
      <arglist>(UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createCurrencyInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aafc5e5013c7ff22c53195bc30e63b845</anchor>
      <arglist>(const Locale &amp;inLocale, UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createPercentInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a033f486287d03fc07ccf422992a3e894</anchor>
      <arglist>(UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createPercentInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ac0b6f6d8fc351a0aad06910dfe043f91</anchor>
      <arglist>(const Locale &amp;inLocale, UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createScientificInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aed63bba10230ae92fc98f50031eadf75</anchor>
      <arglist>(UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberFormat *</type>
      <name>createScientificInstance</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aa26a23ba85c6dac9b8f429d1fe7d695f</anchor>
      <arglist>(const Locale &amp;inLocale, UErrorCode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Locale *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a8f18e4922ee902adabdd355311fd11ae</anchor>
      <arglist>(int32_t &amp;count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static URegistryKey</type>
      <name>registerFactory</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a83e8d5a07d0b2c1444c051ab442e6c3e</anchor>
      <arglist>(NumberFormatFactory *toAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>unregister</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ab6ecd9973fd855a9028af8cadbf0a4c3</anchor>
      <arglist>(URegistryKey key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableLocales</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a29addeb994249b22539ef1659d4017c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>acfeb8972959e9383b026761d0e9e1e5e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumberFormat</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a456d960b53c9f61acbf443f5fd56e7dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumberFormat</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>aabbf4f0a039756b6ba100aadc7cede99</anchor>
      <arglist>(const NumberFormat &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NumberFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a8b9d5c0937f4da69d9a229fd10f8ec38</anchor>
      <arglist>(const NumberFormat &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getEffectiveCurrency</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>ae79eb815aa14fa432eec4307a3e2bc28</anchor>
      <arglist>(UChar *result, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUNumberFormatFactory</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a38693e4c03f052ff23a839c69f3b4dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ICUNumberFormatService</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a5e0c68fe83aa739ffb329bb90ba5ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::NumberFormatTest</name>
      <anchorfile>classNumberFormat.html</anchorfile>
      <anchor>a665f604e2bed5fd91b6f445a19ffeddb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberFormatFactory</name>
    <filename>classNumberFormatFactory.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NumberFormatFactory</name>
      <anchorfile>classNumberFormatFactory.html</anchorfile>
      <anchor>a076436aeb0be5b92f98163153c3eb767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>visible</name>
      <anchorfile>classNumberFormatFactory.html</anchorfile>
      <anchor>a61b9673aa0c86df394fdfa081dcc6c23</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const UnicodeString *</type>
      <name>getSupportedIDs</name>
      <anchorfile>classNumberFormatFactory.html</anchorfile>
      <anchor>a924b21b295262d116f673186eb7c89ea</anchor>
      <arglist>(int32_t &amp;count, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NumberFormat *</type>
      <name>createFormat</name>
      <anchorfile>classNumberFormatFactory.html</anchorfile>
      <anchor>ac4d246b62f95f9d777f01f97fc80766f</anchor>
      <arglist>(const Locale &amp;loc, UNumberFormatStyle formatType)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberingSystem</name>
    <filename>classNumberingSystem.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>NumberingSystem</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a4359c0969576934547bdeb84869580dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberingSystem</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a8670fc7eff6e68a1b295dda8e0b29b98</anchor>
      <arglist>(const NumberingSystem &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NumberingSystem</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>ac63b1364aae93491bf4d60677f208b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRadix</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a584ece0fc006b621a7ea46db50e8dd91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>ae639900597a15e0d8d923d9769b47471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getDescription</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a7d219aa6736f16742dc31cff3bcb3358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isAlgorithmic</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a706717a88e616b2d7818502bb2db9ca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>aa2534c03fcfffca38b7e4111b61f1036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberingSystem *</type>
      <name>createInstance</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>ac406b979ec0a08b9442cd5e95cc8f6b9</anchor>
      <arglist>(const Locale &amp;inLocale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberingSystem *</type>
      <name>createInstance</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>ad2094060e91c38040dd8bf2892b79f97</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberingSystem *</type>
      <name>createInstance</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>aa721ee4be293f5cc35e1cab6aa120e14</anchor>
      <arglist>(int32_t radix, UBool isAlgorithmic, const UnicodeString &amp;description, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableNames</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a43916633da4bf5f2d94e09b678ce1639</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumberingSystem *</type>
      <name>createInstanceByName</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>a0fdb47d7cded2f7daddfd30bd55f9757</anchor>
      <arglist>(const char *name, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classNumberingSystem.html</anchorfile>
      <anchor>ad5361feb48a4a0b4adb50ff2dae49dab</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParagraphLayout</name>
    <filename>classParagraphLayout.html</filename>
    <base>UObject</base>
    <class kind="class">ParagraphLayout::Line</class>
    <class kind="struct">ParagraphLayout::StyleRunInfo</class>
    <class kind="class">ParagraphLayout::VisualRun</class>
    <member kind="function">
      <type></type>
      <name>ParagraphLayout</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a7907074382283b025c7bdd04489f902d</anchor>
      <arglist>(const LEUnicode chars[], le_int32 count, const FontRuns *fontRuns, const ValueRuns *levelRuns, const ValueRuns *scriptRuns, const LocaleRuns *localeRuns, UBiDiLevel paragraphLevel, le_bool vertical, LEErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParagraphLayout</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a3ef387e6749a804b0b4343567ad27961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBiDiLevel</type>
      <name>getParagraphLevel</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a90f17221c71a4bbb893dc43bf44b8352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>getTextDirection</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a2a90412e5a4c2465d5068920579137fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>getAscent</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>ac107efb21e93bb88d279547cf9ef3a89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>getDescent</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a442b8a63149d41f5a9072aae90b39c8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual le_int32</type>
      <name>getLeading</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a8aee0a8278e9c7b019748ba04f56e909</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reflow</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a437d556bb78f8f31a3167cdebed34697</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_bool</type>
      <name>isDone</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>ac1942a18258dacba2c6383882ec34b3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Line *</type>
      <name>nextLine</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>a232b40ef6d0a565c026bec85890d7b50</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>ac9d732c6f5f630acf85c17d213fb850a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static le_bool</type>
      <name>isComplex</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>af1135377e5cb8e87f36b1552c338105a</anchor>
      <arglist>(const LEUnicode chars[], le_int32 count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classParagraphLayout.html</anchorfile>
      <anchor>aa2b61f27a4915a526eced0e2b089f182</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParagraphLayout::Line</name>
    <filename>classParagraphLayout_1_1Line.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>~Line</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>a0d44cc615972afc6611eae13a05f01e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>countRuns</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>a55f4bdd7d980820d736ea0df45139191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getAscent</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>a86119a122140231718bbafa299f54e55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getDescent</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>a8bca3a3bacdb387b8c05f7fc747579b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getLeading</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>af98bbe604913aaa8d1d2970a8dccbeb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getWidth</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>af381d7670302ed8545dcaf511e19a62f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VisualRun *</type>
      <name>getVisualRun</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>abe77172dc82899a42186f39cea2e3124</anchor>
      <arglist>(le_int32 runIndex) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>ab85cdebcf42a0b5ddbce39ef9cd964c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>a7133cf4733116c9200c02941d6ca0b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParagraphLayout</name>
      <anchorfile>classParagraphLayout_1_1Line.html</anchorfile>
      <anchor>aefa8892424f624336802e05074701eeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParagraphLayout::VisualRun</name>
    <filename>classParagraphLayout_1_1VisualRun.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type>const LEFontInstance *</type>
      <name>getFont</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>ae09eadf5efc2a90aaf8ac4f37afc00c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBiDiDirection</type>
      <name>getDirection</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a6e383e7f79db97e8de6227c0c4f63931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getGlyphCount</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a4c5d161a68f2305a4c473b907d12c924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LEGlyphID *</type>
      <name>getGlyphs</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a50442ccb7da5d3442a608f3a70e990bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>getPositions</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a383fd1c8e4bdadb470aec916e0f98ce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const le_int32 *</type>
      <name>getGlyphToCharMap</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a13d64c3e5ca2cb73236595c0ae71c464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getAscent</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>ae3fb40ca14c91aa607db680e5bd4bfc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getDescent</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a20e181a7eca537305e8d95e4b66b8c4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getLeading</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a072e80a8db2b95d835baf289aedc6fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a32d45bb6958b3e4c7d5ae9bab6336c90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>ada2a43633ffc27e1757d0066c700bff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Line</name>
      <anchorfile>classParagraphLayout_1_1VisualRun.html</anchorfile>
      <anchor>a864cca3466d5710a4742ec5caf34b497</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParsePosition</name>
    <filename>classParsePosition.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>ParsePosition</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a720c03d1ded2e29cdf1abfd987d7bc83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParsePosition</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a459b19ed102710f830784be50840bb52</anchor>
      <arglist>(int32_t newIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParsePosition</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a1dd06764f2779bfadf23a28628854016</anchor>
      <arglist>(const ParsePosition &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParsePosition</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>abc24a4fe47d470fdfb2b19dd5d28f536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParsePosition &amp;</type>
      <name>operator=</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a6fcc5a6b017759640500f94d67a1e21f</anchor>
      <arglist>(const ParsePosition &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a61a8d58e675e5e42c89949694a888b92</anchor>
      <arglist>(const ParsePosition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a3d5101a395948da9c233694fe151d20c</anchor>
      <arglist>(const ParsePosition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>ParsePosition *</type>
      <name>clone</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a45ca7a1817b6f094cc62b096c34133d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getIndex</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a96fba5bb98e954d55d416ec24d411759</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>ab829e487731a43863e682396f35ea7b6</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorIndex</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a3827f98b37e3830ba0361b7c0f42100b</anchor>
      <arglist>(int32_t ei)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getErrorIndex</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>ae45548420e7fae72696e94faece728b7</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a2e3643af140b15e81830814bed7c0e98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classParsePosition.html</anchorfile>
      <anchor>a836783e8f198c54435728cc8c926a3d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluralFormat</name>
    <filename>classPluralFormat.html</filename>
    <base>Format</base>
    <class kind="class">PluralFormat::PluralSelector</class>
    <class kind="class">PluralFormat::PluralSelectorAdapter</class>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a8c410b4369566683e6a33db2de78f30c</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a8756792ec1c169beb733656917a85341</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a1300f3fd9d160d545df23ccd7513c0cb</anchor>
      <arglist>(const PluralRules &amp;rules, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a85a71a69714385f2e573c57f6cb4993f</anchor>
      <arglist>(const Locale &amp;locale, const PluralRules &amp;rules, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a8b458e4762cb31e7ee15e72b7d15e934</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>aafbce030c1b7bf47c0828832692ba41a</anchor>
      <arglist>(const Locale &amp;locale, const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a855e9ec92c89f5aa240f207e8aaa57ed</anchor>
      <arglist>(const PluralRules &amp;rules, const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>af12d02e746d81166620f5cd6d83ce0ab</anchor>
      <arglist>(const Locale &amp;locale, const PluralRules &amp;rules, const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a1e6fbf3c1ca8c824dd19002d0ab9cfc8</anchor>
      <arglist>(const PluralFormat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PluralFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>ab4f9f4e1052a57a64aadf939566b520e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyPattern</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a2e4529df12fd1c2a6f62365a370f5695</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>format</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a574169695e8a514c4ba0f2dd070d0e71</anchor>
      <arglist>(int32_t number, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>format</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a68cdf4bb5201604fa93949adf5e396f7</anchor>
      <arglist>(double number, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>ad6e8a6ee99827d0ffbc24d6ae0c841b2</anchor>
      <arglist>(int32_t number, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a7b852373bf7abda5355dfc56cafb79f7</anchor>
      <arglist>(double number, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocale</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>afe885b1b77e6e4581e61ec7e9ce3d860</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>ab5d863d4822e3f40366c3fb9946703dc</anchor>
      <arglist>(const NumberFormat *format, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>PluralFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a4145baa65aaccfbc3ff6a8c34be82213</anchor>
      <arglist>(const PluralFormat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>ae7e12f077b16fb02f069d9830096d96b</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a6c1ce757f5aa6475aafa63c066f9825b</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>aeb3f76cdf69fb00fec050171662d3a09</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a405026e9c17195c2421bb30b96e458f4</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a27d0ead83b43868194c44c3abfd423e9</anchor>
      <arglist>(UnicodeString &amp;appendTo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a24e62f6a197c2b8e524dd40ce58a89c5</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a12e3f92dd37991545c313fd149107e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>aa3db9061fda6d0a85b8143f8d7bedcd5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MessageFormat</name>
      <anchorfile>classPluralFormat.html</anchorfile>
      <anchor>a878637013842f94d9e8f7eb5ec0411b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PluralRules</name>
    <filename>classPluralRules.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>PluralRules</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a6b32ab53f65942e15823e132f321a4b8</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PluralRules</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>ae490f4501e45cfd73d4d7fd4ccee1d08</anchor>
      <arglist>(const PluralRules &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PluralRules</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a95d1445d1f33367a0c5083bcb817940e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PluralRules *</type>
      <name>clone</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a55946d0936860e17e5e5dd7bcdf2d169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PluralRules &amp;</type>
      <name>operator=</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>aca0a4ab81aac9368b7c3c01d6f43ce43</anchor>
      <arglist>(const PluralRules &amp;)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>select</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a795c3aa81dae02077e5d9b8bc0c1f067</anchor>
      <arglist>(int32_t number) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>select</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a54348839619cdf54e1e94b8180cc72dd</anchor>
      <arglist>(double number) const </arglist>
    </member>
    <member kind="function">
      <type>StringEnumeration *</type>
      <name>getKeywords</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>acbdb208b3df25706fa8e2cc50e437192</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getUniqueKeywordValue</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a4081f454a784dd6103d6bc5e49e130b4</anchor>
      <arglist>(const UnicodeString &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getAllKeywordValues</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a61d168e5b070eacdb2027cfb6922a385</anchor>
      <arglist>(const UnicodeString &amp;keyword, double *dest, int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getSamples</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>ae49f4dcfd78f15c1860ecab8f447cb9d</anchor>
      <arglist>(const UnicodeString &amp;keyword, double *dest, int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isKeyword</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a5f9591d534c2075bd3a31c28041df437</anchor>
      <arglist>(const UnicodeString &amp;keyword) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getKeywordOther</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>abcea68fc5bee177e902049c0fb34df0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a0409c1c6f97a2086bb6b0b18deb47f1d</anchor>
      <arglist>(const PluralRules &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>a0584e7a2285e577782440de32e33e12c</anchor>
      <arglist>(const PluralRules &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>adcb38526674c5db9462ebbfa3650da03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluralRules *</type>
      <name>createRules</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>aea9b12842f4357ad1a018da516aab499</anchor>
      <arglist>(const UnicodeString &amp;description, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluralRules *</type>
      <name>createDefaultRules</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>ae462c8413dcbde39a6ef3495ce299102</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PluralRules *</type>
      <name>forLocale</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>ae24ef3c35b4769680b50b7aa171e11f4</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classPluralRules.html</anchorfile>
      <anchor>ab889decdc97ff8219a9ec2dd5e1bf717</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegexMatcher</name>
    <filename>classRegexMatcher.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>RegexMatcher</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a6d8082b5a33770e99ecbd73313bf7a50</anchor>
      <arglist>(const UnicodeString &amp;regexp, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexMatcher</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a75ef00fe0f6f5004f055c67d49a905cb</anchor>
      <arglist>(UText *regexp, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexMatcher</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a47a4616e88fe34d85b440aa0fe6922b9</anchor>
      <arglist>(const UnicodeString &amp;regexp, const UnicodeString &amp;input, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexMatcher</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>af7588a2667611b7086b2fed6f7758ff2</anchor>
      <arglist>(UText *regexp, UText *input, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegexMatcher</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a0e08da6f535d3379399265768bd5adb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>matches</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a3c83ab49b979b5c610819fee1fe8463f</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>matches</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a0073eae367c3a72bc1dbe40b04becdcb</anchor>
      <arglist>(int64_t startIndex, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>lookingAt</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ab04a667874c99f69ca9816240d934908</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>lookingAt</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a75c7ca9b7f32341de5b576c7a08214f4</anchor>
      <arglist>(int64_t startIndex, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>find</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a0c7ef0d32a9dc7eb57d0d31d0a8fdb02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>find</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>aa52b3ecfbb5cd58e9fcce3588d296f82</anchor>
      <arglist>(int64_t start, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>group</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a8d98f84b7446c78408fc36366ccfdafb</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>group</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a01c6fc5b7b8f94e977454b61bd3e5d86</anchor>
      <arglist>(int32_t groupNum, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>groupCount</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ae08fe8369c2986b16c772055497d184c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>group</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>abdb105391cfc2997354b0b0b7c384326</anchor>
      <arglist>(UText *dest, int64_t &amp;group_len, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>group</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a92b218c8cb8c5692e657530b20173eea</anchor>
      <arglist>(int32_t groupNum, UText *dest, int64_t &amp;group_len, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>group</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1ba2de816176ae692de9fe3c7f335892</anchor>
      <arglist>(int32_t groupNum, UText *dest, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>start</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ace59b3327cb3d476016d57b0bd76611c</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>start64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a477a2c4729c9f78eff96e53f48e9c215</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>start</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ab526773d931447d8c990896e02375216</anchor>
      <arglist>(int32_t group, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>start64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>abf1aec7feda15ffeffc70582e98f9311</anchor>
      <arglist>(int32_t group, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>end</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a80cd2dcc802b61b046d83a6b48935dc4</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>end64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a7e06b5b80ae872f11b3d3c237bd3d08d</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>end</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a4a5240f42531547c10ae55537049f149</anchor>
      <arglist>(int32_t group, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>end64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a49d12181ae2aa940b039ba6f0634cbc2</anchor>
      <arglist>(int32_t group, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>reset</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a0564fa9029cf90afd6008e1c2863ff47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>reset</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>acd2a4ba2d7fd366a8010159aaf9e4c86</anchor>
      <arglist>(int64_t index, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>reset</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>aafc5e4f9cb857068d0d6be4ef67ca8d0</anchor>
      <arglist>(const UnicodeString &amp;input)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>reset</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1371b482a8e27f4a5398a9b6daf093b3</anchor>
      <arglist>(UText *input)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>refreshInputText</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a9b42112355418492da8302c3f3e2c61f</anchor>
      <arglist>(UText *input, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>input</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>acfed242304a8cf781966fb812d312574</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>inputText</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a28bb7415a21aa4b9ec436e171f51fbdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>getInput</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ad1d73b5633f5e89cbadbddee8f2397b0</anchor>
      <arglist>(UText *dest, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>region</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a92526d42ab81529a26f016516e0d734b</anchor>
      <arglist>(int64_t start, int64_t limit, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>region</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a981a81b82753c236dfd8360af289bf29</anchor>
      <arglist>(int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>regionStart</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ae37cccdee76c94b20d0b6bc289ac3c39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>regionStart64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a4004f5ab6c7d5341784abe40e4c318f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>regionEnd</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a5c91aff80b7a8bf549263341b818f8cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>regionEnd64</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1fda6ddcd54c5f2c0769eddd95ec3d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasTransparentBounds</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1213ec0995f84d56540260e7bbe30490</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>useTransparentBounds</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>acf0c77059fa4880ad467b064d886f138</anchor>
      <arglist>(UBool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasAnchoringBounds</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a21e4914b4d1c9612614ebd7b39d34772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>useAnchoringBounds</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a3bc3a77ca9f4457fe9d350f9aaa71f8d</anchor>
      <arglist>(UBool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hitEnd</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a843196953b0461c5a7a1387e29fc24ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>requireEnd</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a2ac192ead8bd207bf70796d333c4cf54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RegexPattern &amp;</type>
      <name>pattern</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ade2b83133a537eeb404ca72be909eeff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>replaceAll</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>afbac43b65b5fbf9ee488266617b0d3b2</anchor>
      <arglist>(const UnicodeString &amp;replacement, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>replaceAll</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a9774eae99c6241ba4fac61494bbc1b07</anchor>
      <arglist>(UText *replacement, UText *dest, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>replaceFirst</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>aff123653d65c8722c5526a360515f06d</anchor>
      <arglist>(const UnicodeString &amp;replacement, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>replaceFirst</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a0183728f68b20ace3eb63d017409f2e1</anchor>
      <arglist>(UText *replacement, UText *dest, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>appendReplacement</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a72aaaa7b77e35313ec18a76a32fe0b2d</anchor>
      <arglist>(UnicodeString &amp;dest, const UnicodeString &amp;replacement, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher &amp;</type>
      <name>appendReplacement</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1d78a1f47ed28e10cbd1bfc2ac5ecd9a</anchor>
      <arglist>(UText *dest, UText *replacement, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>appendTail</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1342deb93a5e5280c997deaa140ebe32</anchor>
      <arglist>(UnicodeString &amp;dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>appendTail</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a9e0a90be3596878b27cc10c2afe9985f</anchor>
      <arglist>(UText *dest, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>split</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ad3a2b85b74c0345bf6f94a7c568d5191</anchor>
      <arglist>(const UnicodeString &amp;input, UnicodeString dest[], int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>split</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a83ce65ea32680908683841abcb6108da</anchor>
      <arglist>(UText *input, UText *dest[], int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimeLimit</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a7330514556bfe1982d13c20778bde909</anchor>
      <arglist>(int32_t limit, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getTimeLimit</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a04d2f34cf72e83106fc35829f44e1c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStackLimit</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ada12ae9b2fef6369395a28bfb99d6d25</anchor>
      <arglist>(int32_t limit, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getStackLimit</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a3f121880706e677b662b45a02a915bab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatchCallback</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>af5d1c93c37ecc29bb88830d1b57049bd</anchor>
      <arglist>(URegexMatchCallback *callback, const void *context, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getMatchCallback</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>af2365136ca67ad0e3d044be6098722c4</anchor>
      <arglist>(URegexMatchCallback *&amp;callback, const void *&amp;context, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFindProgressCallback</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a7f1682437e1c243bc27bd6967105b755</anchor>
      <arglist>(URegexFindProgressCallback *callback, const void *context, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFindProgressCallback</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>aadb4248db1e7bee3da89d1374d4387f7</anchor>
      <arglist>(URegexFindProgressCallback *&amp;callback, const void *&amp;context, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrace</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a9ba9152845cd7fd210e0334bd948a11f</anchor>
      <arglist>(UBool state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>ae4dc17624d459e971b521578b872290c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPreserveRegion</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a7adb10b9248d7b89170e0f80a4f26a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a925eadd2d94457014581c270d1e8dc64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RegexPattern</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a6599d2ee7a324de7b810427abcdf1894</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RegexCImpl</name>
      <anchorfile>classRegexMatcher.html</anchorfile>
      <anchor>a1c2144b0e5f518674dffbf166bb18bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegexPattern</name>
    <filename>classRegexPattern.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>RegexPattern</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>abe4c71b210cde0c481885d808ab5b3c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexPattern</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a230936f735381b22b6647ae4c654f9f6</anchor>
      <arglist>(const RegexPattern &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegexPattern</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a59c4a8cb10be3904fc0bfc088c4da5e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>abf346a4a46152c357558e155b454b331</anchor>
      <arglist>(const RegexPattern &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a881d8d89c3c5859420874e5a62d21be6</anchor>
      <arglist>(const RegexPattern &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>RegexPattern &amp;</type>
      <name>operator=</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>ad71085b753bbc297b3cbc4e0d2d4f1e7</anchor>
      <arglist>(const RegexPattern &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexPattern *</type>
      <name>clone</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a627fddecfac7b947b8970e153bc3f8c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>flags</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a6e4b572646038c55b2155b9943e333cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher *</type>
      <name>matcher</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a30fe2131813a753a511aedd1fb3fda39</anchor>
      <arglist>(const UnicodeString &amp;input, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RegexMatcher *</type>
      <name>matcher</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a54f22dd483d0aa9dd398cc4d025a41f1</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>pattern</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a54e9433c3a438450afa8685d826ad355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>patternText</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a0fb728f229575c7f6097769706b747d5</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>split</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a3dc9b8d5bb5f12976e70bfcf023229e3</anchor>
      <arglist>(const UnicodeString &amp;input, UnicodeString dest[], int32_t destCapacity, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>split</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>acc2575a99cc517ff8880fdc3fdace3f2</anchor>
      <arglist>(UText *input, UText *dest[], int32_t destCapacity, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>aee918c8402916ef82f7337780ffb7a8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>aaa0af54c0e4f96bdef2e7d057a714629</anchor>
      <arglist>(const UnicodeString &amp;regex, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a4b8c64df723d26979aa450c07b753791</anchor>
      <arglist>(UText *regex, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a9157d6a29f28cdcdbcd88342e6a04e0c</anchor>
      <arglist>(const UnicodeString &amp;regex, uint32_t flags, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>aa65a667987afb0dd582da0895cf9eaa5</anchor>
      <arglist>(UText *regex, uint32_t flags, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a1e65a3b5143a98c8354bd3a30da3ec7c</anchor>
      <arglist>(const UnicodeString &amp;regex, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RegexPattern *</type>
      <name>compile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a062ad4716f7343d63a2f86166814fefe</anchor>
      <arglist>(UText *regex, uint32_t flags, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>matches</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a01d3ae1eb52cf449229904da410db587</anchor>
      <arglist>(const UnicodeString &amp;regex, const UnicodeString &amp;input, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>matches</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a4c93fec282ad3d803a90d44c992fac03</anchor>
      <arglist>(UText *regex, UText *input, UParseError &amp;pe, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a1f4513a89868ed23c4e49eadebbf00dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RegexCompile</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a37cf9c695a0f0d4c606794205508fed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RegexMatcher</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>ada49313a58b9d9eb990246aa6c72a379</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RegexCImpl</name>
      <anchorfile>classRegexPattern.html</anchorfile>
      <anchor>a1c2144b0e5f518674dffbf166bb18bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Replaceable</name>
    <filename>classReplaceable.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Replaceable</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a1235bdf1712cb754c9d591ed399af367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a81c2af838cfaf3c2a0d46b7fa727e8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UChar</type>
      <name>charAt</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a78909dd61599c6f2d8af7a9d3bf5dd0f</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>char32At</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>ac7e972cbbe070b5fb1d0f824d2badb2c</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>extractBetween</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>abdf76adaff91c3310a70ae4297734bf4</anchor>
      <arglist>(int32_t start, int32_t limit, UnicodeString &amp;target) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleReplaceBetween</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>ae403fe2b8d99c4dd1081417d77ca1e99</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>aa99cf49af5401c5bc89cd6894c67e2e8</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t dest)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasMetaData</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>ad4ae052a7be93bb0a69a6a55ff45ca43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Replaceable *</type>
      <name>clone</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a6e976bb4e1517d753fed1ea82539657b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Replaceable</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>af581ed7be8f00628474e3789e5af42cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getLength</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>aaa70d54cdfecf5e6a0a86566c8f75809</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual UChar</type>
      <name>getCharAt</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a5cb36727170bbcc883a0c5846a6c4484</anchor>
      <arglist>(int32_t offset) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual UChar32</type>
      <name>getChar32At</name>
      <anchorfile>classReplaceable.html</anchorfile>
      <anchor>a6305704f7ac09b06c85fd7698f7ac384</anchor>
      <arglist>(int32_t offset) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResourceBundle</name>
    <filename>classResourceBundle.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a3173cb967dc23efe0a7dc0ec5d2094cf</anchor>
      <arglist>(const UnicodeString &amp;packageName, const Locale &amp;locale, UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>aea1a13c4041def651f3c6feb83b4f09a</anchor>
      <arglist>(const UnicodeString &amp;packageName, UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a5e30b7896bc18cdf70300b7e536e4fbd</anchor>
      <arglist>(UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a80c6149ee0b93fea134959fa567ac8da</anchor>
      <arglist>(const char *packageName, const Locale &amp;locale, UErrorCode &amp;err)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ae1afe1d1bbaa2e68da491d93f3f5d0ec</anchor>
      <arglist>(const ResourceBundle &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ad4dfcfeb7a8f7700b346b4cee5165575</anchor>
      <arglist>(UResourceBundle *res, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle &amp;</type>
      <name>operator=</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a85e7ab7201f08b0ca5e84b2336af7bd1</anchor>
      <arglist>(const ResourceBundle &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ResourceBundle</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a7a5fe8f06f79a7e56aafad177545d2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle *</type>
      <name>clone</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ad532779a70c9a9a863e8ac4d59866f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getSize</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a0395affb4c3b4ce8a6a25e1a32c7803a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getString</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a4aa97fa70c68a7d4f447f12cef47be4b</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const uint8_t *</type>
      <name>getBinary</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>af0861ccfb5fd9689a65768cd7be15eb2</anchor>
      <arglist>(int32_t &amp;len, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t *</type>
      <name>getIntVector</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ae8669ba7a332a73519efa2dcd45cd559</anchor>
      <arglist>(int32_t &amp;len, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getUInt</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ab49c8467b5c209c1feb755c2ac221db0</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getInt</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a77ebc4caf05ac307141e9d96d42d03f5</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasNext</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a227a0b773178f633b4a22627ff258c4f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIterator</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a2d61032aa8129ef6749b6508d30fa5c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getKey</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a23924719214c40e0441bdf604a3e0e61</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a80628c5d772d7c53519a07144b02a28a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UResType</type>
      <name>getType</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a0f0e718ef4653a9a5107d9d2a175108d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle</type>
      <name>getNext</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a054073116bf7e647705512541e36f778</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getNextString</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>aefb5faa168e95040428ae502f9103744</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getNextString</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>aa1a304f61d6877a7bb85649a570db680</anchor>
      <arglist>(const char **key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle</type>
      <name>get</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a2931479f8bde90e1def551b330a75642</anchor>
      <arglist>(int32_t index, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getStringEx</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ae6b329635c139e3ee624259e476a86fd</anchor>
      <arglist>(int32_t index, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle</type>
      <name>get</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a29f6b0dd8381d45a00b470222d10df6d</anchor>
      <arglist>(const char *key, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>getStringEx</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a3768515c7faf16eeed33340fa778cd16</anchor>
      <arglist>(const char *key, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVersionNumber</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>ae4e52f0039001de358097aaed281ddff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVersion</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a1f3129b80a350e09d9115786c538bb06</anchor>
      <arglist>(UVersionInfo versionInfo) const </arglist>
    </member>
    <member kind="function">
      <type>const Locale &amp;</type>
      <name>getLocale</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a7f05f16344d4d8bf02d6cfdb6f5e4e02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>getLocale</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a37edeca878eb67481f635091df13e7a2</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>ResourceBundle</type>
      <name>getWithFallback</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a4aa335d2093d3d94df3adc8ed6d9f19c</anchor>
      <arglist>(const char *key, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a8c3323bf3c433f2f5ed3d542963c3423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classResourceBundle.html</anchorfile>
      <anchor>a580da94da06b75e5425da18dad085781</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuleBasedBreakIterator</name>
    <filename>classRuleBasedBreakIterator.html</filename>
    <base>BreakIterator</base>
    <member kind="function">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ac29e42ef56e0756152c830a23bd5adfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ab601ffba9b8c11489d506a726027db32</anchor>
      <arglist>(const RuleBasedBreakIterator &amp;that)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a93f3f8807dc8bc2fcbb287a59c665003</anchor>
      <arglist>(const UnicodeString &amp;rules, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a14410c3cd486a28941980a5577dfa7ac</anchor>
      <arglist>(const uint8_t *compiledRules, uint32_t ruleLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a1ab0da227d0a45942c29f2a5df3639cb</anchor>
      <arglist>(UDataMemory *image, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>af97d5993340441b4470508d5063e7662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RuleBasedBreakIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ad6f0b26c45901e817d693008bf03078c</anchor>
      <arglist>(const RuleBasedBreakIterator &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>af1e72eda19a90fd2a729bddd824345d7</anchor>
      <arglist>(const BreakIterator &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a830c4be152a82f2a80e6059c00ad3451</anchor>
      <arglist>(const BreakIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BreakIterator *</type>
      <name>clone</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a805badacaa522dee2ec8c3e09ab5659f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a01daa6b1966339e69d7e4e805f193491</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getRules</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a813110eca17a45c2563c623a1ed9d5f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharacterIterator &amp;</type>
      <name>getText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a21542dea2f8d1d12629484f38292301d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UText *</type>
      <name>getUText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>aafe5882170adf4e756d077db58cce0a4</anchor>
      <arglist>(UText *fillIn, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a002e744aad6039dd379f63225052f0b1</anchor>
      <arglist>(CharacterIterator *newText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a3c43a81c024eb388aa807557ec1218fd</anchor>
      <arglist>(const UnicodeString &amp;newText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>aeb3cf0fe922a95d24978a3014c8f79b2</anchor>
      <arglist>(UText *text, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>first</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a45707d96406f1b0027ce65c79ac36c67</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>last</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ab57d12a60328d31fbc859591d9fd1272</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>next</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a0fbb590a8a0f62627afe40ce4b4f5730</anchor>
      <arglist>(int32_t n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>next</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a16fe1b082e7e67d9f0dbc3c277c642d7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>previous</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a9aad4e7020f9a0b7b7627ee8ce0c2e9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>following</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a0407bc1809b35c7af19cfa0539067841</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>preceding</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>af63093f20c0ab16c597d104573ed65f1</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isBoundary</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ad23e9f31feed57dee61b1d45fcb3dbfc</anchor>
      <arglist>(int32_t offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>current</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ac7083ccc926c0b72c08ea105a01321c8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRuleStatus</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a827e0fe5c71af0c2608304cf54e6400f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRuleStatusVec</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a924d98d0bc7aea9568034c5257542d0c</anchor>
      <arglist>(int32_t *fillInVec, int32_t capacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ac601c2347870413f79995d843687a470</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BreakIterator *</type>
      <name>createBufferClone</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a3e120994761da087377fb1e6b5dccf18</anchor>
      <arglist>(void *stackBuffer, int32_t &amp;BufferSize, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const uint8_t *</type>
      <name>getBinaryRules</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a1852625b37eccd5b78a8c6993e49b309</anchor>
      <arglist>(uint32_t &amp;length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBreakType</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>adec544981344804a4abb5fd3b3826d7d</anchor>
      <arglist>(int32_t type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>adc73faf663185bdd27441bd42f97a68a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="enumeration">
      <name>EDontAdopt</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a9c2fe7d0ff5c34db34f68ffd1013d970</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>aa57ab1ae99efe23f07a73ddf4389027c</anchor>
      <arglist>(RBBIDataHeader *data, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RuleBasedBreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a283a483beab67abaf35a36ac9a462ad2</anchor>
      <arglist>(const RBBIDataHeader *data, enum EDontAdopt dontAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a5052a806f483ca004e8197a27b7d0ce4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>adbb69236c763c8b7abdac190964c3d1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>checkDictionary</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a7a4dd96ffe78373ff59af253d95d4d2c</anchor>
      <arglist>(int32_t startPos, int32_t endPos, UBool reverse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UText *</type>
      <name>fText</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a419b7e787fe701da59edf938ec338348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CharacterIterator *</type>
      <name>fCharIter</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ae31cd176a5f569eeaad260232078e1c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StringCharacterIterator *</type>
      <name>fSCharIter</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ab167d8622058e5c0d417dd43ef83edda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UCharCharacterIterator *</type>
      <name>fDCharIter</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ad276784df08fcac79d039533a1341cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RBBIDataWrapper *</type>
      <name>fData</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a9e4c4ce2df8bd5ec86eb24029f536fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fLastRuleStatusIndex</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a0334069f3c4a9384836be7e76f8553a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>fLastStatusIndexValid</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a724ee27f3375cb4a18a0268ddddc4e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>fDictionaryCharCount</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a7491e4622823085f822618797ac62643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t *</type>
      <name>fCachedBreakPositions</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a56b061a55c91c2f45263213b4188e19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fNumCachedBreakPositions</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>ae592ba2301f6064f2f50d70196517886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fPositionInCache</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a65ae2b4eadd5389543d7b69d2c965c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UStack *</type>
      <name>fLanguageBreakEngines</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>af7beaa3fd16091bd2dec10e67ccec22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnhandledEngine *</type>
      <name>fUnhandledBreakEngine</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a6f39d4df45fbf35c61ac58df2746f1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>fBreakType</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>af2304ecb86e7e4e50c3aab9f4b0c1aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>RBBIRuleBuilder</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a17ce03f12f5fa8688859b25e2bf60938</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>BreakIterator</name>
      <anchorfile>classRuleBasedBreakIterator.html</anchorfile>
      <anchor>a5fbb7407696454879cf016b20a0380f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuleBasedCollator</name>
    <filename>classRuleBasedCollator.html</filename>
    <base>Collator</base>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a685723bd1b8a2df19350e5d8dce24c82</anchor>
      <arglist>(const UnicodeString &amp;rules, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>acef0c60403fc780975d265cc6d52e3db</anchor>
      <arglist>(const UnicodeString &amp;rules, ECollationStrength collationStrength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>aaae0055ec92464409909fbdd0c7ac589</anchor>
      <arglist>(const UnicodeString &amp;rules, UColAttributeValue decompositionMode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ab22f30328e5abbb779b0a7c03b01e09a</anchor>
      <arglist>(const UnicodeString &amp;rules, ECollationStrength collationStrength, UColAttributeValue decompositionMode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a3b002ad7d57e54e1a75d9c6fc7d9c5d5</anchor>
      <arglist>(const RuleBasedCollator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a8422ec09bd4b623a3bff4e09c80a28cc</anchor>
      <arglist>(const uint8_t *bin, int32_t length, const RuleBasedCollator *base, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuleBasedCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a2a080eeab83d1864d481fb45c6b82a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RuleBasedCollator &amp;</type>
      <name>operator=</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a45ad21c50ac6d159d119d2c3a6dcd425</anchor>
      <arglist>(const RuleBasedCollator &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a7cfc8bb7eff90714b83db01091e9d9a1</anchor>
      <arglist>(const Collator &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a87cb492d16807f67f7ff1cf384a2587b</anchor>
      <arglist>(const Collator &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Collator *</type>
      <name>clone</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>afc3925de9f5b4b8c58192721cbb5bc57</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollationElementIterator *</type>
      <name>createCollationElementIterator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>aa00694d6f6463f3f21566ce173462fb6</anchor>
      <arglist>(const UnicodeString &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollationElementIterator *</type>
      <name>createCollationElementIterator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a07d693b537314e91abadff6fd712945e</anchor>
      <arglist>(const CharacterIterator &amp;source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a49b2017fd4861a6361e6b568d887adc2</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ab011371ceb1f45df5de1a458d7612aa8</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a1b7b66b3376e53e186cbf5f60fa4505d</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, int32_t length) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>acdc1ac2c3ded9364391e9b350d8b3842</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target, int32_t length, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EComparisonResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>aa93718b20d61f023bd126d5ed74ae1e0</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a6d410b9e3a7a3c353ca961ffbe6f5fdb</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, const UChar *target, int32_t targetLength, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UCollationResult</type>
      <name>compare</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a3ef0967c8d475d91884193f2d1f60c21</anchor>
      <arglist>(UCharIterator &amp;sIter, UCharIterator &amp;tIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollationKey &amp;</type>
      <name>getCollationKey</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a509690ecc2c4de4683cc226b4317174f</anchor>
      <arglist>(const UnicodeString &amp;source, CollationKey &amp;key, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CollationKey &amp;</type>
      <name>getCollationKey</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a36b0939e2dfb7c47fef177e0eec93700</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, CollationKey &amp;key, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a326891c5ae3763fab6e8e00b2289a413</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Locale</type>
      <name>getLocale</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a97cbec9ebe971ca9de1795e1dc3d63b0</anchor>
      <arglist>(ULocDataLocaleType type, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getRules</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a88b7cf04ca345ea2b17199905b869ccd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVersion</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a849f680b92692a38715b6b9fb67be7cf</anchor>
      <arglist>(UVersionInfo info) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaxExpansion</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a86128484ed00d48e3b646c2f63cdafe6</anchor>
      <arglist>(int32_t order) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a475f2ae0796fc004c76c10d30b991ca5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t *</type>
      <name>cloneRuleData</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a76f0c6651087f795e934ecba2357be36</anchor>
      <arglist>(int32_t &amp;length, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>cloneBinary</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ab4471befc42bf436cb771cef6b184ab7</anchor>
      <arglist>(uint8_t *buffer, int32_t capacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRules</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a49272a769d004665e981226e34859154</anchor>
      <arglist>(UColRuleOption delta, UnicodeString &amp;buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ac1817cbafe92cd3184d8712a8b72d746</anchor>
      <arglist>(UColAttribute attr, UColAttributeValue value, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UColAttributeValue</type>
      <name>getAttribute</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a4b104673bfec94c58f91478f14bcd286</anchor>
      <arglist>(UColAttribute attr, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>setVariableTop</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a1049c65c7c51c9540ca91bae25bf9f54</anchor>
      <arglist>(const UChar *varTop, int32_t len, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>setVariableTop</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a828496b246626823fd96abe7dcf86782</anchor>
      <arglist>(const UnicodeString varTop, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVariableTop</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ada7dd7ac546e91febadd47c68df9c102</anchor>
      <arglist>(const uint32_t varTop, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getVariableTop</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ac064aa96a85249dbf7e51713952d63df</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet *</type>
      <name>getTailoredSet</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a3c6f52fdf71f631fef79dd7b0a71b2f8</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Collator *</type>
      <name>safeClone</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ab58b1bbb98649f03131fe8b4dcd7b109</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getSortKey</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a572804441daa3ff64895a75b87991369</anchor>
      <arglist>(const UnicodeString &amp;source, uint8_t *result, int32_t resultLength) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getSortKey</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a9c185650b038aa1d64f01dbc6fdfbfbb</anchor>
      <arglist>(const UChar *source, int32_t sourceLength, uint8_t *result, int32_t resultLength) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ECollationStrength</type>
      <name>getStrength</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a4687629722826dd02625049df0dcff2f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStrength</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a124ab414f1dc23cb3a5acc3f61e6a2d2</anchor>
      <arglist>(ECollationStrength newStrength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getReorderCodes</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a26c29cdfd9ecafea62942dd47a50944a</anchor>
      <arglist>(int32_t *dest, int32_t destCapacity, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setReorderCodes</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>aa760b0487fabb94f3764a3923a1bbbf3</anchor>
      <arglist>(const int32_t *reorderCodes, int32_t reorderCodesLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const UCollator *</type>
      <name>getUCollator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a6333a2d290fb5e3d005c60ebcd4a89e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a0662ee51db5ee4ddb20ccd0aade72423</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getEquivalentReorderCodes</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a5f5745fce77b2539adc6e74dabf98fd9</anchor>
      <arglist>(int32_t reorderCode, int32_t *dest, int32_t destCapacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocales</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>ac1aa2afb4a6b684d25fb89f7632ba7f9</anchor>
      <arglist>(const Locale &amp;requestedLocale, const Locale &amp;validLocale, const Locale &amp;actualLocale)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CollationElementIterator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a2493a8a45ec3ae69e1bec8355c948519</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Collator</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>af22e5ffabbf5a2d4d729daa0b5d3cafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StringSearch</name>
      <anchorfile>classRuleBasedCollator.html</anchorfile>
      <anchor>a421a131b6330b132d67ac9582acb9886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuleBasedNumberFormat</name>
    <filename>classRuleBasedNumberFormat.html</filename>
    <base>NumberFormat</base>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a8f0d0ad50098c80905c0a73956fcbf0a</anchor>
      <arglist>(const UnicodeString &amp;rules, UParseError &amp;perror, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a0d744ac818c48f05cf3c997307ca49ec</anchor>
      <arglist>(const UnicodeString &amp;rules, const UnicodeString &amp;localizations, UParseError &amp;perror, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a3e623e929757c2b08d45753e91e30ebc</anchor>
      <arglist>(const UnicodeString &amp;rules, const Locale &amp;locale, UParseError &amp;perror, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a7dadd148dad700a933592dbfd86d780e</anchor>
      <arglist>(const UnicodeString &amp;rules, const UnicodeString &amp;localizations, const Locale &amp;locale, UParseError &amp;perror, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a17a665980e75dfadf93301de2e495982</anchor>
      <arglist>(URBNFRuleSetTag tag, const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a11252a1c12f92e65eb2c979c1bf8583b</anchor>
      <arglist>(const RuleBasedNumberFormat &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>RuleBasedNumberFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ae492ee51caf11c6244a9ca9b6ddaecda</anchor>
      <arglist>(const RuleBasedNumberFormat &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuleBasedNumberFormat</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ac326bb31489a5d402f1265830defff8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a52a2721aa01037d7e03f8c0cca6b4a77</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a2068e1cbee7eb25feaecb6c160a958a1</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getRules</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>afe23d122acc869aa9d952ad12b9073cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getNumberOfRuleSetNames</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a73d67c85b5bed8429b455aae19a38bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getRuleSetName</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a09ddadc168c5c8d37fb2b0685acedba3</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getNumberOfRuleSetDisplayNameLocales</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a435092a093791b2ca2095888343b82cf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Locale</type>
      <name>getRuleSetDisplayNameLocale</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a1eba080384a030c748d1af5babb65e09</anchor>
      <arglist>(int32_t index, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getRuleSetDisplayName</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a38b1b89d3515d55b1cc912ea2b4400ec</anchor>
      <arglist>(int32_t index, const Locale &amp;locale=Locale::getDefault())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getRuleSetDisplayName</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ae4ab9929c10007152a32af73f89cf3c2</anchor>
      <arglist>(const UnicodeString &amp;ruleSetName, const Locale &amp;locale=Locale::getDefault())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ad18c54375913d2426aae02a4328c3187</anchor>
      <arglist>(int32_t number, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>adf7cb11d07aac568236df549488e0b03</anchor>
      <arglist>(int64_t number, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a246ec02e8f3d84efc98f449f84ace6ab</anchor>
      <arglist>(double number, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>abe88e5ebd3a774349d6f5e08b033f829</anchor>
      <arglist>(int32_t number, const UnicodeString &amp;ruleSetName, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a9fe3e6f8f9a2c402e5d201d27db69de7</anchor>
      <arglist>(int64_t number, const UnicodeString &amp;ruleSetName, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ac7eeb9cc017a8fe4516d15af3403bbdd</anchor>
      <arglist>(double number, const UnicodeString &amp;ruleSetName, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a640cf2259d20cc8f03736f6fe0d18d1b</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ae97cffb5bc4fca4e5f7d89b41a333983</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>afe15fa9d2566bb4339e105f59f64f974</anchor>
      <arglist>(double number, UnicodeString &amp;output) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a920e08de6b0aca3f83b1e6c35dff9ad9</anchor>
      <arglist>(int32_t number, UnicodeString &amp;output) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a16c9b8e02cf8bb2f5c5d122143dbeb60</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, ParsePosition &amp;parsePosition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a90cc5cec4399cea7c3f1e600ca800ebb</anchor>
      <arglist>(const UnicodeString &amp;text, Formattable &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLenient</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>aa3c9501c62b8f9b629225f5a0d63c214</anchor>
      <arglist>(UBool enabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isLenient</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a15b474bf4a11e7d1df7164f9b9a7df90</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultRuleSet</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>ae80d597b9cc9fefcf37d9137e3db5cff</anchor>
      <arglist>(const UnicodeString &amp;ruleSetName, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString</type>
      <name>getDefaultRuleSetName</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a90b944154fdce68e4f48a2393d5d70fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>aa570fa8ffe7f29c9d6d7ab4b3303fa2a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a3f59d38e1adfa24dd9b33b1996c018b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NFSubstitution</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>a39532680c0f7f54a04caf8df763cf092</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NFRule</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>aa51afff2371ac40962212a34eb0e3ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FractionalPartSubstitution</name>
      <anchorfile>classRuleBasedNumberFormat.html</anchorfile>
      <anchor>abde6176913d71dc5c18c7b31c0de34a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RuleBasedTimeZone</name>
    <filename>classRuleBasedTimeZone.html</filename>
    <base>BasicTimeZone</base>
    <member kind="function">
      <type></type>
      <name>RuleBasedTimeZone</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a39b9f59cd4e26bfb773380dba69cc73f</anchor>
      <arglist>(const UnicodeString &amp;id, InitialTimeZoneRule *initialRule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleBasedTimeZone</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a1d9b4bdddee4f484f095d8e7e1172be8</anchor>
      <arglist>(const RuleBasedTimeZone &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuleBasedTimeZone</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a9616dff0082c9129037cc60bfee8e55c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RuleBasedTimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a264d50d1319a7f34b267d88be184904c</anchor>
      <arglist>(const RuleBasedTimeZone &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>aa379d776d10ca4b1b5a6a9a630c911ed</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>ae39d938d39c02a692ec8d6f8c4d6359c</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransitionRule</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a7283924a974100a67fdbe93a35934a6e</anchor>
      <arglist>(TimeZoneRule *rule, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>aec8a1cfeed1145ec5c031824878e1b31</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeZone *</type>
      <name>clone</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a2d5e41245c6cd47f1684ff4cde8cf61f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a0ed296264ab90c8ddf196b9fd425bf97</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a4f4a47264e1784b2fcb0c3fbdf66e9df</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, int32_t monthLength, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffset</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>ac253d4311e0c7b5b3f3385a31931a779</anchor>
      <arglist>(UDate date, UBool local, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawOffset</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>abab26ceb7c02d663679dba18c69943bc</anchor>
      <arglist>(int32_t offsetMillis)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRawOffset</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a95ebe551c49b1313f6e19fe3034752e0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>useDaylightTime</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a9503f9a5f90dda51c1b565bd34c86aae</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a7e146d3447fc673030816a48363c9dfd</anchor>
      <arglist>(UDate date, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasSameRules</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>ac7d9f2314f648ca4dd9a41ff7a1291e2</anchor>
      <arglist>(const TimeZone &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextTransition</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>ac38d8c1b6c6fdca21d80254b1ec73ed4</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousTransition</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a94c5a122c3f98ed28fb35bf41525a5b6</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>countTransitionRules</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a46d89546f45255773e0c7adbd903a89b</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTimeZoneRules</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a09d42566222df374a73a2ed60d8bf496</anchor>
      <arglist>(const InitialTimeZoneRule *&amp;initial, const TimeZoneRule *trsrules[], int32_t &amp;trscount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffsetFromLocal</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>afba9d2c07de6e060bf9a059ac889507b</anchor>
      <arglist>(UDate date, int32_t nonExistingTimeOpt, int32_t duplicatedTimeOpt, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a54cc31f008e25c80a0cec7f2054ad90a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRuleBasedTimeZone.html</anchorfile>
      <anchor>a972ca69154613673bf7edb8afa322e1b</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RunArray</name>
    <filename>classRunArray.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>RunArray</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>adb0a5403e1740a80e986b6c0283cda9f</anchor>
      <arglist>(const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RunArray</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a54003b697e0db67f1846433c746c534d</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RunArray</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>af726034756ddcc5b8877d84af80df97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getCount</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>aa27046af9057093e596e0df45aeb2dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>ac648426b69620527e228bbc548dd2044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getLimit</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a428e9f6f1ade14e5cc33c6bb0f911ab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getLimit</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a82da4f4973708eb1d597f44ce3b80885</anchor>
      <arglist>(le_int32 run) const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>add</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a7c213f82f5c9cfa16bf866203cc30f5d</anchor>
      <arglist>(le_int32 limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a7f74856ce5a362740299a359dc945a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>ab9bc82428042aa0ab416de2cf5ece3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a4a4822936fdabd6c9336134fb659a32d</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>grow</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>ac09e01408d8afa1272027a8937a4e1a1</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>le_bool</type>
      <name>fClientArrays</name>
      <anchorfile>classRunArray.html</anchorfile>
      <anchor>a9a1062251664dc9184f474a7134f7dfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SearchIterator</name>
    <filename>classSearchIterator.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>SearchIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ace7cb7b0e085eaffc03f6229f1aeab3f</anchor>
      <arglist>(const SearchIterator &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SearchIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ac088b4c1be49860879d4a7a37e71681f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a051291e515560612b18fd5c58b2fc523</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a405b15d976003735d48fe1c534a5045d</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ad82645422603995508e3d70990de5fd8</anchor>
      <arglist>(USearchAttribute attribute, USearchAttributeValue value, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>USearchAttributeValue</type>
      <name>getAttribute</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a91aa5cc02700fc13ac0ae6b9fa3ec1b5</anchor>
      <arglist>(USearchAttribute attribute) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMatchedStart</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a08250c1400fda7b63d2bbba7074db3a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMatchedLength</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a149e2eb5d6b1c719e26256981826ca02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMatchedText</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ab389210832353fd4ac40319f1e7630a6</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBreakIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a5999b2f5d0759a054ef0d9fbfae8598b</anchor>
      <arglist>(BreakIterator *breakiter, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const BreakIterator *</type>
      <name>getBreakIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>af9586c922b1360ad177ae2d1a649d480</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a14a7f30bf44acdebd78559ec47424d7f</anchor>
      <arglist>(const UnicodeString &amp;text, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a104395a4fb609992e1e170c98080366c</anchor>
      <arglist>(CharacterIterator &amp;text, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getText</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a1b343bf29465ac7be05493cbf9000534</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ac404a3e74b33dcdabda002c4b9438132</anchor>
      <arglist>(const SearchIterator &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a9fd5b7677b8169e5e5102e621aae31cc</anchor>
      <arglist>(const SearchIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SearchIterator *</type>
      <name>safeClone</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a7dfe65a9875be67e88151a1987053c6e</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>first</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ad4b0624d1dd56a45f1b11b39f569e185</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>following</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a6b8596ad970537354cb4dd68d1103a9d</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>last</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>aa367405e344b6cb425c47e221293257d</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>preceding</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a55f50cb3ef1ffb73746121aeb43b1ae9</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>next</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>abc2fe871477a82214534b84062dd5763</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>previous</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a6adda71b217ffa8ea4a74fc72db3e0df</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ad72b74b2fbe16ca0a449919984e85db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SearchIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a528076f54b4118e76a1790ba04987e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SearchIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>aaec88fe42044008487190bf00a2e4661</anchor>
      <arglist>(const UnicodeString &amp;text, BreakIterator *breakiter=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SearchIterator</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a028a9602382aca4555f56df8c964bb04</anchor>
      <arglist>(CharacterIterator &amp;text, BreakIterator *breakiter=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SearchIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ada060084cf2fb3ccf7c64cb71488d89e</anchor>
      <arglist>(const SearchIterator &amp;that)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>handleNext</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a18c8f6a8faec99e860e6ee6e41fa630a</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>handlePrev</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>afa84ddfd9914bfb6857e8450b5571361</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatchLength</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a2d6d2c4af6c45121336b0fa3e06f2e14</anchor>
      <arglist>(int32_t length)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatchStart</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a030774198e9befb2ae0c37d85841dd0c</anchor>
      <arglist>(int32_t position)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMatchNotFound</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a2ef0f691ef79cf6b3a673afb6f0ed2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>USearch *</type>
      <name>m_search_</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a37a71b3da6253680b3e24a3e0c3687a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BreakIterator *</type>
      <name>m_breakiterator_</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>a2fa2bb916a411a0df41f4f99e8e74419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnicodeString</type>
      <name>m_text_</name>
      <anchorfile>classSearchIterator.html</anchorfile>
      <anchor>ada31ca7238c22c2d69fd5192fe036d3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectFormat</name>
    <filename>classSelectFormat.html</filename>
    <base>Format</base>
    <member kind="function">
      <type></type>
      <name>SelectFormat</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a2ec2860c36e0f125426b0ecaefd97296</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectFormat</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a1b72b5353e11530dff1c328e6b5847fe</anchor>
      <arglist>(const SelectFormat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SelectFormat</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a51ff92529043981b3f8aca7dc5370706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyPattern</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a71d9a1c62fecb1b2b57ccea6c79dc772</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a838bf974ccae954fd31e03a51f412f94</anchor>
      <arglist>(const UnicodeString &amp;keyword, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>SelectFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>aa1d4bff5798ca8a37d3da8f6ac6ea13d</anchor>
      <arglist>(const SelectFormat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a2eb7899f4528b6b229f347cf3095fde4</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a1d33c693a2df1dbdc973dcc12afbb5b0</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a93921b5dd473d831353fc489ab2f1afc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>aedd16cf657cb9146811f5f3e31dfa9f2</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>af6ae2bd247711b12cef03f81c1c41dc3</anchor>
      <arglist>(UnicodeString &amp;appendTo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a7e36d9ad29f4c443ddd2ed1c40c63fc4</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;parse_pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a5c0716bdea388c31fee8f051307609cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a1d8ac9150eb3cf314852c9579898bbe2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MessageFormat</name>
      <anchorfile>classSelectFormat.html</anchorfile>
      <anchor>a878637013842f94d9e8f7eb5ec0411b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleDateFormat</name>
    <filename>classSimpleDateFormat.html</filename>
    <base>DateFormat</base>
    <class kind="struct">SimpleDateFormat::NSOverride</class>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>aac959d0d6f03e31837e1b7221436f65a</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>af26818e4c01a1a344f95d2742851e6b6</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a084a4273b739f4225812d3e6aea5660e</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;override, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ac327ded362ebd360f3a3c855ddbbfdba</anchor>
      <arglist>(const UnicodeString &amp;pattern, const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a61b5c0f0a773f07f418fec03658d0e4d</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;override, const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a6d93e872ff95ab9b13797c3c8df36ed4</anchor>
      <arglist>(const UnicodeString &amp;pattern, DateFormatSymbols *formatDataToAdopt, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a698e2c463f36eb98c100d7e6b14df019</anchor>
      <arglist>(const UnicodeString &amp;pattern, const DateFormatSymbols &amp;formatData, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>aebfb20e1e8ae1dbc51d4e5ac80f7fa75</anchor>
      <arglist>(const SimpleDateFormat &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SimpleDateFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a9150f0dbd293cf22a470e932d77633fe</anchor>
      <arglist>(const SimpleDateFormat &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleDateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ae4f200518c4e94db50ea6cf44b54a3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a7e779c3f80b4bb518e2e4d4907c3db3f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a349ffdf4204e4a6b0fec2c473ceaacb3</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a618b8ffd208cb29851d12d1db5babc49</anchor>
      <arglist>(Calendar &amp;cal, UnicodeString &amp;appendTo, FieldPosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a2d35fb3be6fb7c1b6e45608dfb4a2e67</anchor>
      <arglist>(Calendar &amp;cal, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>af969f9c7fbfc2cc9dd861dd011ef94e0</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a4d850ae27a73071330e44ed64cfc2be9</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a9e433ca3258272be455b61f0a06c33eb</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo, FieldPosition &amp;fieldPosition) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a6846d871f096d6f51cdc1b48b4efad8a</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo, FieldPositionIterator *posIter, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>aab9dc1c3bc84ac480ee1bc1c05d6126a</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;appendTo, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a89fc0802cd8e84902313b585726c4549</anchor>
      <arglist>(UDate date, UnicodeString &amp;appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a3d26207eb58fd0afc0c41f58e5caf56f</anchor>
      <arglist>(const UnicodeString &amp;text, Calendar &amp;cal, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>parse</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a4cfd7300952296fcf2e35ed67e5127dd</anchor>
      <arglist>(const UnicodeString &amp;text, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UDate</type>
      <name>parse</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ad824c9ccee2a56fb54c2384989bb80f7</anchor>
      <arglist>(const UnicodeString &amp;text, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set2DigitYearStart</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>abc869d3e1b35b4c8a81e005e3f23c28f</anchor>
      <arglist>(UDate d, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>get2DigitYearStart</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>af397530a09c5d705210384b7edd237ed</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a36952c70a195a18dc2d71e8d8e600d3b</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toLocalizedPattern</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ae8afbe51b43dd76856d26b761276b921</anchor>
      <arglist>(UnicodeString &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyPattern</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ad6dcbf05065e6b18ef7985cb2ebc01f2</anchor>
      <arglist>(const UnicodeString &amp;pattern)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyLocalizedPattern</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ab177ad8b128f13bd84c29e419233d3fe</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const DateFormatSymbols *</type>
      <name>getDateFormatSymbols</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>afb3ffb2587d5070769b73f303b592715</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptDateFormatSymbols</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ad93f7d1db5193ed784cd83ccfb647503</anchor>
      <arglist>(DateFormatSymbols *newFormatSymbols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDateFormatSymbols</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a972ac03adeab58abcafd7c6da2bdf913</anchor>
      <arglist>(const DateFormatSymbols &amp;newFormatSymbols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a8b106f7a1c7ea5757aaca9cc3a16a348</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>adoptCalendar</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a66975f632ef7ce796eeaad1e0e6b33b5</anchor>
      <arglist>(Calendar *calendarToAdopt)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isFieldUnitIgnored</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>ace86b45a8051b15dca1b62587aae533c</anchor>
      <arglist>(UCalendarDateFields field) const </arglist>
    </member>
    <member kind="function">
      <type>const Locale &amp;</type>
      <name>getSmpFmtLocale</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a27c253dd7595df456ae736047215109b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a2188b47b32836a2de7d827778b34de87</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>isFieldUnitIgnored</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a2ab33be44a6cbe7203dd8efc69d69f37</anchor>
      <arglist>(const UnicodeString &amp;pattern, UCalendarDateFields field)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DateFormat</name>
      <anchorfile>classSimpleDateFormat.html</anchorfile>
      <anchor>a369bfc31e5e941bae4ec355f203ea9e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleNumberFormatFactory</name>
    <filename>classSimpleNumberFormatFactory.html</filename>
    <base>NumberFormatFactory</base>
    <member kind="function">
      <type></type>
      <name>SimpleNumberFormatFactory</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>ab71d8f9f4bbccbb9ca4cca203873e6d9</anchor>
      <arglist>(const Locale &amp;locale, UBool visible=TRUE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleNumberFormatFactory</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>a13b1d9384092b40921758bfeb031ce98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>visible</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>ae90c80db128e02bdd63782c99e3016ff</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString *</type>
      <name>getSupportedIDs</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>a657fb68096fc0d213f64519b48c9f87e</anchor>
      <arglist>(int32_t &amp;count, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const UBool</type>
      <name>_visible</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>ab64323ab4a42b45308988a70cbf0d4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnicodeString</type>
      <name>_id</name>
      <anchorfile>classSimpleNumberFormatFactory.html</anchorfile>
      <anchor>a1246871584c1e2c332ca8029ad4e5db2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleTimeZone</name>
    <filename>classSimpleTimeZone.html</filename>
    <base>BasicTimeZone</base>
    <member kind="enumeration">
      <name>TimeMode</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aa0134e78ee3cc1d65ea434839d39158e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a62a8a0ad72d6b47396ef3d8212b5c33d</anchor>
      <arglist>(const SimpleTimeZone &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>SimpleTimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a228a199e8ed3155158946aa959374ebf</anchor>
      <arglist>(const SimpleTimeZone &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a8f11a7b35245fcb6a6ba997fac7436ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ae20ce2575cc09a4153ded38027cfb9d1</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a06ac806f66deda0ba571dda63fff6f0a</anchor>
      <arglist>(int32_t rawOffsetGMT, const UnicodeString &amp;ID)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a312810055cb819b59ce71652388e44f6</anchor>
      <arglist>(int32_t rawOffsetGMT, const UnicodeString &amp;ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aaa18174e81984d0c9692dc1f545d372e</anchor>
      <arglist>(int32_t rawOffsetGMT, const UnicodeString &amp;ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, int32_t savingsDST, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleTimeZone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a0f3ca0f3f2813ae1bf8f50cdd96b9f0d</anchor>
      <arglist>(int32_t rawOffsetGMT, const UnicodeString &amp;ID, int8_t savingsStartMonth, int8_t savingsStartDayOfWeekInMonth, int8_t savingsStartDayOfWeek, int32_t savingsStartTime, TimeMode savingsStartTimeMode, int8_t savingsEndMonth, int8_t savingsEndDayOfWeekInMonth, int8_t savingsEndDayOfWeek, int32_t savingsEndTime, TimeMode savingsEndTimeMode, int32_t savingsDST, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartYear</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a8e1229e930e04c19ece39572a500da89</anchor>
      <arglist>(int32_t year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a8c4a9581b04860da2c1cee479a47f196</anchor>
      <arglist>(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a2fc33e164ee7cc61978ad97fa9160605</anchor>
      <arglist>(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a804b78f9d989933d8f01e7da8d847a78</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t time, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a951c1606e4adf4025d44ad3be71195d2</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t time, TimeMode mode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a660bbd9cb4ac87a081aa9a31e46e651c</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, UBool after, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a2c18c26fb0161b4c8f2bcedabbabe32c</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UBool after, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ae2eee23700f7405a563cf01e3cedd797</anchor>
      <arglist>(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aa431708879d771b0a9db6a885c6b9636</anchor>
      <arglist>(int32_t month, int32_t dayOfWeekInMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a74dd5abdc15565cde82c64354b9897a2</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t time, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ab28dc36158d3f987abde313eed0fd3f2</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t time, TimeMode mode, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>afd814ed5b3e6dec7d9713b1f29e7652e</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, UBool after, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndRule</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a48e5aac89138621abd7fbac32c87c2e9</anchor>
      <arglist>(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t time, TimeMode mode, UBool after, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>abc1b15b477116968f77a3c5ab9e85d32</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a430dab9be720c052648f78bd388ae3a2</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t milliseconds, int32_t monthLength, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ada95e04c886d2dbee03d83ff3065e9e5</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t milliseconds, int32_t monthLength, int32_t prevMonthLength, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a7af810373fc0ec1c97fb23fb40c43c01</anchor>
      <arglist>(UDate date, UBool local, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffsetFromLocal</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a10614d3037247fb45b55f528bc0be440</anchor>
      <arglist>(UDate date, int32_t nonExistingTimeOpt, int32_t duplicatedTimeOpt, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRawOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a27821d78781b1c71493457f4adaaec92</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawOffset</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a6d5b9fb28dda0d197d7e23499a446be7</anchor>
      <arglist>(int32_t offsetMillis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDSTSavings</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a00c5c16531af810455ef7dac35fb23fa</anchor>
      <arglist>(int32_t millisSavedDuringDST, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getDSTSavings</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a37c0880cf0340bbc31fd93df1d22d110</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>useDaylightTime</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aef1be3731d1312a61aac0889307bfd62</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a48b29a950e87fdf8a83aef5c684b3dfb</anchor>
      <arglist>(UDate date, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasSameRules</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ab8753f80ffb72b190214ec34d2600d6a</anchor>
      <arglist>(const TimeZone &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeZone *</type>
      <name>clone</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aacbde413ecbc2c68811f1dde5143bd4c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextTransition</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a28346f7486199f9b7c03ce229fa626af</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousTransition</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>aa84042f21c3d095147b0e207f835deb9</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>countTransitionRules</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a12f021f608389d82c0a9e23ca3fd7ad8</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTimeZoneRules</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a0e584a10d12226e32c0e4ea14a2ccd52</anchor>
      <arglist>(const InitialTimeZoneRule *&amp;initial, const TimeZoneRule *trsrules[], int32_t &amp;trscount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>ad7c3df95d43756f22fdd97ab31c199bc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classSimpleTimeZone.html</anchorfile>
      <anchor>a39d0abe21be338f073121a9147913150</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringByteSink</name>
    <filename>classStringByteSink.html</filename>
    <templarg>StringClass</templarg>
    <base>ByteSink</base>
    <member kind="function">
      <type></type>
      <name>StringByteSink</name>
      <anchorfile>classStringByteSink.html</anchorfile>
      <anchor>a632e52941abe840947888682ddd29d97</anchor>
      <arglist>(StringClass *dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Append</name>
      <anchorfile>classStringByteSink.html</anchorfile>
      <anchor>ac377073d20cc64ac21ef35c6f4901ba4</anchor>
      <arglist>(const char *data, int32_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringCharacterIterator</name>
    <filename>classStringCharacterIterator.html</filename>
    <base>UCharCharacterIterator</base>
    <member kind="function">
      <type></type>
      <name>StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>ac7621a43fb084bab47b1035f71939745</anchor>
      <arglist>(const UnicodeString &amp;textStr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a476de6bda638841db94b998b219c0314</anchor>
      <arglist>(const UnicodeString &amp;textStr, int32_t textPos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>ab40ab66e69aec3542ae76d4c6e88c425</anchor>
      <arglist>(const UnicodeString &amp;textStr, int32_t textBegin, int32_t textEnd, int32_t textPos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>aedbfec8e2c8823ed4cdcc101c98c82c4</anchor>
      <arglist>(const StringCharacterIterator &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a369b93e1f149cb2dfea8e92589c46ea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StringCharacterIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a4cd551b4e2371ac38288a82b9055fad8</anchor>
      <arglist>(const StringCharacterIterator &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>abf550dff0a2a35c7c41429f670a472a2</anchor>
      <arglist>(const ForwardCharacterIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharacterIterator *</type>
      <name>clone</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a63dfbbd9648fc51a2b6ca2aa1547e7bf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a6320a0b88a6c7822a21fa8cbe986808c</anchor>
      <arglist>(const UnicodeString &amp;newText)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getText</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a6a7a27b16cade56d95388a7134d86cc0</anchor>
      <arglist>(UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a41e4e26fa81d682930112b3333f89f94</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a86bc0ae0760e49750f15a8083959d0e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StringCharacterIterator</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a84d5bd32d3808ba0a3879f0f31e4a1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>a045a135b04af0c30ac4f33930a9d75f3</anchor>
      <arglist>(const UChar *newText, int32_t newTextLength)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnicodeString</type>
      <name>text</name>
      <anchorfile>classStringCharacterIterator.html</anchorfile>
      <anchor>ab8e788d9de97c4fc497e049c81113441</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringEnumeration</name>
    <filename>classStringEnumeration.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringEnumeration</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a2782440c508773b1c6474b7d1bc54a01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringEnumeration *</type>
      <name>clone</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ad4dae9fbf054b06eba3d1a216a8c8580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>count</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a1747cfdb3a749c576dbf2a930ff7a010</anchor>
      <arglist>(UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>next</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ae613631e7b63a9987c056ad5b04251e5</anchor>
      <arglist>(int32_t *resultLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UChar *</type>
      <name>unext</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a3ea012fc20253a0d97801a1d3cee0fcf</anchor>
      <arglist>(int32_t *resultLength, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const UnicodeString *</type>
      <name>snext</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a371d8cb385f9602fb41ef356fa425181</anchor>
      <arglist>(UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a68de37a3dc40d92679551eacfb02006b</anchor>
      <arglist>(UErrorCode &amp;status)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a13c348b962a621828378624dbab94f29</anchor>
      <arglist>(const StringEnumeration &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>aac1c49b98bbae8fc8a16e5d6be11ba4c</anchor>
      <arglist>(const StringEnumeration &amp;that) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StringEnumeration</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ac526472a3acff96f58c2b34ffabdacaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ensureCharsCapacity</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ab7428b1c1baf1c9ac4922eca0a7ab636</anchor>
      <arglist>(int32_t capacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UnicodeString *</type>
      <name>setChars</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a80c0dcfe1fa814cc0d404fe0dbf2b267</anchor>
      <arglist>(const char *s, int32_t length, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnicodeString</type>
      <name>unistr</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ad6e99301df88ba7d1fac67181f98bd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>charsBuffer</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>ac6e6a6266dc50407ac399440a136195e</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>chars</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>aa91f702f4920744b448ef3b45e957ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>charsCapacity</name>
      <anchorfile>classStringEnumeration.html</anchorfile>
      <anchor>a34d0dc24d6f6ea33fbb5cc9186f03c58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringList</name>
    <filename>classStringList.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>StringList</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>a5043788e664be269fd431cf2b5ffad8f</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringList</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>a578ccde3ffad1066142964a8f63b609e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>a65ee667958ec2f511358b22f19236303</anchor>
      <arglist>(const UnicodeString *string, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>a29eaf472df275e5214e73a45f1b512be</anchor>
      <arglist>(const UChar *chars, int32_t count, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString *</type>
      <name>get</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>ac6c3ceb4e84d10f65e537e8249e84d34</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>size</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>ac237ec117eb953ab268a1d9c24e5fb6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>a589945e6af343714532e7be10a9ee6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classStringList.html</anchorfile>
      <anchor>ae59244f2368068aba86a8085666c4dd2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringPiece</name>
    <filename>classStringPiece.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a0f45b54fa594663333d1ac3c8d7c8997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a1f2ea703262cb6af2948bafb29b7325e</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a698a3300cd837fbf68746ffc0c1ef3f3</anchor>
      <arglist>(const U_STD_NSQ string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a1ebd684e27ba92ffdc17e9870355c56c</anchor>
      <arglist>(const char *offset, int32_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a6066a9bef281ff60b010610c15f71597</anchor>
      <arglist>(const StringPiece &amp;x, int32_t pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringPiece</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a4d6d3a0ad4cee017317272cd3a515174</anchor>
      <arglist>(const StringPiece &amp;x, int32_t pos, int32_t len)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a8c0f2264485f90b1d60aab587cab352f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>size</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a31645a6f83a6e338936007135d8f8a4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a56e2e8113c07d379a3deaaeed05dca60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>empty</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a4789a54e17fc082bdbbb615a67a19120</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>aba33c86f6353d50835ee4627a7b70326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a23fb19e624ea43cacdcb8f60273cdecf</anchor>
      <arglist>(const char *xdata, int32_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a3507b0b94d609529a659f35ca928b60b</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_prefix</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a52b2f79cab62b8bc75e204dcc896baae</anchor>
      <arglist>(int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_suffix</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>ad1ed9b146e3ba745f3b91debff9511ac</anchor>
      <arglist>(int32_t n)</arglist>
    </member>
    <member kind="function">
      <type>StringPiece</type>
      <name>substr</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>aad0e95f16e143ccfa69afbb33a9cf702</anchor>
      <arglist>(int32_t pos, int32_t len=npos) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>npos</name>
      <anchorfile>classStringPiece.html</anchorfile>
      <anchor>a640079800d8239870fa07c84b7c5895b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringSearch</name>
    <filename>classStringSearch.html</filename>
    <base>SearchIterator</base>
    <member kind="function">
      <type></type>
      <name>StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a885207b95a13ba21351b231cfe4aba71</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;text, const Locale &amp;locale, BreakIterator *breakiter, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>af03415171da40e9f2081f4b3a8df2a29</anchor>
      <arglist>(const UnicodeString &amp;pattern, const UnicodeString &amp;text, RuleBasedCollator *coll, BreakIterator *breakiter, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a98d9e22a093855f246d2fd5b7d6fb880</anchor>
      <arglist>(const UnicodeString &amp;pattern, CharacterIterator &amp;text, const Locale &amp;locale, BreakIterator *breakiter, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a8ea003c803fd3ecc7123d00476a8c28d</anchor>
      <arglist>(const UnicodeString &amp;pattern, CharacterIterator &amp;text, RuleBasedCollator *coll, BreakIterator *breakiter, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>aa43d0d4f3ef091de72d4567a83275a85</anchor>
      <arglist>(const StringSearch &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StringSearch</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>aadd5fee0ff9e4de3978292a40bc612a8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>StringSearch *</type>
      <name>clone</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>ad74cf1b1a756e4faa9c2303d36f9d0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a91aed07e16b843f72fe850c7f2c19008</anchor>
      <arglist>(const StringSearch &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a21f80025b81629fe6246a642b5f49ec9</anchor>
      <arglist>(const SearchIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a6cdb73b15960f85ef3b046a551a61ecf</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a36072e965203eb7272bc050a0c5e6e6b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a703c9716ef58efb5911229eaa2ed7e2a</anchor>
      <arglist>(const UnicodeString &amp;text, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a755fec7f70c3f7f9e2cb06985839ac43</anchor>
      <arglist>(CharacterIterator &amp;text, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>RuleBasedCollator *</type>
      <name>getCollator</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a2551cbc96cd5db22f2566018356abecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollator</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a4108fa46bb1a6917e88e8cce80c37150</anchor>
      <arglist>(RuleBasedCollator *coll, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>ae96cd9008bb35d9276626ffccb2db568</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getPattern</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>aa5fafdf5081d2376172738f2320843a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a298259adcc5316a74ac9ce9b22e97c03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SearchIterator *</type>
      <name>safeClone</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a4b33f73a68dceee80574f86f421798f4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a65fd205eb56b305671c5d4cb919fc0fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>a72e3de68073498e83bcb6b8a7dfc9441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handleNext</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>af72f5e342a08ab606435ae49dd41d23b</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>handlePrev</name>
      <anchorfile>classStringSearch.html</anchorfile>
      <anchor>aaeb4d82bf1a5917a2fd5819d179d050a</anchor>
      <arglist>(int32_t position, UErrorCode &amp;status)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder</name>
    <filename>classStringTrieBuilder.html</filename>
    <base>UObject</base>
    <class kind="class">StringTrieBuilder::BranchHeadNode</class>
    <class kind="class">StringTrieBuilder::BranchNode</class>
    <class kind="class">StringTrieBuilder::FinalValueNode</class>
    <class kind="class">StringTrieBuilder::IntermediateValueNode</class>
    <class kind="class">StringTrieBuilder::LinearMatchNode</class>
    <class kind="class">StringTrieBuilder::ListBranchNode</class>
    <class kind="class">StringTrieBuilder::Node</class>
    <class kind="class">StringTrieBuilder::SplitBranchNode</class>
    <class kind="class">StringTrieBuilder::ValueNode</class>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>hashNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a351f90cf60a19503216f43209edb23ec</anchor>
      <arglist>(const void *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>equalNodes</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a11ce7fe91c01a6428b2109ab10b698f4</anchor>
      <arglist>(const void *left, const void *right)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StringTrieBuilder</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a39d8e8445e83dcc2c1d97e74dd6d45b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~StringTrieBuilder</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a82990604d33ffbf6fe8e74638ae46b04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createCompactBuilder</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a4dc6063efbeeca4769a27470932b21a9</anchor>
      <arglist>(int32_t sizeGuess, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCompactBuilder</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>abd4df5d982108c1f62a1e662a3861366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>build</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>ad7c3111f6ed1404eff73b05f31ecb291</anchor>
      <arglist>(UStringTrieBuildOption buildOption, int32_t elementsLength, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>writeNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a990ecebb23f6ea5f9ecd72ae04ea87ad</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t unitIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32_t</type>
      <name>writeBranchSubNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>aa8166a18c1b06b4413bef39e4399cece</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t unitIndex, int32_t length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>makeNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a35f78666c4d64db0868f7713b1dde23e</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t unitIndex, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>makeBranchSubNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>ab9bc1f6947b9423e6ccc31d725d122f2</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t unitIndex, int32_t length, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getElementStringLength</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a732033b515fa59759aab45baa336e033</anchor>
      <arglist>(int32_t i) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual UChar</type>
      <name>getElementUnit</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a7493ccfac3cf55a1bad6b2ddab830a9b</anchor>
      <arglist>(int32_t i, int32_t unitIndex) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getElementValue</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a6cb9cf26f4d9cfa90423f98c99a37b22</anchor>
      <arglist>(int32_t i) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getLimitOfLinearMatch</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a9a8e24c34c085b71c160f59b5403a474</anchor>
      <arglist>(int32_t first, int32_t last, int32_t unitIndex) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>countElementUnits</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a180b27e7b838ab40dd726c56890afe7c</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t unitIndex) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>skipElementsBySomeUnits</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a021b439fbd714af49d820f16d3e71d38</anchor>
      <arglist>(int32_t i, int32_t unitIndex, int32_t count) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>indexOfElementWithNextUnit</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a51b85346d57c957510e9624b98371898</anchor>
      <arglist>(int32_t i, int32_t unitIndex, UChar unit) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual UBool</type>
      <name>matchNodesCanHaveValues</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a7f88bb9e453c158762acb44563e6b482</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getMaxBranchLinearSubNodeLength</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a2923a935f727fd44c6f6cffb9ad71084</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getMinLinearMatch</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a5feedfd498181e524a9ad1a3331ba86c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getMaxLinearMatchLength</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>ada805e90907360d715d60122429a5bb1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>registerNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a6c15186ff09db81180b2b3f5508adfab</anchor>
      <arglist>(Node *newNode, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>registerFinalValue</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a43ea83759bb95c972685ca503d0f1464</anchor>
      <arglist>(int32_t value, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Node *</type>
      <name>createLinearMatchNode</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a7cfd4d1e3de0b05152bb5b7882712580</anchor>
      <arglist>(int32_t i, int32_t unitIndex, int32_t length, Node *nextNode) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a3ef088046dc1b5da50a58a79acc32279</anchor>
      <arglist>(int32_t unit)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>writeElementUnits</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>ab73da4dc572b8e437f4756ce40886683</anchor>
      <arglist>(int32_t i, int32_t unitIndex, int32_t length)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>writeValueAndFinal</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a875c42b9a9123033f8a4ec28180dc6f0</anchor>
      <arglist>(int32_t i, UBool isFinal)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>writeValueAndType</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>af4545bf42cf5c5baab3db8338e8cfbd0</anchor>
      <arglist>(UBool hasValue, int32_t value, int32_t node)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int32_t</type>
      <name>writeDeltaTo</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>ad5d3074248fd62393e0b501bcc65540b</anchor>
      <arglist>(int32_t jumpTarget)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UHashtable *</type>
      <name>nodes</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a3e442865c6c6f40415f47a95e5710445</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32_t</type>
      <name>kMaxBranchLinearSubNodeLength</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a294f3aabd7c78b6ea42cacd76670b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32_t</type>
      <name>kMaxSplitBranchLevels</name>
      <anchorfile>classStringTrieBuilder.html</anchorfile>
      <anchor>a4b8752ac681cca037977d8ebeab2371d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::BranchHeadNode</name>
    <filename>classStringTrieBuilder_1_1BranchHeadNode.html</filename>
    <base>StringTrieBuilder::ValueNode</base>
    <member kind="function">
      <type></type>
      <name>BranchHeadNode</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>a76c7f4165984482a191e508c68208f3c</anchor>
      <arglist>(int32_t len, Node *subNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>acb1e76f1a3dbdb58a036f26663b25316</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>addd8d30c2a635558d6f61a09c22b7fa0</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>a3cb5332439dedc5bfd2c2325c7271ed8</anchor>
      <arglist>(StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>a6d80bdfb90132d8f2dc86e3a211be914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>next</name>
      <anchorfile>classStringTrieBuilder_1_1BranchHeadNode.html</anchorfile>
      <anchor>acc12751b4a732cdf82d27c64b68db656</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::BranchNode</name>
    <filename>classStringTrieBuilder_1_1BranchNode.html</filename>
    <base>StringTrieBuilder::Node</base>
    <member kind="function">
      <type></type>
      <name>BranchNode</name>
      <anchorfile>classStringTrieBuilder_1_1BranchNode.html</anchorfile>
      <anchor>a5e42216e0ced62d77f79222a87233eed</anchor>
      <arglist>(int32_t initialHash)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>firstEdgeNumber</name>
      <anchorfile>classStringTrieBuilder_1_1BranchNode.html</anchorfile>
      <anchor>adf8b79e1a169effc214db0fc1993393b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::FinalValueNode</name>
    <filename>classStringTrieBuilder_1_1FinalValueNode.html</filename>
    <base>StringTrieBuilder::Node</base>
    <member kind="function">
      <type></type>
      <name>FinalValueNode</name>
      <anchorfile>classStringTrieBuilder_1_1FinalValueNode.html</anchorfile>
      <anchor>adbd25fd4b61db9196ed40ab4a5ab9901</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1FinalValueNode.html</anchorfile>
      <anchor>a179aa62b6bd6c60eacfa91a5b0dfc4f4</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1FinalValueNode.html</anchorfile>
      <anchor>a6a9faf5d1c77c4303fc882fbf8a153c1</anchor>
      <arglist>(StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>value</name>
      <anchorfile>classStringTrieBuilder_1_1FinalValueNode.html</anchorfile>
      <anchor>a64790426cd8974be8bbac5a3c722fb12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::IntermediateValueNode</name>
    <filename>classStringTrieBuilder_1_1IntermediateValueNode.html</filename>
    <base>StringTrieBuilder::ValueNode</base>
    <member kind="function">
      <type></type>
      <name>IntermediateValueNode</name>
      <anchorfile>classStringTrieBuilder_1_1IntermediateValueNode.html</anchorfile>
      <anchor>a35366a93720dde7c3b5487bf68052765</anchor>
      <arglist>(int32_t v, Node *nextNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1IntermediateValueNode.html</anchorfile>
      <anchor>a0d6f42de3b76b0c5fe6df953f0f7a63d</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1IntermediateValueNode.html</anchorfile>
      <anchor>a3223e369a9b334d636924ae4e44ba6f9</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1IntermediateValueNode.html</anchorfile>
      <anchor>afee201e34d84b2e0f7266abb3f39d1f7</anchor>
      <arglist>(StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>next</name>
      <anchorfile>classStringTrieBuilder_1_1IntermediateValueNode.html</anchorfile>
      <anchor>a5b20b5651daecdb7bd5f04a8eceb1e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::LinearMatchNode</name>
    <filename>classStringTrieBuilder_1_1LinearMatchNode.html</filename>
    <base>StringTrieBuilder::ValueNode</base>
    <member kind="function">
      <type></type>
      <name>LinearMatchNode</name>
      <anchorfile>classStringTrieBuilder_1_1LinearMatchNode.html</anchorfile>
      <anchor>a59226bbe9ee34e48283a982b51596082</anchor>
      <arglist>(int32_t len, Node *nextNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1LinearMatchNode.html</anchorfile>
      <anchor>aa8780facdfc993e356065dcd58b71cbc</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1LinearMatchNode.html</anchorfile>
      <anchor>a7822a1fb7a78782fe5ae8309d14b9fe2</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classStringTrieBuilder_1_1LinearMatchNode.html</anchorfile>
      <anchor>ae2fe05d43f729be13db42b8705533345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>next</name>
      <anchorfile>classStringTrieBuilder_1_1LinearMatchNode.html</anchorfile>
      <anchor>ace7c446829a82ee27fb23747255465db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::ListBranchNode</name>
    <filename>classStringTrieBuilder_1_1ListBranchNode.html</filename>
    <base>StringTrieBuilder::BranchNode</base>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>a3d219ccff737b7bf5de035c13c455350</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>aadb843d80c7f0587e961b68539c91fb1</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>a9f879dd0b9748284aed0981687c0975c</anchor>
      <arglist>(StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>a9b069dd2f15455cfdc18421bcd6fdb1d</anchor>
      <arglist>(int32_t c, int32_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>a05631011258b2c54b8a2852d9eb6726d</anchor>
      <arglist>(int32_t c, Node *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>equal</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>ad9d4a39f5388bc0c5aab85fa22a4ec6f</anchor>
      <arglist>[kMaxBranchLinearSubNodeLength]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>a4e1b8fb3441852fe6ec2f8e5be67b5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>values</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>ab2000876eb647b78ac2f402372526fc5</anchor>
      <arglist>[kMaxBranchLinearSubNodeLength]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UChar</type>
      <name>units</name>
      <anchorfile>classStringTrieBuilder_1_1ListBranchNode.html</anchorfile>
      <anchor>ae5755619be105a0a8021248cd372bfc1</anchor>
      <arglist>[kMaxBranchLinearSubNodeLength]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::Node</name>
    <filename>classStringTrieBuilder_1_1Node.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>adccd346893ef1b72e5847f988bdc885f</anchor>
      <arglist>(int32_t initialHash)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>ad039a9ade764d8b128c2f8e75254f2ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>a1797222a8ea26494b314733a140c38fe</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>aa6a49f2817ebeeb4d256fce177f1a27a</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>af78a4a35580b5b6790bb36aaf3d5dcb4</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>aa2be870c3196c2d3a26747fdd68f8650</anchor>
      <arglist>(StringTrieBuilder &amp;builder)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnlessInsideRightEdge</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>aab15b0acdcc1ec21fed9f704f0fa791e</anchor>
      <arglist>(int32_t firstRight, int32_t lastRight, StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getOffset</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>ab4a16694fb6383f096c6c3bd0f6681e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>hashCode</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>a3859b781ac5ae8239f4daa74e0e46989</anchor>
      <arglist>(const Node *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>hash</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>aa1d3d4154d0cd9018148022d151179fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>offset</name>
      <anchorfile>classStringTrieBuilder_1_1Node.html</anchorfile>
      <anchor>a366e2c3b5e1e93fea0dfa683c8b0f063</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::SplitBranchNode</name>
    <filename>classStringTrieBuilder_1_1SplitBranchNode.html</filename>
    <base>StringTrieBuilder::BranchNode</base>
    <member kind="function">
      <type></type>
      <name>SplitBranchNode</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>ae30418316ea78ad17733bff45fd7f329</anchor>
      <arglist>(UChar middleUnit, Node *lessThanNode, Node *greaterOrEqualNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>a987736e8bc9a69bb96c8e69c0aad9afc</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>markRightEdgesFirst</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>ab50502af618b9c48d0021c979c542225</anchor>
      <arglist>(int32_t edgeNumber)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>a806cd7d549e4e130bb16bcf613dedd59</anchor>
      <arglist>(StringTrieBuilder &amp;builder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UChar</type>
      <name>unit</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>a664ebb21c2e0ed5dc7c1c2f4394cc56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>lessThan</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>ab9d13d5bfe8e35cb19cd765e0a819e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>greaterOrEqual</name>
      <anchorfile>classStringTrieBuilder_1_1SplitBranchNode.html</anchorfile>
      <anchor>aeef3c8ec186110e964dc92a77f0f130e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringTrieBuilder::ValueNode</name>
    <filename>classStringTrieBuilder_1_1ValueNode.html</filename>
    <base>StringTrieBuilder::Node</base>
    <member kind="function">
      <type></type>
      <name>ValueNode</name>
      <anchorfile>classStringTrieBuilder_1_1ValueNode.html</anchorfile>
      <anchor>a751888fbb9f0f307fe4b0806c3a6895e</anchor>
      <arglist>(int32_t initialHash)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classStringTrieBuilder_1_1ValueNode.html</anchorfile>
      <anchor>a7a7226594d1e284a4442c42252f71154</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classStringTrieBuilder_1_1ValueNode.html</anchorfile>
      <anchor>a9f0828f0fa8c04e0fe64af6d8969fde7</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UBool</type>
      <name>hasValue</name>
      <anchorfile>classStringTrieBuilder_1_1ValueNode.html</anchorfile>
      <anchor>adb892dd254ce362e1f557ac6f5a02a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>value</name>
      <anchorfile>classStringTrieBuilder_1_1ValueNode.html</anchorfile>
      <anchor>a625c75cf6b63addd8110bb8334ea08c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SymbolTable</name>
    <filename>classSymbolTable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymbolTable</name>
      <anchorfile>classSymbolTable.html</anchorfile>
      <anchor>a99d9761b5e4ed605f44aa32193c8d423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const UnicodeString *</type>
      <name>lookup</name>
      <anchorfile>classSymbolTable.html</anchorfile>
      <anchor>afd746b7f9b00cb972259730882310e7a</anchor>
      <arglist>(const UnicodeString &amp;s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const UnicodeFunctor *</type>
      <name>lookupMatcher</name>
      <anchorfile>classSymbolTable.html</anchorfile>
      <anchor>aee8234b6989623108130569f621f8265</anchor>
      <arglist>(UChar32 ch) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString</type>
      <name>parseReference</name>
      <anchorfile>classSymbolTable.html</anchorfile>
      <anchor>a120576e2c3fa932fac554c70305109c1</anchor>
      <arglist>(const UnicodeString &amp;text, ParsePosition &amp;pos, int32_t limit) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeArrayTimeZoneRule</name>
    <filename>classTimeArrayTimeZoneRule.html</filename>
    <base>TimeZoneRule</base>
    <member kind="function">
      <type></type>
      <name>TimeArrayTimeZoneRule</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a5392083987defafd36d699ae53f3feb6</anchor>
      <arglist>(const UnicodeString &amp;name, int32_t rawOffset, int32_t dstSavings, const UDate *startTimes, int32_t numStartTimes, DateTimeRule::TimeRuleType timeRuleType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeArrayTimeZoneRule</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a98ba4c0d82ad4e49f7dd1b89ca89228b</anchor>
      <arglist>(const TimeArrayTimeZoneRule &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeArrayTimeZoneRule</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a06e3d55572268243759d91bd0bd99d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeArrayTimeZoneRule *</type>
      <name>clone</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a4f381cdb0b0a182081bb5542b983439a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TimeArrayTimeZoneRule &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a40f628d3f8bce696869cb874a55aed56</anchor>
      <arglist>(const TimeArrayTimeZoneRule &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a029782dfc3e20e0e7b585dac1a8742c0</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>aa05a9811b5e97f0416a568197151884a</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>DateTimeRule::TimeRuleType</type>
      <name>getTimeType</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a3d74b2250ae48f9e003d8ba512c57308</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getStartTimeAt</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a282d8c2e353c1409d65fe46f37611b92</anchor>
      <arglist>(int32_t index, UDate &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>countStartTimes</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a4d7634c40912b884421d6e46434a2d56</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a37acc3f8a5f4296e01f57c1a0124af83</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFirstStart</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a0828d85145902127ed774293ab05c9ca</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getFinalStart</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>aacc1a6bf72f5547a4952a5626415eb2d</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextStart</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a6f72dac02e125c96182e982d49b0c3f1</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousStart</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a78ffaae85a1ceb3ff6747e26ae7d9d8e</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>a9fa166a6df33f6142621933800dcbfeb</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeArrayTimeZoneRule.html</anchorfile>
      <anchor>aa52b21f052bfe101f262beb4037429df</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeUnit</name>
    <filename>classTimeUnit.html</filename>
    <base>MeasureUnit</base>
    <member kind="enumeration">
      <name>UTimeUnitFields</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>ae2d5d436eba101f01404010719a37def</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a929d0c7c2116749be8e1147ead7f9b1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnit</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a9cace4e128dac3d28ea8aa7e2081b6c3</anchor>
      <arglist>(const TimeUnit &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TimeUnit &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a0cf0d2873b4a77711f4a1f91f399a797</anchor>
      <arglist>(const TimeUnit &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>ae0dcff04f40a0e55dc2b11d36541d946</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>adc3a65760e92c2f776199a3c52b59de6</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>aefcfb6cc938fa1b8bd2b63e48a20bdf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UTimeUnitFields</type>
      <name>getTimeUnitField</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a1b81a5f4937ff85a2568295fc8645408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeUnit</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a621aa5562a6d958cfad22d25eccc8e34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeUnit *</type>
      <name>createInstance</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a9140d6f17ab6aff4ad70ce781aab35e3</anchor>
      <arglist>(UTimeUnitFields timeUnitField, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeUnit.html</anchorfile>
      <anchor>a58c9470e22d15ab66b1fadfb90200640</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeUnitAmount</name>
    <filename>classTimeUnitAmount.html</filename>
    <base>Measure</base>
    <member kind="function">
      <type></type>
      <name>TimeUnitAmount</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a327e63a558b2d5112a38793aee790c02</anchor>
      <arglist>(const Formattable &amp;number, TimeUnit::UTimeUnitFields timeUnitField, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnitAmount</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>ac7b415cd99dcf5119061d964f583ff44</anchor>
      <arglist>(double amount, TimeUnit::UTimeUnitFields timeUnitField, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnitAmount</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a022911ea7347828e8409690ebd7ba6b9</anchor>
      <arglist>(const TimeUnitAmount &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TimeUnitAmount &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a5fdb0e061c56daa1fc96726754dc6007</anchor>
      <arglist>(const TimeUnitAmount &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UObject *</type>
      <name>clone</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>ad7513ffc783177dce007b5bfe8a9a47d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeUnitAmount</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a1f0f00e2b282471f96627c1fc5dc3f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a84c5fe992d837b3741c0eedd5d0d022f</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a2b4843b9ae3969880ae74e6b2dc779fa</anchor>
      <arglist>(const UObject &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a2fdce330cce3590e9068d393ff9ce9b2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const TimeUnit &amp;</type>
      <name>getTimeUnit</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a39bb8968c6d5b12ce3d6af049a3a6950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeUnit::UTimeUnitFields</type>
      <name>getTimeUnitField</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a50053ec154f9a8059fb0865f3e37d2da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeUnitAmount.html</anchorfile>
      <anchor>a8f4a246cb8c95199f95b36f3bb6d1314</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeUnitFormat</name>
    <filename>classTimeUnitFormat.html</filename>
    <base>MeasureFormat</base>
    <member kind="function">
      <type></type>
      <name>TimeUnitFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a72e623d6fb0226287fde0bfa71cddc17</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnitFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>ac641f50a05f512c46d7a29aee56ccbf1</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnitFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a675c90093c4c4580644a6b367994f89f</anchor>
      <arglist>(const Locale &amp;locale, UTimeUnitFormatStyle style, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeUnitFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a7c38c9533b75ffc5fbb8b29a7ae3513c</anchor>
      <arglist>(const TimeUnitFormat &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeUnitFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>aa5535aecfeffc12710a1ff44e689edb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Format *</type>
      <name>clone</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a43917ab066f1582afeb05f6fdf7684da</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TimeUnitFormat &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a4e527fbe06dc2641661427348c229811</anchor>
      <arglist>(const TimeUnitFormat &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>afbb2c78b280ab5abb53a310f51039358</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>ad669c6e3281f653cff3de8559e9d42d7</anchor>
      <arglist>(const Format &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocale</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>aeb1fc25598a4337caf0d8b6982fc074c</anchor>
      <arglist>(const Locale &amp;locale, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberFormat</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a688a78002b3679e812cc05bc9ed31eb9</anchor>
      <arglist>(const NumberFormat &amp;format, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>format</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a55e29d1d260c1c775e8d1d36c03ab0ad</anchor>
      <arglist>(const Formattable &amp;obj, UnicodeString &amp;toAppendTo, FieldPosition &amp;pos, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseObject</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>af37d73dc96d335c4e03cd29b2316fca4</anchor>
      <arglist>(const UnicodeString &amp;source, Formattable &amp;result, ParsePosition &amp;pos) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a8f803c89e8485b013329529aa31d15f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeUnitFormat.html</anchorfile>
      <anchor>a60999f5e140c293674f778df32551447</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeZone</name>
    <filename>classTimeZone.html</filename>
    <base>UObject</base>
    <member kind="enumeration">
      <name>EDisplayType</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393a721dd973541bdad74cd4af5d41a99993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393a1f63fa890c7aee89716ef1591d79c53f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_GENERIC</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393a7eb16b35ebf8ebf5dc0cf9173c2c2d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG_GENERIC</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393ad4acebec1b76a620d38a5c2e349537ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_GMT</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393af8bdb16bb0f0215dcea38090acefee18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONG_GMT</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393aa01673d338581b8c60f6136b4a6714a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORT_COMMONLY_USED</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393a559ce2228e2befd05a2dd161afe30aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERIC_LOCATION</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3389b02eacd9bdcd90943165c63f1393a95fb245e02f8a0aa1040078a831d6eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeZone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a217918d77d5d3e3a0ad2d1947f21f26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a2c75a7026d9e0f061d0561fdcd6285bc</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a21d77d23b5771d6c505df92a67f90c0b</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a017d9aeff3e3bbef824088d8fadeb800</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>adfa3ff0693402eca3af43519fa88d520</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t milliseconds, int32_t monthLength, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffset</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>af11878c114a8fe5885c28464716a8cb7</anchor>
      <arglist>(UDate date, UBool local, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRawOffset</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>aa10a9a17184453e742bab37a99efb84e</anchor>
      <arglist>(int32_t offsetMillis)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>getRawOffset</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a8ad1d8e8ab11e48628ff5789d8d0170d</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a5135fc9e1727a70764103ff4d8ce690e</anchor>
      <arglist>(UnicodeString &amp;ID) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a37aa800476778b81a255506103e92136</anchor>
      <arglist>(const UnicodeString &amp;ID)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a593b832ff5a9eb0bb1167252aac225c9</anchor>
      <arglist>(UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a5bcf5bfab02c5d3d4dd14f3e98a42692</anchor>
      <arglist>(const Locale &amp;locale, UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a858fa452768da2ec9008103dbcabbcd7</anchor>
      <arglist>(UBool daylight, EDisplayType style, UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a06502872a743b89097519e86b671bef9</anchor>
      <arglist>(UBool daylight, EDisplayType style, const Locale &amp;locale, UnicodeString &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>useDaylightTime</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a075576d70d80a056b9b9f8ef39acafee</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>abb24bd8b13b6fdf6d123747084ecbd68</anchor>
      <arglist>(UDate date, UErrorCode &amp;status) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasSameRules</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>aebed1d2142308466e51029d0b895d932</anchor>
      <arglist>(const TimeZone &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimeZone *</type>
      <name>clone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a35b23140b29f59560b12da3450289347</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a825e1474130ebcdfedc7ffa64c016220</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getDSTSavings</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>ab6f2f5a872528bd8ab664378338deaad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TimeZone *</type>
      <name>getGMT</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a50b68aadc74671ecd4e00c6a27deff9e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone *</type>
      <name>createTimeZone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a11ffc5d14d3956478110909e6dca01b6</anchor>
      <arglist>(const UnicodeString &amp;ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>createTimeZoneIDEnumeration</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a2c84994a07e360625e91b778c26da4ca</anchor>
      <arglist>(USystemTimeZoneType zoneType, const char *region, const int32_t *rawOffset, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>createEnumeration</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a362ad48ebf317d439247b3bc0e40789d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>createEnumeration</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a21e73bc11f44cc82aa006a138d0cd3c9</anchor>
      <arglist>(int32_t rawOffset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>createEnumeration</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a6621223637dd52ff7b0f7f890c806441</anchor>
      <arglist>(const char *country)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>countEquivalentIDs</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a3527d4cd0c608da0a1390f6acaae71f9</anchor>
      <arglist>(const UnicodeString &amp;id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UnicodeString</type>
      <name>getEquivalentID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>ab0b6c33dc8cddd291ba32c749a518323</anchor>
      <arglist>(const UnicodeString &amp;id, int32_t index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone *</type>
      <name>createDefault</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>aeb13a4845ba186dc4c1151f4cd3de0a6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adoptDefault</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>ab7866aca16d2dc234452e0c69fdf9f68</anchor>
      <arglist>(TimeZone *zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setDefault</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a5919faba4e0fec84943ffb6f8f5b69e5</anchor>
      <arglist>(const TimeZone &amp;zone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTZDataVersion</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a8a992860fea72202f1f7e9f04cd29f44</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getCanonicalID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a0bf42643e7a2bd8a1c71bcf2c5b28d46</anchor>
      <arglist>(const UnicodeString &amp;id, UnicodeString &amp;canonicalID, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getCanonicalID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a326de476b4e103325c5306fb2ad3e9b9</anchor>
      <arglist>(const UnicodeString &amp;id, UnicodeString &amp;canonicalID, UBool &amp;isSystemID, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a6089503a336da33a745c99ce9a03bc16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getRegion</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>af5b654deb4d111fb8cf49919893f1e3a</anchor>
      <arglist>(const UnicodeString &amp;id, char *region, int32_t capacity, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a7d41f8d4c3314f43bd076bc443bf7854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a69223432bbff1ce0e81266042c4c8f5a</anchor>
      <arglist>(const UnicodeString &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a84f048b12288b9085a4703c4fda7e4bc</anchor>
      <arglist>(const TimeZone &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a2b67f0f38a5462a2096ce5e3c0b6890e</anchor>
      <arglist>(const TimeZone &amp;right)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static UResourceBundle *</type>
      <name>loadRule</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a6ae773281580135bbda4d41ad3077ff9</anchor>
      <arglist>(const UResourceBundle *top, const UnicodeString &amp;ruleid, UResourceBundle *oldbundle, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ZoneMeta</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a8808011c43a2eec7a74da951efa88175</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TZEnumeration</name>
      <anchorfile>classTimeZone.html</anchorfile>
      <anchor>a5d2bb775da787ab765afea098bae320f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeZoneRule</name>
    <filename>classTimeZoneRule.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeZoneRule</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a23098bb7e6eb03577f99b16a96989e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimeZoneRule *</type>
      <name>clone</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a7268c8bdb79e5a7525efb5794f7631b0</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>ae93f7be7cb8b6af13a8d574c123b5769</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a3fc6bd04ba36665d815cbd5746e140cf</anchor>
      <arglist>(const TimeZoneRule &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>getName</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a491703b22b92c9f5b1e5ed714bcf89fd</anchor>
      <arglist>(UnicodeString &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRawOffset</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a62f50d95c24e217a2f2a5d70e6b0e5a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getDSTSavings</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a9ad7efcdaf3ea1d9101a9016f21ae46a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEquivalentTo</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a7388aaea1ac22ac9e0c5a197f7097c15</anchor>
      <arglist>(const TimeZoneRule &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getFirstStart</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a582f85ec08ba2cbfad4b0d397d1f920c</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getFinalStart</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>ab37a233363ee18108e35d613ee3e9e56</anchor>
      <arglist>(int32_t prevRawOffset, int32_t prevDSTSavings, UDate &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getNextStart</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>aa53c5f88f33cc26117c06a5bd1038280</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>getPreviousStart</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>aefa099d12a5eb1229b6503ffea506d47</anchor>
      <arglist>(UDate base, int32_t prevRawOffset, int32_t prevDSTSavings, UBool inclusive, UDate &amp;result) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeZoneRule</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>abafbafe1daf453db1ec57e12e06957d0</anchor>
      <arglist>(const UnicodeString &amp;name, int32_t rawOffset, int32_t dstSavings)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeZoneRule</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>a455c5d02c01e3396d661632a8a17cb56</anchor>
      <arglist>(const TimeZoneRule &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TimeZoneRule &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeZoneRule.html</anchorfile>
      <anchor>aa11d2fed66a0728be2ce2d8d7c167138</anchor>
      <arglist>(const TimeZoneRule &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TimeZoneTransition</name>
    <filename>classTimeZoneTransition.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>TimeZoneTransition</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>ad0640a267c02a278bb1ca7ac87cff534</anchor>
      <arglist>(UDate time, const TimeZoneRule &amp;from, const TimeZoneRule &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZoneTransition</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>ae49ac69b942d53f37182f8dfc21394da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZoneTransition</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>ac4e4832203108fa212ef03edd52bd1cf</anchor>
      <arglist>(const TimeZoneTransition &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeZoneTransition</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>af4cc882ceabeb3c60b7d2dc76b61eb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimeZoneTransition *</type>
      <name>clone</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>aefcc2c7a7481c1a25866a87c19a32eb9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>TimeZoneTransition &amp;</type>
      <name>operator=</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>aab048ae06a542feeb3a34accaffb1505</anchor>
      <arglist>(const TimeZoneTransition &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>ae04f8a07367b31e6fb2bb989d85fa786</anchor>
      <arglist>(const TimeZoneTransition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a4dbfd4c62ec8519243882b60eedc74ba</anchor>
      <arglist>(const TimeZoneTransition &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UDate</type>
      <name>getTime</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>aaf487fffa32a7257e593b3db49bdd767</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>abd73f91961d8c9fc8120ad8ef1fbac30</anchor>
      <arglist>(UDate time)</arglist>
    </member>
    <member kind="function">
      <type>const TimeZoneRule *</type>
      <name>getFrom</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a4ac7612059a19310fc55710bbefbfdbf</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrom</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a4fa4a14a4d51f2fce5abf5cc1f000006</anchor>
      <arglist>(const TimeZoneRule &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptFrom</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a44f23c7fd7ed46a0f5a41a7a80c339b0</anchor>
      <arglist>(TimeZoneRule *from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>abacc12518f1077c49b7f5a241a5034ab</anchor>
      <arglist>(const TimeZoneRule &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptTo</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a8575befb410c94503906137aa4abdd74</anchor>
      <arglist>(TimeZoneRule *to)</arglist>
    </member>
    <member kind="function">
      <type>const TimeZoneRule *</type>
      <name>getTo</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a198d34f4cf6dda380ec6dfbd66888e18</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>ab4cef4357f1db709e4abb1ab7d7f096f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTimeZoneTransition.html</anchorfile>
      <anchor>a14f711662f562da4c190597e4980bb41</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Transliterator</name>
    <filename>classTransliterator.html</filename>
    <base>UObject</base>
    <class kind="union">Transliterator::Token</class>
    <member kind="typedef">
      <type>Transliterator *(*</type>
      <name>Factory</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a73f08a638882083eef1a9924d7a477d1</anchor>
      <arglist>)(const UnicodeString &amp;ID, Token context)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transliterator</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ac4013e2d2c6e16b3e394aab80b91d576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Transliterator *</type>
      <name>clone</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a3428b2683305473bb0002f11a10e1cf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>transliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a7435bedc8b4fa8ce35a547f72d70b53e</anchor>
      <arglist>(Replaceable &amp;text, int32_t start, int32_t limit) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a725cc5e455c357f68b02bbd18296a750</anchor>
      <arglist>(Replaceable &amp;text) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aec5722d29911049b6faba9a0cc708d03</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;index, const UnicodeString &amp;insertion, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad15a021fec98991350dfeeb56709ddf1</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;index, UChar32 insertion, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aac26de33223414c3eb9afa54693f4fe8</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;index, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishTransliteration</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ae90ebaa3777e1b337a8b43f72043ba9b</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filteredTransliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a7dc8b54794b654f27529fbbecd8c9dad</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;index, UBool incremental) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaximumContextLength</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a84d9875cefd3988541aaf483d1e9a82d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const UnicodeString &amp;</type>
      <name>getID</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ae12d54d2a98bfb701c70569888e1268f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeFilter *</type>
      <name>getFilter</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a5c0bbd53fc83952c3faa736149435914</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeFilter *</type>
      <name>orphanFilter</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a7fb092740a69ef46b054293f73443a6a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptFilter</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aeb0d7590bf0e89f806da8ac56bbf2053</anchor>
      <arglist>(UnicodeFilter *adoptedFilter)</arglist>
    </member>
    <member kind="function">
      <type>Transliterator *</type>
      <name>createInverse</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aee2d1ba22e13026dae1eb921c415db7e</anchor>
      <arglist>(UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toRules</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ae8f5c44e408007a3b9dec9e65a4d3979</anchor>
      <arglist>(UnicodeString &amp;result, UBool escapeUnprintable) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>countElements</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a0d30c80abe240e0a85fe41703e2d2840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transliterator &amp;</type>
      <name>getElement</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aa60d2806654114a88143473a413f394b</anchor>
      <arglist>(int32_t index, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>getSourceSet</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ade60aabeee2ead6de597dab881a677b3</anchor>
      <arglist>(UnicodeSet &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleGetSourceSet</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a303fc561d0d1f095d7f03ef6bb3757e5</anchor>
      <arglist>(UnicodeSet &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>getTargetSet</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a69b0de366b205dc4b595bc3fbc3a2441</anchor>
      <arglist>(UnicodeSet &amp;result) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad9666980027148a5fe13818d5f3d94b3</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Token</type>
      <name>integerToken</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a342569396703e01bb65456086d86725d</anchor>
      <arglist>(int32_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Token</type>
      <name>pointerToken</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a7ca85ab699350d7c79781bc36f229fdb</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a927c33c4e6a74845c378365d4c8064ed</anchor>
      <arglist>(const UnicodeString &amp;ID, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getDisplayName</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad2affa047130726ffdcedfc487d2d06a</anchor>
      <arglist>(const UnicodeString &amp;ID, const Locale &amp;inLocale, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transliterator *</type>
      <name>createInstance</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a2f05234089bce955d76f0456463312b1</anchor>
      <arglist>(const UnicodeString &amp;ID, UTransDirection dir, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transliterator *</type>
      <name>createInstance</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a73bf362b7f831f561e62a469a0769b96</anchor>
      <arglist>(const UnicodeString &amp;ID, UTransDirection dir, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transliterator *</type>
      <name>createFromRules</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a51a5fb28ec983f71b5cae61f7f5b49aa</anchor>
      <arglist>(const UnicodeString &amp;ID, const UnicodeString &amp;rules, UTransDirection dir, UParseError &amp;parseError, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerFactory</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a086de505c6d1c49a98cf92c5599a5056</anchor>
      <arglist>(const UnicodeString &amp;id, Factory factory, Token context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerInstance</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a9fcc16b6d3ad07c7a84077d61a581a70</anchor>
      <arglist>(Transliterator *adoptedObj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerAlias</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a0878ccd62f3eecd12b7c08096c724d6f</anchor>
      <arglist>(const UnicodeString &amp;aliasID, const UnicodeString &amp;realID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a937a2ff166fda1df520938c5ba9aec69</anchor>
      <arglist>(const UnicodeString &amp;ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StringEnumeration *</type>
      <name>getAvailableIDs</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>adaa0f1b3ec9c15dcd542bba8275a1870</anchor>
      <arglist>(UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>countAvailableSources</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad07c972570fb77760662ebb1e0ea76c2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getAvailableSource</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aeadc225b4df6a194039a9e11638a4269</anchor>
      <arglist>(int32_t index, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>countAvailableTargets</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aef4bf25d579fc4b1925977a784e778f5</anchor>
      <arglist>(const UnicodeString &amp;source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getAvailableTarget</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>afdd04fca1e0c5de3cc2e199e2dd76ac5</anchor>
      <arglist>(int32_t index, const UnicodeString &amp;source, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>countAvailableVariants</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a9aae54d7d1ed0c0d61119dfbf48cf369</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>getAvailableVariant</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a1b2692759e0b06a1bc4c7b7cfb435199</anchor>
      <arglist>(int32_t index, const UnicodeString &amp;source, const UnicodeString &amp;target, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aabda713495fc6096b5ecf814d4cc090c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>countAvailableIDs</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a7684c3fc22b9b15d1dcd26e9ff3ce5dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UnicodeString &amp;</type>
      <name>getAvailableID</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a5acc8d6ddeffac69d114fdd2d8d3b0e7</anchor>
      <arglist>(int32_t index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transliterator</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>afd511b887c83c846dd865417e8114cba</anchor>
      <arglist>(const UnicodeString &amp;ID, UnicodeFilter *adoptedFilter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transliterator</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad61fcaf8f827ed18a95436b7f1e50961</anchor>
      <arglist>(const Transliterator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Transliterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad1ed88d81a3a076747d60d03bd811de9</anchor>
      <arglist>(const Transliterator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>handleTransliterate</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ac498600590a8f6357fcba6b6ae78276e</anchor>
      <arglist>(Replaceable &amp;text, UTransPosition &amp;pos, UBool incremental) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMaximumContextLength</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a33890969c494e4e6986ab8d9d497d89d</anchor>
      <arglist>(int32_t maxContextLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ac4b54f77bfbde87231e4e331126e6147</anchor>
      <arglist>(const UnicodeString &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Transliterator *</type>
      <name>createBasicInstance</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad9c4f64299a95bea6102c59b83978e95</anchor>
      <arglist>(const UnicodeString &amp;id, const UnicodeString *canon)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>_registerFactory</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a18fb4b1774ace0197aeb80a275538465</anchor>
      <arglist>(const UnicodeString &amp;id, Factory factory, Token context)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>_registerInstance</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a79d4d6d36f467d3cdeaf6dd82c05238e</anchor>
      <arglist>(Transliterator *adoptedObj)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>_registerAlias</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ad1c8b4c25a4ddacc2dbfd7f9ce7415ae</anchor>
      <arglist>(const UnicodeString &amp;aliasID, const UnicodeString &amp;realID)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>_registerSpecialInverse</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>aed96d979ce25b8fa83d6e9b6db4a54a6</anchor>
      <arglist>(const UnicodeString &amp;target, const UnicodeString &amp;inverseTarget, UBool bidirectional)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32_t</type>
      <name>_countAvailableSources</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a1cde1620a3360f92151a1e905549ec2e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>_getAvailableSource</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a48bb4327e8385517a15aad061159f44a</anchor>
      <arglist>(int32_t index, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32_t</type>
      <name>_countAvailableTargets</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a2d2729440f4e2bd080b4d35116dd2569</anchor>
      <arglist>(const UnicodeString &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>_getAvailableTarget</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a213f3af15f2c57afeb9da0093a79d9bc</anchor>
      <arglist>(int32_t index, const UnicodeString &amp;source, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32_t</type>
      <name>_countAvailableVariants</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a87d16782cd6e20c0f4075d1cb346f85b</anchor>
      <arglist>(const UnicodeString &amp;source, const UnicodeString &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static UnicodeString &amp;</type>
      <name>_getAvailableVariant</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a79a48a2b38e76f6aa946b4371989e02f</anchor>
      <arglist>(int32_t index, const UnicodeString &amp;source, const UnicodeString &amp;target, UnicodeString &amp;result)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TransliteratorParser</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a0e174a80ed1c050f681e0cc48c04d56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TransliteratorIDParser</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>ada751b004e893bdce5054390887ce849</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>TransliteratorAlias</name>
      <anchorfile>classTransliterator.html</anchorfile>
      <anchor>a41ea065358492de72098ab5599c2f43e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Transliterator::Token</name>
    <filename>unionTransliterator_1_1Token.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>integer</name>
      <anchorfile>unionTransliterator_1_1Token.html</anchorfile>
      <anchor>aa8ad76283495444cc0cda4a2292a8e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>pointer</name>
      <anchorfile>unionTransliterator_1_1Token.html</anchorfile>
      <anchor>a6c5eb0b4e7cc2027c9cbb0490f838d5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UCharCharacterIterator</name>
    <filename>classUCharCharacterIterator.html</filename>
    <base>CharacterIterator</base>
    <member kind="function">
      <type></type>
      <name>UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ac5a37075432f842a961cb7d4a565fc89</anchor>
      <arglist>(const UChar *textPtr, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a3015ac70d3dc5a6a52bcdb282517475b</anchor>
      <arglist>(const UChar *textPtr, int32_t length, int32_t position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a28973d95ffbc1927f7fcd8b8cc30232d</anchor>
      <arglist>(const UChar *textPtr, int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a8aeecd1701f7e6d99d0a38275d4ad000</anchor>
      <arglist>(const UCharCharacterIterator &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a7b4b1e3c6ed2386571685a651ba24cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UCharCharacterIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a5843398b927bd88df8bf01d157058152</anchor>
      <arglist>(const UCharCharacterIterator &amp;that)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a87dbb6ff8afb439d16192a4bf1fbcd21</anchor>
      <arglist>(const ForwardCharacterIterator &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a14d812367eb5d27b31d15edfb85df85a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CharacterIterator *</type>
      <name>clone</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ac18052a38fd6f798b35730f9f520670e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>first</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a4af76d76056ee67ffa8bf957dadadb46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>firstPostInc</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a11ab50c4ae556528779a1b3352a66608</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>first32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a75c44dbee395784ca1bc305c0df5ac0a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>first32PostInc</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a939627c8e79d5eeb58866ec4cf50d8e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>last</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a45a39e51e55dfa159281915aa7750470</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>last32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a5797ce9b95f2971323f3ce6d18f78115</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>setIndex</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a92b670d7eb8675c9198ee5cfabaec9fd</anchor>
      <arglist>(int32_t position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>setIndex32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ab6cc35d39638235e83782fdc11ecca93</anchor>
      <arglist>(int32_t position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>current</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a10965f3134514745a6b5e6b5a7cfe112</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>current32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>aed9f725320ffd71c3371a9f44678f4b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>next</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a111aa9828fb355799cbd44357fd1ed16</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>nextPostInc</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a7f67c2cb06a8ccb951369862638a56da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>next32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a4b98bb816070fdac8751e65e0bcb9d2c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>next32PostInc</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>af18b5ce2f7cb0ade1ef694a7def6bcff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasNext</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ad7a3eadf766b1b398b7a0af50bc9cd4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar</type>
      <name>previous</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ac4e824a93673b3f42614b74dbefacece</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>previous32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>aa01e7b0113a3a0ba158e869ee5aa8fc5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasPrevious</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a5bbcb759c08029f37eeb1f84aa4cdf93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>move</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a578c741398b7fa617015fb63dd647916</anchor>
      <arglist>(int32_t delta, EOrigin origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>move32</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a26943e223ac654f34f56ac7b6bce873d</anchor>
      <arglist>(int32_t delta, EOrigin origin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>acdf0fa386ee6a73c82b534ee7360a9e6</anchor>
      <arglist>(const UChar *newText, int32_t newTextLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getText</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a09f0d751c4215a06c829d0edee036204</anchor>
      <arglist>(UnicodeString &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a48fcf4d6d1463b4662c7740ba6591022</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>a7412d25d789e9c59d5d68061ac3de01f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UCharCharacterIterator</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>ac3414c7f88293ae98754ea1e732837e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const UChar *</type>
      <name>text</name>
      <anchorfile>classUCharCharacterIterator.html</anchorfile>
      <anchor>aa4f776d063eae1c4a0fbe30f78489ee2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UCharIterator</name>
    <filename>structUCharIterator.html</filename>
    <member kind="variable">
      <type>const void *</type>
      <name>context</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a33f323cfae0faa809f047874d2021fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a52856eb702c1198d0d49e8a4de0d8629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>start</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>acbc6d2bf546d7e98744e2f0d776bec72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>index</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a1dcd0ca0875b1be0ba2f399c6920e6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>limit</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a68042932fad8301133ef8bc82f901305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reservedField</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a5d28abc1c284a02d887651c0594d2181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorGetIndex *</type>
      <name>getIndex</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a3d8274db3ff99ebb6bb2d0784c9cd7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorMove *</type>
      <name>move</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a085355b29925cbf9170e364e9aef7bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorHasNext *</type>
      <name>hasNext</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>ac6dc92d309ace93dc07ad9092e807578</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorHasPrevious *</type>
      <name>hasPrevious</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a5a5d536cc7275cdba8b6b2487a4f75a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorCurrent *</type>
      <name>current</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>ac247dee1b3e3e6fec6688f9dcb5bc1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorNext *</type>
      <name>next</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>aae26243728a62e6a13ed2008972afb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorPrevious *</type>
      <name>previous</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a65cd2a527c6abe69a0f37a368ce51cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorReserved *</type>
      <name>reservedFn</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>a94b7ab71aadd2cbafa7394c1102cdf2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorGetState *</type>
      <name>getState</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>adbdac3a7450c4b9344aad58b1e72d1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UCharIteratorSetState *</type>
      <name>setState</name>
      <anchorfile>structUCharIterator.html</anchorfile>
      <anchor>ad216d787e1125bc81b49686c7700b52f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UCharsTrie</name>
    <filename>classUCharsTrie.html</filename>
    <base>UMemory</base>
    <class kind="class">UCharsTrie::Iterator</class>
    <class kind="class">UCharsTrie::State</class>
    <member kind="function">
      <type></type>
      <name>UCharsTrie</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a0d9b923e028d7b99e179cd69f1131a5d</anchor>
      <arglist>(const UChar *trieUChars)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UCharsTrie</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a09461556659d79f926f2e5522e43d627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UCharsTrie</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>ac851628b571d47de93b780eb50cc10ed</anchor>
      <arglist>(const UCharsTrie &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>UCharsTrie &amp;</type>
      <name>reset</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a6071f44a2a7d6803ac633ce93f59f5a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const UCharsTrie &amp;</type>
      <name>saveState</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a98f5a94f1a79627633d6f6f4aeb75c4a</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>UCharsTrie &amp;</type>
      <name>resetToState</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a90702fc8679cdd48976c25fea855bc3a</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>current</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a3d27b5429b8411d74c9f586708376308</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>first</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a17cbb0636b09db7da2d3c24fa1565e33</anchor>
      <arglist>(int32_t uchar)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>firstForCodePoint</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a55c3f3babd7d35144e40828b29ea9e39</anchor>
      <arglist>(UChar32 cp)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>next</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>af5a9db16403230639f64db0841f75afd</anchor>
      <arglist>(int32_t uchar)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>nextForCodePoint</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>afbd7ad29dc2709f4560fb7552bea69d9</anchor>
      <arglist>(UChar32 cp)</arglist>
    </member>
    <member kind="function">
      <type>UStringTrieResult</type>
      <name>next</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>ad84789bd3b22afb99719eef5f80d1c5a</anchor>
      <arglist>(const UChar *s, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a026797cbfaf7e09a831cd4461a852542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasUniqueValue</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a491d43af87c89dadf65c20bbf1e68cd7</anchor>
      <arglist>(int32_t &amp;uniqueValue) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNextUChars</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a9b395444ca288323f83e8905bd049dee</anchor>
      <arglist>(Appendable &amp;out) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UCharsTrieBuilder</name>
      <anchorfile>classUCharsTrie.html</anchorfile>
      <anchor>a3fd4883185299885d4322d4bbed3b75f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UCharsTrie::Iterator</name>
    <filename>classUCharsTrie_1_1Iterator.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>ad9ca0d08fca2d18ce1328b5d709d2d27</anchor>
      <arglist>(const UChar *trieUChars, int32_t maxStringLength, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>a2398231808b66ea2540a7f3de1337361</anchor>
      <arglist>(const UCharsTrie &amp;trie, int32_t maxStringLength, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>ace6db41490c49b2cf468df148cacbbc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>reset</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>afd1f0144499010c5b998d8032d859f0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasNext</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>acfd0aeb046a14c88a6c852ddbec71af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>next</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>a880d8a4dc7b821844e0fea8625336714</anchor>
      <arglist>(UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>a5ea63a65e975198bd7c7d5aac1849cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getValue</name>
      <anchorfile>classUCharsTrie_1_1Iterator.html</anchorfile>
      <anchor>a47baaec6d69446c9558946a79b2adf48</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UCharsTrie::State</name>
    <filename>classUCharsTrie_1_1State.html</filename>
    <base>UMemory</base>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classUCharsTrie_1_1State.html</anchorfile>
      <anchor>a13d09d2faa22857309c8d7f25e310933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UCharsTrie</name>
      <anchorfile>classUCharsTrie_1_1State.html</anchorfile>
      <anchor>ab64933abcb27ebc67325a613c2d80a41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UCharsTrieBuilder</name>
    <filename>classUCharsTrieBuilder.html</filename>
    <base>StringTrieBuilder</base>
    <class kind="class">UCharsTrieBuilder::UCTLinearMatchNode</class>
    <member kind="function">
      <type></type>
      <name>UCharsTrieBuilder</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>a5a29769415dca745b91b27796bfd8031</anchor>
      <arglist>(UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UCharsTrieBuilder</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>a06bbd227a84302f6c858da013c1f139f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UCharsTrieBuilder &amp;</type>
      <name>add</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>a3bd94182ef4d23291c392dfe49cf40d0</anchor>
      <arglist>(const UnicodeString &amp;s, int32_t value, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>UCharsTrie *</type>
      <name>build</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>ad3bc2c5ba7544c0d000c444526a49019</anchor>
      <arglist>(UStringTrieBuildOption buildOption, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>buildUnicodeString</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>aa7dd17db5191027d27135dc371eae733</anchor>
      <arglist>(UStringTrieBuildOption buildOption, UnicodeString &amp;result, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type>UCharsTrieBuilder &amp;</type>
      <name>clear</name>
      <anchorfile>classUCharsTrieBuilder.html</anchorfile>
      <anchor>ab23c0addddac4fcc2eaf4a07d8f2d436</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UConverterFromUnicodeArgs</name>
    <filename>structUConverterFromUnicodeArgs.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>size</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>abeb11d60080a66d6e6dcd8f8d4ba98ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UBool</type>
      <name>flush</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>a18025af1995f6fb0d930b32ceff8d67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UConverter *</type>
      <name>converter</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>aea5978dddd82f0ff25569e0894b77d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UChar *</type>
      <name>source</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>a2f3e5b9c4938d5fcb1c9b8cfccc872da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UChar *</type>
      <name>sourceLimit</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>a86c313ed44d51816c418c25b79025b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>target</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>ad8986d0692fba770057a354164b8fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>targetLimit</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>a0915e907cac1997221d8fcf0ac36e1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t *</type>
      <name>offsets</name>
      <anchorfile>structUConverterFromUnicodeArgs.html</anchorfile>
      <anchor>a45442220ca1cd58dd6b497b2c6de0416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UConverterToUnicodeArgs</name>
    <filename>structUConverterToUnicodeArgs.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>size</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>a94c1ac756faaac2bc99d969f74e5d60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UBool</type>
      <name>flush</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>a6ba5831cd941d7958d8c14ac20ddea6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UConverter *</type>
      <name>converter</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>abcfd7707780ca177dd662f365e8631c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>source</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>af8bb38028ab14442d9849295d5429097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>sourceLimit</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>ae826a81cd61e18e0232b9e406d233ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UChar *</type>
      <name>target</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>aa3c10f2e32b2b818c9f028c32260a0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UChar *</type>
      <name>targetLimit</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>a2884c41551672e59036cea5a5c4aa0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t *</type>
      <name>offsets</name>
      <anchorfile>structUConverterToUnicodeArgs.html</anchorfile>
      <anchor>ad3b83a8bccd4642d8bc69bbf7014cfe1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UDataInfo</name>
    <filename>structUDataInfo.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>size</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>abd6b2241d107149c47bab1670a928499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>reservedWord</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>af4a5b961c10058651aacb7a2ae45a199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isBigEndian</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a91e6d8ad118435fe868a1e678b12c2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>charsetFamily</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a9194f34dd1fc7792e79f8c9ac9370fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>sizeofUChar</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a42d11c2da61f81edb7a64d0635770dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reservedByte</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>ae2bfb79e1720a9190b9efe1bb446d897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>dataFormat</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a479aff545723a4e6ba645dbd54807094</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>formatVersion</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a2857f66fc0e4abf1dd36fdcbeb7185e2</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>dataVersion</name>
      <anchorfile>structUDataInfo.html</anchorfile>
      <anchor>a76c9e51f168e69f70b68976cc65e88a2</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UFieldPosition</name>
    <filename>structUFieldPosition.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>field</name>
      <anchorfile>structUFieldPosition.html</anchorfile>
      <anchor>a40b9b14714258026ba27ee368f7b9ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>beginIndex</name>
      <anchorfile>structUFieldPosition.html</anchorfile>
      <anchor>a5fb9ac6f8aeb4f43826077484e22e0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>endIndex</name>
      <anchorfile>structUFieldPosition.html</anchorfile>
      <anchor>a76188e4f36fc98fef71e7f374d0d1e57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UIDNAInfo</name>
    <filename>structUIDNAInfo.html</filename>
    <member kind="variable">
      <type>int16_t</type>
      <name>size</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>a0386ece581ee48ba24791feb4393925e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UBool</type>
      <name>isTransitionalDifferent</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>a86e3299083bda232f3692adfa1969d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UBool</type>
      <name>reservedB3</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>a9358cdb55cc4055bfe2614482bcbd3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>errors</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>a2ea60f82939e17d1f64babfcbe354082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reservedI2</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>ab5f0eec8c4352d5d64253adeca701c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reservedI3</name>
      <anchorfile>structUIDNAInfo.html</anchorfile>
      <anchor>a0831b4791a3627991cf0131edc13acad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UMemory</name>
    <filename>classUMemory.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>a309b19b5777e2840b85b202aef5a54fb</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new[]</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>a4d0df3571728e7b8a823dbbea6e9b5c5</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>adcda65a58813749f8f45c5e6c1ed37e1</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete[]</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>a7602a7a8c6fdff21d9fbecea4d899333</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>a43b5221fe429f77230b2040f8724c154</anchor>
      <arglist>(size_t, void *ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>classUMemory.html</anchorfile>
      <anchor>a9b746b0cdb49c8f8907773002ea5c4ea</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeFilter</name>
    <filename>classUnicodeFilter.html</filename>
    <base>UnicodeFunctor</base>
    <base>UnicodeMatcher</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeFilter</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>a3d7a3c7903d906784bf208cee420014d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>contains</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>aa3b2c85ffa0cff083009efb324de84ca</anchor>
      <arglist>(UChar32 c) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeMatcher *</type>
      <name>toMatcher</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>a79392092ceb92adda473ac09d6f88f6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UMatchDegree</type>
      <name>matches</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>aea7e423b6ea7e4588bf7f5aa220e665c</anchor>
      <arglist>(const Replaceable &amp;text, int32_t &amp;offset, int32_t limit, UBool incremental)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>afd1f679426b2fbde93af707e3ba8c0a2</anchor>
      <arglist>(const TransliterationRuleData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUnicodeFilter.html</anchorfile>
      <anchor>a32a5fef7c44d68ebed5313e27645b5e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeFunctor</name>
    <filename>classUnicodeFunctor.html</filename>
    <base>UObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeFunctor</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>a3e7b6e387992d82cab424079cd623972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeFunctor *</type>
      <name>clone</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>ae9aaff845a9885df3ec336df1b4afa10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeMatcher *</type>
      <name>toMatcher</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>ae634c62ea3f1fc80db66e73c8b819545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeReplacer *</type>
      <name>toReplacer</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>af035fa7395f9996afe8ff6d934198884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>a6eaa9f077fe622d4c02643865f99bfa2</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setData</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>ace3dc97994f3bf4fb74139ff0207db7c</anchor>
      <arglist>(const TransliterationRuleData *)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUnicodeFunctor.html</anchorfile>
      <anchor>a339304d367427ee3e16729a7f074ae25</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeMatcher</name>
    <filename>classUnicodeMatcher.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeMatcher</name>
      <anchorfile>classUnicodeMatcher.html</anchorfile>
      <anchor>a76c6ac0d0cd5b903478d73527aaeba4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UMatchDegree</type>
      <name>matches</name>
      <anchorfile>classUnicodeMatcher.html</anchorfile>
      <anchor>ab712e496c0023237fbe38184d0424310</anchor>
      <arglist>(const Replaceable &amp;text, int32_t &amp;offset, int32_t limit, UBool incremental)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classUnicodeMatcher.html</anchorfile>
      <anchor>a0f8d0182d1e2949ea9adfd2b615e94dd</anchor>
      <arglist>(UnicodeString &amp;result, UBool escapeUnprintable=FALSE) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UBool</type>
      <name>matchesIndexValue</name>
      <anchorfile>classUnicodeMatcher.html</anchorfile>
      <anchor>a77a01adbdb969d73ac257c75eb63bed6</anchor>
      <arglist>(uint8_t v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addMatchSetTo</name>
      <anchorfile>classUnicodeMatcher.html</anchorfile>
      <anchor>a23f055516112c25dffdc836ffa16cd0e</anchor>
      <arglist>(UnicodeSet &amp;toUnionTo) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeReplacer</name>
    <filename>classUnicodeReplacer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeReplacer</name>
      <anchorfile>classUnicodeReplacer.html</anchorfile>
      <anchor>aa91343bfa31db2a9c63ce96b9b9c9ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32_t</type>
      <name>replace</name>
      <anchorfile>classUnicodeReplacer.html</anchorfile>
      <anchor>acd1a4620a41227ec5411929b05802251</anchor>
      <arglist>(Replaceable &amp;text, int32_t start, int32_t limit, int32_t &amp;cursor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UnicodeString &amp;</type>
      <name>toReplacerPattern</name>
      <anchorfile>classUnicodeReplacer.html</anchorfile>
      <anchor>ab026d671e5c74739463dc0769fdb5ff6</anchor>
      <arglist>(UnicodeString &amp;result, UBool escapeUnprintable) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addReplacementSetTo</name>
      <anchorfile>classUnicodeReplacer.html</anchorfile>
      <anchor>a10165222ca08664086a95157874d8090</anchor>
      <arglist>(UnicodeSet &amp;toUnionTo) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeSet</name>
    <filename>classUnicodeSet.html</filename>
    <base>UnicodeFilter</base>
    <member kind="enumvalue">
      <name>MIN_VALUE</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4d1afc3e1104619449112f38b2b0a0e9a1edea65cb1a0b012dc6fff9ac49e4fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_VALUE</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4d1afc3e1104619449112f38b2b0a0e9a2c64b96c719b41e29724b22acaf6859b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isBogus</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ad2987ff72267bd6692c57be0f0e39418</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToBogus</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3ade624e4b056cb62cc92ed1d945425a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a0a9d8b6532d6c43395e4337cc31c0445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a8644385f40e8005761184b4b2c2f29cc</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ae1905a055c32f34619a4355aa6868b6e</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a8f0732d6cb949ac1dd77f9a571dff1be</anchor>
      <arglist>(const UnicodeString &amp;pattern, uint32_t options, const SymbolTable *symbols, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>afd5eb61da4a0ea041a933896c458ac99</anchor>
      <arglist>(const UnicodeString &amp;pattern, ParsePosition &amp;pos, uint32_t options, const SymbolTable *symbols, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3d3ae73b57fd6b7609f88177a19034f8</anchor>
      <arglist>(const UnicodeSet &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a32f201258378210ede96ad08f8676c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a2d1faed072a21c52054507d024d7700d</anchor>
      <arglist>(const UnicodeSet &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4c6b2c9216b9e42f4d69ed413aaa2af4</anchor>
      <arglist>(const UnicodeSet &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a003c9c3c25134385dcc980be40848e6c</anchor>
      <arglist>(const UnicodeSet &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeFunctor *</type>
      <name>clone</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4a85692219bd42074445974f10ca9b9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>hashCode</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a530feed82c20c22bfa48e6130fccb139</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>USet *</type>
      <name>toUSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a92b8fb5933616cb52ee0da08bb927ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const USet *</type>
      <name>toUSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a62e24ae4792b422ade146d03c7a4b035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isFrozen</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>af82d9e6251a46c6b4735af8b7cf1f3f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeFunctor *</type>
      <name>freeze</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a31085c50d5cb8fdc634ea01156f4f907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeFunctor *</type>
      <name>cloneAsThawed</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a7099ee368fd521aab75b44d5150b6449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>set</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a8f6461feeb82a7f9de81909c5ef85155</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>applyPattern</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a92ea00fbad175397371e02f0a4a7f6cc</anchor>
      <arglist>(const UnicodeString &amp;pattern, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>applyPattern</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a33aaa692e8d76a9544adb15576a76120</anchor>
      <arglist>(const UnicodeString &amp;pattern, uint32_t options, const SymbolTable *symbols, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>applyPattern</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>aca25277cd3feb80e72be77f6e169c50a</anchor>
      <arglist>(const UnicodeString &amp;pattern, ParsePosition &amp;pos, uint32_t options, const SymbolTable *symbols, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeString &amp;</type>
      <name>toPattern</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a7aa98466d94bcbdcfcf79f57e171c8e7</anchor>
      <arglist>(UnicodeString &amp;result, UBool escapeUnprintable=FALSE) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>applyIntPropertyValue</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a642c4823b72d7fa64ebcda577a9cef8b</anchor>
      <arglist>(UProperty prop, int32_t value, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>applyPropertyAlias</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a9f355f0695c6fc079328ec14b3131d62</anchor>
      <arglist>(const UnicodeString &amp;prop, const UnicodeString &amp;value, UErrorCode &amp;ec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>size</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a6c3a6816ee9b470937073fec4d62f4f0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>isEmpty</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a0e085f3f2b9a81dd88609e13edd5d8a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>contains</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a5f83cbdf884770344420fb60e4f8e697</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>contains</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ad3e92e0b5c8c673462a589791d57cc84</anchor>
      <arglist>(UChar32 start, UChar32 end) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>contains</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a8d4091fe951ad4cbb3d557e37cf9cba5</anchor>
      <arglist>(const UnicodeString &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>containsAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3823eb4598b4fbdf33c5671d447914db</anchor>
      <arglist>(const UnicodeSet &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a224be3bc42df5b8a47c21b33c9ad7dc6</anchor>
      <arglist>(const UnicodeString &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsNone</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>aa033cd3776450f747f5bf8beb0477c0e</anchor>
      <arglist>(UChar32 start, UChar32 end) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsNone</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>aac49b81bc2081b71d3844053ef4a00e1</anchor>
      <arglist>(const UnicodeSet &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsNone</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a913f8afd4394c0786207a824c359291d</anchor>
      <arglist>(const UnicodeString &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsSome</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a5317db95daf21213341b6d8204dcb42c</anchor>
      <arglist>(UChar32 start, UChar32 end) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsSome</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a35ddc714c95fffa7650a10abb75be5d8</anchor>
      <arglist>(const UnicodeSet &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>containsSome</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ac30cbb03cc4b55cad432f838967324b3</anchor>
      <arglist>(const UnicodeString &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>span</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ae429f2e852471745b94d6dba3dc38440</anchor>
      <arglist>(const UChar *s, int32_t length, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>span</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>af8af2071003396abcb3051a8f4f82e59</anchor>
      <arglist>(const UnicodeString &amp;s, int32_t start, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>spanBack</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ac95f19d6cc2033b05455838842337d43</anchor>
      <arglist>(const UChar *s, int32_t length, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>spanBack</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a87b687130fcd69c5b6603fd8cbb76136</anchor>
      <arglist>(const UnicodeString &amp;s, int32_t limit, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>spanUTF8</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>af8263eebbaa180e57b55bd909882a3b8</anchor>
      <arglist>(const char *s, int32_t length, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>spanBackUTF8</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a1d119bcbf7656d73aeb9267383952e9e</anchor>
      <arglist>(const char *s, int32_t length, USetSpanCondition spanCondition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UMatchDegree</type>
      <name>matches</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3acd6cd4268004b9f3740a2373f411c4</anchor>
      <arglist>(const Replaceable &amp;text, int32_t &amp;offset, int32_t limit, UBool incremental)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMatchSetTo</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ae2147b573bc056ea80cfe5365f6cab33</anchor>
      <arglist>(UnicodeSet &amp;toUnionTo) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a379296bbc66c5c67d1c92d44ae866504</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>charAt</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>abdc0d3f52ce17855ca1a6eeed7ff19e2</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>add</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a1379c186ca8b314c91d20b7d9130fb7e</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>add</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a63c37362765602f4f64e2d8f431eef71</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>add</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4fb243ad6c13d3f17b3330d1c521d35a</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>addAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ac5d166441f38ae9e4c4e1737b92175bd</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>retainAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3e385a1847ecfd9272a36a012eb0b36e</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>complementAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a0365c770541d2c7928f3261b9be0bd0f</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>removeAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a795feb71ef9e0e997c3a5ce369005c4a</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>retain</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4edd71f0dd79a0114148c1da27e94494</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>retain</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>afd3410661ec259b9a760ee35ac56ef52</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>remove</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>acc97ad34863f7b856851d38636d58f2a</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>remove</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3bb2e0286c5e092091f5d49bf7d9663c</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>remove</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4f2bddd13e9df82977954cb5cd3ffc22</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>complement</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a610f31a87d953d87820b19c2e30dc14f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>complement</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>aba56631dbe1a84f42eb2c67711cee978</anchor>
      <arglist>(UChar32 start, UChar32 end)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>complement</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a6a18946f8b62ba998080cc2b82ae03f3</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>complement</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>abd4843e788831beb8960ae0117d3d8ac</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>addAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a6ee40747f030a8e24a5984425e334afc</anchor>
      <arglist>(const UnicodeSet &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>retainAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a43902955210b895b62dfa47e945abf96</anchor>
      <arglist>(const UnicodeSet &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>removeAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a02e3e29b1412956ccebff4919c48ba4c</anchor>
      <arglist>(const UnicodeSet &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>complementAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a3e128521c00a9cf6b4c94558b87cebd2</anchor>
      <arglist>(const UnicodeSet &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>clear</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>aaa81304748c9f5bd62eff400c14a9d0f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeSet &amp;</type>
      <name>closeOver</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a18bd83e5ae05494b4bbdc8030baa797d</anchor>
      <arglist>(int32_t attribute)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>removeAllStrings</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a6eec59457382fa43c98de782186cce94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRangeCount</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a60901508da179b56dfa8d16204f4c1f0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>getRangeStart</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a78847265b21d16ec663832bdf6cca8a8</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>getRangeEnd</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ac03307b5f0118a421cd8dab47f12d780</anchor>
      <arglist>(int32_t index) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>serialize</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a6188e8d02a4197661aa5c10021a777c6</anchor>
      <arglist>(uint16_t *dest, int32_t destCapacity, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnicodeSet &amp;</type>
      <name>compact</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ab50b1b38c127430e876ea6830f278bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4e6c600a7a6bcc1d564d84d0fa512932</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeSet *</type>
      <name>fromUSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a049d965a1c1f1f8fb1ce15c6b5586c4d</anchor>
      <arglist>(USet *uset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UnicodeSet *</type>
      <name>fromUSet</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a9d1c1b063e274755de9acb28ed387df5</anchor>
      <arglist>(const USet *uset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UBool</type>
      <name>resemblesPattern</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a4ed67bc4ceb6838a965a04c68b39e918</anchor>
      <arglist>(const UnicodeString &amp;pattern, int32_t pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeSet *</type>
      <name>createFrom</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>abcf0c42078b37520dc05664e5c514ee6</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeSet *</type>
      <name>createFromAll</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a7ee55510aa41e114d559e65fc5d94a37</anchor>
      <arglist>(const UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a1f7725a2e4de21e4cfff622fecc89716</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>USetAccess</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>a05b983ce4c40b5724d1319ac4795eaf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UnicodeSetIterator</name>
      <anchorfile>classUnicodeSet.html</anchorfile>
      <anchor>ac947f132cd502a07787bf35113956069</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeSetIterator</name>
    <filename>classUnicodeSetIterator.html</filename>
    <base>UObject</base>
    <member kind="function">
      <type></type>
      <name>UnicodeSetIterator</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a2f9d4b52c57df9a9f8228a7c70f0ed9b</anchor>
      <arglist>(const UnicodeSet &amp;set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeSetIterator</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a78842826e6c136a91f118e77a1e2c1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeSetIterator</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a808f2082abb5148ea9cd0a6b4b259929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isString</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ade92aa1c12c730dd577c16945cf7d165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>getCodepoint</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a61919dfa42210572bb89e388dfeb0268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>getCodepointEnd</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ae7e32fd213d8b7ede8d766bf6de0dcf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnicodeString &amp;</type>
      <name>getString</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ae89955b78069c62174a9dac7e6854eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>next</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a9a9b50f75910ba6aed5a43a2f0f2e0fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>nextRange</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>af4baeeb4bcad7458c54160bcccf72261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ad1859a7092689b91181e9070f7e0d559</anchor>
      <arglist>(const UnicodeSet &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a63f4f9214a7a893277a13b7b346625f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a42386c9d8eb0828c26a0ab3cffad84a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ac08fc20eb3b3faa96e9cf481a5be7996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnicodeSetIterator</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a2004aab350934950505b54b617b0afb2</anchor>
      <arglist>(const UnicodeSetIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UnicodeSetIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a88be66a12a73510245b3d3ee4f6765ec</anchor>
      <arglist>(const UnicodeSetIterator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadRange</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ada358c563f31afcd0e04e9e4b08e49fc</anchor>
      <arglist>(int32_t range)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UChar32</type>
      <name>codepoint</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>aa4eb1658beaaaf6673b5d37e3c6a69ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UChar32</type>
      <name>codepointEnd</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a68e47154dd6f9259a1706f4b61dbf103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const UnicodeString *</type>
      <name>string</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a4063239bfe90af16a06788dd6d06b85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const UnicodeSet *</type>
      <name>set</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a2f65d38d2e7b6b2bf21aa4591a2ac24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>endRange</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a878514479691a3846b20b6e569119ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>range</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a3b1df5ba38de7ab69f86da5b044f8e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>endElement</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>a7d3d501416100a83c28f04d08d4addb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>nextElement</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ab2f6ef22b4028b02bc90391b9a0f6d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>nextString</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ab9b1ebf18974bc98a940d75631fcc077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>stringCount</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>ab13d31425166fb962bf72cb36032f227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UnicodeString *</type>
      <name>cpString</name>
      <anchorfile>classUnicodeSetIterator.html</anchorfile>
      <anchor>afbe599f508d1557f0146d531d30dea67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeString</name>
    <filename>classUnicodeString.html</filename>
    <base>Replaceable</base>
    <class kind="union">UnicodeString::StackBufferOrFields</class>
    <member kind="enumeration">
      <name>EInvariant</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7ffe265551a9bf6ea0e4c0cb508cea8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kInvariant</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7ffe265551a9bf6ea0e4c0cb508cea8aaf60977cf9e4fde77211e7828f0d2ec5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator==</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0dca5ffc55b3f73e9b7382749cffcc76</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator!=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a77b6ddf0e458fa0c1c9378484305f695</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator&gt;</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3e51f324b52e9f1b563e7da39138215d</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator&lt;</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a52ac4f79ff0c1dee2f39e38c9abcf030</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator&gt;=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab5d1ffd7cdd87e3756a991c489f8f8f1</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>operator&lt;=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac6c53077851d1b6af4c45a268638d46e</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aceb5ebe345197e0932d6b1c49a63493e</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a5b0909813b13e3cebb0ea8915e822dd8</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afedda065f5a283232bffd434a3765af1</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a831c909209e45615aa0c4c368b7d600f</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>abf1a9b87377c49721ec32371afabb5a6</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a14d0ef73e76d1c90702ee5d4923ae8f9</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7d1d10ff930be9e96c21307360010e47</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLimit) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae478d3988b5e05e0c552fbd766de69f7</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac128831d632b323894b7f5851f2f6cbb</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab4d8310695ede2cb2ae567b42b4be23d</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0992f7174f19a7060c88849867d1c676</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6f4f499a6a85494afe6a59bb1fbbe757</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrder</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa71f8cb059b71c6ca80b8539740d6cac</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>compareCodePointOrderBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0de2de75dc86112cb63a5fc6c9cd874f</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLimit) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac633b7697029cfe347dcae70ce732939</anchor>
      <arglist>(const UnicodeString &amp;text, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a92f1f3ddf35f61e0bb0a05055f9e72c7</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6c7c33986b62cb279c06a601e7405db4</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa86524e659199fa9a3d0c6d8e4c89f2d</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a4f970386c68b335bd5a953c990437eb2</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompare</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a949a065b923a5da215c6e35aea741e03</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>caseCompareBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a17b496f8cfa59eb453d0af3c35cf52d8</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLimit, uint32_t options) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>startsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab0e077b76c436892cd654438cac91158</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>startsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afd20f639672a52e36825458462ddcd7f</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>startsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad12b7ef01da4555975a5cf9a4600d23e</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>startsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a9f2cd1d245ca229be31991f3ed9d835a</anchor>
      <arglist>(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>endsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab720aa6e352deda84f988bc0e8fe2db4</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>endsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8eb8e157edc82cdcc51d9420ff3f610c</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>endsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afe8c45af2965c45d76a387be46f57bc5</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>endsWith</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3fd044063a86573cd5f0b74bb58bd99a</anchor>
      <arglist>(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a95d26a26d753346832a09d8f3fbc5c21</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8cc509d7e8167d4f3cb54279c92f0140</anchor>
      <arglist>(const UnicodeString &amp;text, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6fd64f74511b448ec9ee15434fb3a09b</anchor>
      <arglist>(const UnicodeString &amp;text, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a1100d0d24f929546012ea6f71dc4809d</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a2979c7d50ff98dc4778f66b6bc3c2eba</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afef7ea1a41634a2cb705181a0901acf8</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a83234340f020cebee8e7fb2ef0e461dd</anchor>
      <arglist>(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a87e9187b51ea0ec9f09fef60bfba675c</anchor>
      <arglist>(UChar c) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a30bdd224b64c0e6267595a15c93fc3a7</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afbdcf763ceb9b97ab0616342a4f8f973</anchor>
      <arglist>(UChar c, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae47d3da37887c5be54e30ee9274b09e6</anchor>
      <arglist>(UChar32 c, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aaf31e1fcb5b1d50af7a66111da937097</anchor>
      <arglist>(UChar c, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>indexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a4317a47256f75125bbda1e8e4b3e6028</anchor>
      <arglist>(UChar32 c, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac4b5689a7a60e28378dd6bf9f06d8681</anchor>
      <arglist>(const UnicodeString &amp;text) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a24b0b6c1064d0c2c7a96bf67f3704390</anchor>
      <arglist>(const UnicodeString &amp;text, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a22eb2250c71d81826e74ec80b7efd71f</anchor>
      <arglist>(const UnicodeString &amp;text, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a819576d305c2d69e6a8aa1d47dd27635</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a888a5eef6a80755f1e3455b6c5fb40f1</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a70730e2064ad98a0f5cd377145a4d978</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a2b5ee35956d7270e661fb5f48aa153f6</anchor>
      <arglist>(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a1e47f5a816151974defc56044f69b5f0</anchor>
      <arglist>(UChar c) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a05607edd87bf7d42ba92437d4acd3201</anchor>
      <arglist>(UChar32 c) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a4b36bd76b30462f824dbd50c83ddc1c7</anchor>
      <arglist>(UChar c, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af32e8297171296abc6f5f65a6532e982</anchor>
      <arglist>(UChar32 c, int32_t start) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa1d1bdeca0ea48faeff72e1fa0ac96c1</anchor>
      <arglist>(UChar c, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>lastIndexOf</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab10f3a578417944a4bf82fe251874ef1</anchor>
      <arglist>(UChar32 c, int32_t start, int32_t length) const </arglist>
    </member>
    <member kind="function">
      <type>UChar</type>
      <name>charAt</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae3ffb6e15396dff152cb459ce4008f90</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>UChar</type>
      <name>operator[]</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>acc98e688603bf1b2dbfd6303ec8783f5</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>char32At</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a9ca80740ef5199cf1809c66a4ef6ba3d</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getChar32Start</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a121c8e74fb409a9b2e3a503f965f75f1</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getChar32Limit</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a20f1e4c661d0fc07c800ad8b4ec37587</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>moveIndex32</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a29075d1d1a125a472dea09b13da3c80d</anchor>
      <arglist>(int32_t index, int32_t delta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a9b2d4e417740becdb24a59fab263b8e3</anchor>
      <arglist>(int32_t start, int32_t length, UChar *dst, int32_t dstStart=0) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3cfd4a0adb5625f4895139fd9f045f99</anchor>
      <arglist>(UChar *dest, int32_t destCapacity, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a36effb107202af602f11e587375357f8</anchor>
      <arglist>(int32_t start, int32_t length, UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad5dbb294a5eb01e1b4af82abc8eceeed</anchor>
      <arglist>(int32_t start, int32_t limit, UChar *dst, int32_t dstStart=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad25e9b7db7e37fa102f152729b5f2aa5</anchor>
      <arglist>(int32_t start, int32_t limit, UnicodeString &amp;target) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a56cd8919f25e345065d934462b33fa36</anchor>
      <arglist>(int32_t start, int32_t startLength, char *target, int32_t targetCapacity, enum EInvariant inv) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a05e54f93b2947a3de9b9793a93124c11</anchor>
      <arglist>(int32_t start, int32_t startLength, char *target, uint32_t targetLength) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac15fabe40a5101c6419492dc751da345</anchor>
      <arglist>(int32_t start, int32_t startLength, char *target, const char *codepage=0) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afcbd476dae77cc6fde82b436e1638bab</anchor>
      <arglist>(int32_t start, int32_t startLength, char *target, uint32_t targetLength, const char *codepage) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>extract</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0fb8e2d2d26be9db07ab4022ebb30fa6</anchor>
      <arglist>(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>tempSubString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a30401646a2726ade768c56b0b219faa0</anchor>
      <arglist>(int32_t start=0, int32_t length=INT32_MAX) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>tempSubStringBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a46e2d39320a4676b00ea9f1bb9ef0ec2</anchor>
      <arglist>(int32_t start, int32_t limit=INT32_MAX) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toUTF8</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a1145fc8252d441454386a49191e0556a</anchor>
      <arglist>(ByteSink &amp;sink) const </arglist>
    </member>
    <member kind="function">
      <type>StringClass &amp;</type>
      <name>toUTF8String</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae8dbe5f2578a1d7b8741491076f2fbe9</anchor>
      <arglist>(StringClass &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>toUTF32</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a09dd3bc86eb47cfde7d6abbd4ac2dcf8</anchor>
      <arglist>(UChar32 *utf32, int32_t capacity, UErrorCode &amp;errorCode) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac4cf80391a0e523c27aacaba796aede6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>countChar32</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8bdc18ea800dbf166cda5aba2d63612f</anchor>
      <arglist>(int32_t start=0, int32_t length=INT32_MAX) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>hasMoreChar32Than</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad06ed58e01980802cdbc8dfff6179691</anchor>
      <arglist>(int32_t start, int32_t length, int32_t number) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isEmpty</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aeefca846dd927d3db49c0cdc45ce744c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getCapacity</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a924521b1d7d9828ac9374e467144b0cc</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>hashCode</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6724ae76d51cf802ded394eaedd7b3fd</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>isBogus</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af61191bafca3f7ed295a9eba2a1eb401</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a5dd1ec62e48abc757646189cbcf2baa7</anchor>
      <arglist>(const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>fastCopyFrom</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a941a99ae09f01f1d69c95a4cb59dd56f</anchor>
      <arglist>(const UnicodeString &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a1d75d4701b858d95a49dbc07f8d1ba6c</anchor>
      <arglist>(UChar ch)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0d1a2c1f297ceab74014d51e45c421f4</anchor>
      <arglist>(UChar32 ch)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3897abda046dd38819aa8f2c8078861e</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac38d68fb81c7421b654d3287d9d54206</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a318d7dc15dfce8ff8e46721ccd5c1899</anchor>
      <arglist>(const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a5bae314691db9ce0a805343bde6ea2b3</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a56c98d01627a9407cdb4605242ce4d73</anchor>
      <arglist>(UChar srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a79ab8bb668477b4ccebbdc894c1d321b</anchor>
      <arglist>(UChar32 srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a98527226ab905a05df3e73082a0af3e3</anchor>
      <arglist>(UBool isTerminated, const UChar *text, int32_t textLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setTo</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0fcc4d2faad3930832a98ae820779264</anchor>
      <arglist>(UChar *buffer, int32_t buffLength, int32_t buffCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToBogus</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0b796d590a302f57f5ba6bd7a8d245f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>setCharAt</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a695479485a3b9f1fcaa25313ea87a83c</anchor>
      <arglist>(int32_t offset, UChar ch)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3ac2e89f8f74c45ff13bf71e6062734b</anchor>
      <arglist>(UChar ch)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6e1482ab21f7ef9e5439981bad06f1ee</anchor>
      <arglist>(UChar32 ch)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>operator+=</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7091ecbd1353a22279a93d95e05da385</anchor>
      <arglist>(const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af7f9ab456ac8c07c5a24f15f5d7d4867</anchor>
      <arglist>(const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7030e96f6700e4877fe280b576b26e5b</anchor>
      <arglist>(const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6aceed0319029d2a606981840568821a</anchor>
      <arglist>(const UChar *srcChars, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8b8cd6ab8a7e406badf887291d26514c</anchor>
      <arglist>(const UChar *srcChars, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0b81068905fd081b01b06c0094ef3ca9</anchor>
      <arglist>(UChar srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>append</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6c5d32e904ccac606dfc49afa4b35c17</anchor>
      <arglist>(UChar32 srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a179a24c3973d134ca3e160a5def2ad1e</anchor>
      <arglist>(int32_t start, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa44156212bb0ce6418ccbf1976fe126e</anchor>
      <arglist>(int32_t start, const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ac9388b206d00f8ca47d5dc417ef23211</anchor>
      <arglist>(int32_t start, const UChar *srcChars, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a97683dc8790f9310cec85002422540ab</anchor>
      <arglist>(int32_t start, const UChar *srcChars, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aad4e081871687bb09edfde9ef87f6ef0</anchor>
      <arglist>(int32_t start, UChar srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>insert</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a59e54dc726e396baab496e0fb6467d51</anchor>
      <arglist>(int32_t start, UChar32 srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a9a321102fc38bec175fa21b1f1aa2476</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a53f142e2db860dcb7d9544b01904eb8c</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a67b906be4fc94fe57feb34ab10355922</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a250f55bd8fbd8490852a0c90c5bcec4f</anchor>
      <arglist>(int32_t start, int32_t length, const UChar *srcChars, int32_t srcLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af048ddbf8ecdcb90105b90f50375209c</anchor>
      <arglist>(int32_t start, int32_t length, UChar srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa363771bfbdcb732ceccffbc2030b5ed</anchor>
      <arglist>(int32_t start, int32_t length, UChar32 srcChar)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replaceBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3e971aecee8c927be11601d022d3a2a4</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;srcText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>replaceBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8cb0ad3a526ebb049c25fc541bac2543</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;srcText, int32_t srcStart, int32_t srcLimit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleReplaceBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a1050a1af8098db0ef879f2415ba41e82</anchor>
      <arglist>(int32_t start, int32_t limit, const UnicodeString &amp;text)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasMetaData</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab06c04a1ff38184310bef13b859eb7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7a3e488399929c744e89a1e041988ec5</anchor>
      <arglist>(int32_t start, int32_t limit, int32_t dest)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>findAndReplace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a332cce292be22e3bc76a53f17c4ad6ff</anchor>
      <arglist>(const UnicodeString &amp;oldText, const UnicodeString &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>findAndReplace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae3ed2d6a16b461c531ad1a3f0bc66c91</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;oldText, const UnicodeString &amp;newText)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>findAndReplace</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a555e3d6d31bb6fbfac2236bc94806700</anchor>
      <arglist>(int32_t start, int32_t length, const UnicodeString &amp;oldText, int32_t oldStart, int32_t oldLength, const UnicodeString &amp;newText, int32_t newStart, int32_t newLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>remove</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aee0fec9568ee616e330627bf371eda8d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>remove</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab54182e0d304a37c883d8c74df6139df</anchor>
      <arglist>(int32_t start, int32_t length=(int32_t) INT32_MAX)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>removeBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6a901da92dd8e9bc1e1f168033175240</anchor>
      <arglist>(int32_t start, int32_t limit=(int32_t) INT32_MAX)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>retainBetween</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a7925ea8813653cde409f3a615c70ee8e</anchor>
      <arglist>(int32_t start, int32_t limit=INT32_MAX)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>padLeading</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aedf7e46ed1d04c290e7a07f995fcab93</anchor>
      <arglist>(int32_t targetLength, UChar padChar=0x0020)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>padTrailing</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af7c61d0795c4d70b37dc6388fdd30c60</anchor>
      <arglist>(int32_t targetLength, UChar padChar=0x0020)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>truncate</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad8fe3cabef409468a11b77111de45ebc</anchor>
      <arglist>(int32_t targetLength)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>trim</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a78ae20a1d15288a594904fe02c45488c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>reverse</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab1c93f89741c3307063dda2ab183ad9d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>reverse</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afbc7e70810c42b8c5d28606124826b3f</anchor>
      <arglist>(int32_t start, int32_t length)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toUpper</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aad9e8e68e89dc947b864a4d37e310ffb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toUpper</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6cd407c4270e6618153c6a3c6e499ec7</anchor>
      <arglist>(const Locale &amp;locale)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toLower</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6276e2a7136f47e0294f6b672d9bfe02</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toLower</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a78a44158dd8df940d4e61e75d5b64efe</anchor>
      <arglist>(const Locale &amp;locale)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toTitle</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a76491929251438d4aa982c8f4c1bebfa</anchor>
      <arglist>(BreakIterator *titleIter)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toTitle</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>acc99199208fb911188d4dc74e6284ed3</anchor>
      <arglist>(BreakIterator *titleIter, const Locale &amp;locale)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>toTitle</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ae0d8785af9aafd3da545f580b7bac06b</anchor>
      <arglist>(BreakIterator *titleIter, const Locale &amp;locale, uint32_t options)</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString &amp;</type>
      <name>foldCase</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a5c05b9f91b3ffadea68bf3f655e6bd70</anchor>
      <arglist>(uint32_t options=0)</arglist>
    </member>
    <member kind="function">
      <type>UChar *</type>
      <name>getBuffer</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab60ed4d07f726d3cceb3964c6556a34b</anchor>
      <arglist>(int32_t minCapacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseBuffer</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa38976ed70bda538598da31a4631387d</anchor>
      <arglist>(int32_t newLength=-1)</arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getBuffer</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a34eda92a2c60797052116eb7acada1dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UChar *</type>
      <name>getTerminatedBuffer</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a8aecf2249fdb51e284270a6f31e2cd75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a0104e7a1ca98d59c902a7220dd12fc3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a09393734cea2d2254424e13fc2a10159</anchor>
      <arglist>(int32_t capacity, UChar32 c, int32_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af5b8a4728bca17ec3307934b2a770135</anchor>
      <arglist>(UChar ch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a3169a0f66593fbe82d6f7322a746ce4b</anchor>
      <arglist>(UChar32 ch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aa9e8f6c8b81a2a16b99a706c1ebbf018</anchor>
      <arglist>(const UChar *text)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a37d5560f5f05e53143da7765ecd9aff0</anchor>
      <arglist>(const UChar *text, int32_t textLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a245c035b531688e0f9fda3471583b53c</anchor>
      <arglist>(UBool isTerminated, const UChar *text, int32_t textLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>afaf01b0f383547f3ce9d5bf52f14b6a3</anchor>
      <arglist>(UChar *buffer, int32_t buffLength, int32_t buffCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>aaeb2d64bc04de5e3e5009c90d32724ad</anchor>
      <arglist>(const char *codepageData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a247a6a93f47faa652bc05b82c4a1566b</anchor>
      <arglist>(const char *codepageData, int32_t dataLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a952223e09f52847277ddc282b369bde3</anchor>
      <arglist>(const char *codepageData, const char *codepage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a587429037900bcab88551d178ed3675c</anchor>
      <arglist>(const char *codepageData, int32_t dataLength, const char *codepage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a491cb83c13f87e8782cb06603fd47916</anchor>
      <arglist>(const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &amp;errorCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a935b1e53aa8fecadf71ccc6330a017d7</anchor>
      <arglist>(const char *src, int32_t length, enum EInvariant inv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a41a60bb597c7cb06e06a0dcc6fe22739</anchor>
      <arglist>(const UnicodeString &amp;that)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a95539163e8515bd2c057402dbf77f710</anchor>
      <arglist>(const UnicodeString &amp;src, int32_t srcStart)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af9ffc31e0faedb3624e00f42d5a24405</anchor>
      <arglist>(const UnicodeString &amp;src, int32_t srcStart, int32_t srcLength)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Replaceable *</type>
      <name>clone</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6cf9e8332f251ddfb5758bcada18ea9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnicodeString</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a6157b88fc525404dfc62eb2c33654e3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnicodeString</type>
      <name>unescape</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>abb3f5f6eb82c5689fcfeb8f79d5ca2bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UChar32</type>
      <name>unescapeAt</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af94aa1c7dafa0c151bf0fcbe32d69ded</anchor>
      <arglist>(int32_t &amp;offset) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ad92f0af01d4479b4c48807275005c002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString</type>
      <name>fromUTF8</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a33ef2891f0ace7930dff3a34778bf4f7</anchor>
      <arglist>(const StringPiece &amp;utf8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnicodeString</type>
      <name>fromUTF32</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a69efe0835b30e3bda9d748ea89409df9</anchor>
      <arglist>(const UChar32 *utf32, int32_t length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a984ec401cdede332f72aed099bd7e68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getLength</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a362a1368137278f56f464aa0199a8117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UChar</type>
      <name>getCharAt</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a78317735bb5f7261750e90eeb39f1f40</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual UChar32</type>
      <name>getChar32At</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a5b71c5fb6542921ad247f95c87dc00cf</anchor>
      <arglist>(int32_t offset) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StringThreadTest</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>a89f2a3ff805b9f3c26e966c5299b1675</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UnicodeStringAppendable</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>af39f60abec959ce93d61cd53e2a90d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend union</type>
      <name>StackBufferOrFields</name>
      <anchorfile>classUnicodeString.html</anchorfile>
      <anchor>ab34f543433807ca0325d80c650c86a33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnicodeStringAppendable</name>
    <filename>classUnicodeStringAppendable.html</filename>
    <base>Appendable</base>
    <member kind="function">
      <type></type>
      <name>UnicodeStringAppendable</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>a4d96b48a2e02ebad8b68dbab4dfc6d9f</anchor>
      <arglist>(UnicodeString &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>appendCodeUnit</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>acb282259414852552a876814e530ae76</anchor>
      <arglist>(UChar c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>appendCodePoint</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>a26befc8629e1c015d56ca25eccb54148</anchor>
      <arglist>(UChar32 c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>appendString</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>a84caac9ce2e592c17526f79821bf2e55</anchor>
      <arglist>(const UChar *s, int32_t length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>reserveAppendCapacity</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>af01525d2244ebf0d19e9f440d69d1c44</anchor>
      <arglist>(int32_t appendCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UChar *</type>
      <name>getAppendBuffer</name>
      <anchorfile>classUnicodeStringAppendable.html</anchorfile>
      <anchor>ad99a80e66648f44fb12c9a6c7a3aeeed</anchor>
      <arglist>(int32_t minCapacity, int32_t desiredCapacityHint, UChar *scratch, int32_t scratchCapacity, int32_t *resultCapacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UObject</name>
    <filename>classUObject.html</filename>
    <base>UMemory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UObject</name>
      <anchorfile>classUObject.html</anchorfile>
      <anchor>ace22cf29a90641ef43350deae5bedb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classUObject.html</anchorfile>
      <anchor>a9b1acc95efd89cb86ec31f2dc947a262</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UParseError</name>
    <filename>structUParseError.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>line</name>
      <anchorfile>structUParseError.html</anchorfile>
      <anchor>a7e97bc264516d0eecda03609162db2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>offset</name>
      <anchorfile>structUParseError.html</anchorfile>
      <anchor>aa18e9bc2d82bd5a513aa489b32248f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UChar</type>
      <name>preContext</name>
      <anchorfile>structUParseError.html</anchorfile>
      <anchor>a3f7f2e98b8105346b87170866970c85a</anchor>
      <arglist>[U_PARSE_CONTEXT_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>UChar</type>
      <name>postContext</name>
      <anchorfile>structUParseError.html</anchorfile>
      <anchor>a1076f681e0c1fcec4bf0ff28703b9aea</anchor>
      <arglist>[U_PARSE_CONTEXT_LEN]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UReplaceableCallbacks</name>
    <filename>structUReplaceableCallbacks.html</filename>
    <member kind="variable">
      <type>int32_t(*</type>
      <name>length</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>abe20b175db7fe49c652d32b0047bd44d</anchor>
      <arglist>)(const UReplaceable *rep)</arglist>
    </member>
    <member kind="variable">
      <type>UChar(*</type>
      <name>charAt</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>add37b2389b812250b661fe51fe193941</anchor>
      <arglist>)(const UReplaceable *rep, int32_t offset)</arglist>
    </member>
    <member kind="variable">
      <type>UChar32(*</type>
      <name>char32At</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>a6eb341066f05c7799cd13f6b0f1c56e7</anchor>
      <arglist>)(const UReplaceable *rep, int32_t offset)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>replace</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>a2c289af568adb2040768e83ae847c4b7</anchor>
      <arglist>)(UReplaceable *rep, int32_t start, int32_t limit, const UChar *text, int32_t textLength)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>extract</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>a0973de83b91b9d436c268de9bc878316</anchor>
      <arglist>)(UReplaceable *rep, int32_t start, int32_t limit, UChar *dst)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>copy</name>
      <anchorfile>structUReplaceableCallbacks.html</anchorfile>
      <anchor>afe7d8ea1241deed1c92c7209c99199d7</anchor>
      <arglist>)(UReplaceable *rep, int32_t start, int32_t limit, int32_t dest)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>USerializedSet</name>
    <filename>structUSerializedSet.html</filename>
    <member kind="variable">
      <type>const uint16_t *</type>
      <name>array</name>
      <anchorfile>structUSerializedSet.html</anchorfile>
      <anchor>a7b86f1aa466ab9c3b42f958d0ef9a715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>bmpLength</name>
      <anchorfile>structUSerializedSet.html</anchorfile>
      <anchor>a1dc60ecadaa0c54c36bc9014c9abdaf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>length</name>
      <anchorfile>structUSerializedSet.html</anchorfile>
      <anchor>acff674ea641b0fa5b32c23bddaf286af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>staticArray</name>
      <anchorfile>structUSerializedSet.html</anchorfile>
      <anchor>a081a169f02575428ad27411aa5451bfc</anchor>
      <arglist>[USET_SERIALIZED_STATIC_ARRAY_CAPACITY]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UText</name>
    <filename>structUText.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>magic</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>aa8d7b2a0a7384ea6a01b8228f227db82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>flags</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a5381d111f35bcaecbfef253f102df792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>providerProperties</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ac36640ce0a7f5c7b8ae243a8f33e93de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>sizeOfStruct</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a59864b5605f82440de919feba1d64106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>chunkNativeLimit</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a710af36373dd4d00fbd84f4a8429e248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>extraSize</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a265765aa476617b1b0a9b2f245d6c3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>nativeIndexingLimit</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a52dd2b1427fc28e7d98c7e70064cedd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>chunkNativeStart</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ae57e342eea4d447634b875f5d19cefef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>chunkOffset</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a0e634db596b38d898ea1a11d2a40befd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>chunkLength</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>abc7bb5d202a4812e7f41733fba6ab256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UChar *</type>
      <name>chunkContents</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ac718cf49b95a1f41926230c8132137f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UTextFuncs *</type>
      <name>pFuncs</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ab56053acd8e0e33243359e7aeb44019f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>pExtra</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a5ca08431f48c474a57220386bab5b876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>context</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>aeb9fa867f4b29378c34f5841d32db672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>p</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a1932275255384d6efa47aa0a8c24d60b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>q</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>acf46098bfe250ee8acb81356dfacc351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>r</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a88cccfe6b055df7e19f210396fec085a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>privP</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ae4eb8619332a016551b683853fb83379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>a</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>af8312bce2b8883ace9917ff06d682321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>b</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a04153242e0ccf6401a0b7d882eda7371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>c</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>af3da19dd26083eaa72169c30b5397d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>privA</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a49c540af1306f66196ae5e9da79254d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>privB</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>a91252e56ab96828249a892ec847b61e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>privC</name>
      <anchorfile>structUText.html</anchorfile>
      <anchor>ac990399966e1a7812056f0382ed14114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UTextFuncs</name>
    <filename>structUTextFuncs.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>tableSize</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a82423256ccf21ad6d407f1a390d826ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reserved1</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a07aae199d0c0c50c843900aac4ab75c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reserved2</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a0a34a019ecb5b8f6c53b640b5b259e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>reserved3</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a788850d9f82cf783bbdd731ac5407c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextClone *</type>
      <name>clone</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>aec491b54b67bc848006b04e4ebce0009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextNativeLength *</type>
      <name>nativeLength</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a8a91d3830174aa6a9d2bc7c1c9142ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextAccess *</type>
      <name>access</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a5fc21ad481e4f48fcbec5a6cf5e6f3dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextExtract *</type>
      <name>extract</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a6fd73fbd4bf4e4e87d2589b43ef9b7e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextReplace *</type>
      <name>replace</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a8ba9ac339f0e901d87e4568b174943f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextCopy *</type>
      <name>copy</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>acd589b6a5bc19d33777cbd72dbaa80cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextMapOffsetToNative *</type>
      <name>mapOffsetToNative</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a163661e37ab2a524e246f14fa3b2459d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextMapNativeIndexToUTF16 *</type>
      <name>mapNativeIndexToUTF16</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>ad64acbdb2322d22c5f102c6c5a540a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextClose *</type>
      <name>close</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>aea81a263f231930c5b9e7213b92b1d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextClose *</type>
      <name>spare1</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a96977f916c2574cee8a8fe9e2b479d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextClose *</type>
      <name>spare2</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a8e9d4d08bfc0199d46f475c9c9f5372d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UTextClose *</type>
      <name>spare3</name>
      <anchorfile>structUTextFuncs.html</anchorfile>
      <anchor>a7e395e53263ec5d8f0d30fca4343959d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UTransPosition</name>
    <filename>structUTransPosition.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>contextStart</name>
      <anchorfile>structUTransPosition.html</anchorfile>
      <anchor>ac0b101b915a80d9cad00974c66e28c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>contextLimit</name>
      <anchorfile>structUTransPosition.html</anchorfile>
      <anchor>a78d09b71320d0b9a1e7720bda8420372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>start</name>
      <anchorfile>structUTransPosition.html</anchorfile>
      <anchor>a26113cfb9aa6fd5457e6e9e095f0fc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>limit</name>
      <anchorfile>structUTransPosition.html</anchorfile>
      <anchor>ace64783d9d1016f2960cda02b30dbd03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueRuns</name>
    <filename>classValueRuns.html</filename>
    <base>RunArray</base>
    <member kind="function">
      <type></type>
      <name>ValueRuns</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>a8f584dddcce036fa85e7f8280913b712</anchor>
      <arglist>(const le_int32 *values, const le_int32 *limits, le_int32 count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueRuns</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>a589c53a2af3fd559b333e70a0a89cde8</anchor>
      <arglist>(le_int32 initialCapacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueRuns</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>a4215abc5599e2315b20d0c08ed904e1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>getValue</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>a809780484ecd787f9acd179f51e1355a</anchor>
      <arglist>(le_int32 run) const </arglist>
    </member>
    <member kind="function">
      <type>le_int32</type>
      <name>add</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>ae7a118f5861bb27220b14b64bddff53c</anchor>
      <arglist>(le_int32 value, le_int32 limit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>a67df1e43e2f102e33ec94af3729e939e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>aabeaef6897245191ee77d30ed6765928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>ac19d6e6dbba7e66516bf2451e95ef8fd</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>grow</name>
      <anchorfile>classValueRuns.html</anchorfile>
      <anchor>ab72ad12ee037660be28f3ab785a4a7c7</anchor>
      <arglist>(le_int32 capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VTimeZone</name>
    <filename>classVTimeZone.html</filename>
    <base>BasicTimeZone</base>
    <member kind="function">
      <type></type>
      <name>VTimeZone</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>ac754aaab7bfc9f96055bcf341926ffa1</anchor>
      <arglist>(const VTimeZone &amp;source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VTimeZone</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>ab398f15393e99fb7b2912525a11368b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VTimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>af33d211996542c4b2c75739782eeb1d3</anchor>
      <arglist>(const VTimeZone &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator==</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a4ee7baef4334977ebf1d0aa12a00192c</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>operator!=</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a62e885484f8dd5c8edb447871127942c</anchor>
      <arglist>(const TimeZone &amp;that) const </arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getTZURL</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a69c9f3c60644facdd253200164e4d46f</anchor>
      <arglist>(UnicodeString &amp;url) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTZURL</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a6240bd419c2f590ccc328e44930749ca</anchor>
      <arglist>(const UnicodeString &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>UBool</type>
      <name>getLastModified</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a8e2d3e323cd33d33956a3bf1f4cb780c</anchor>
      <arglist>(UDate &amp;lastModified) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastModified</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a35bac1b74cfc88b04bd71900d0e55267</anchor>
      <arglist>(UDate lastModified)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>af7247b3936846694d5d091e4427ac495</anchor>
      <arglist>(UnicodeString &amp;result, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>abee6c92b4a6cdac0662f3ba0c032cce7</anchor>
      <arglist>(UDate start, UnicodeString &amp;result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeSimple</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a659ce9377c8db54cceeb31cb7b180d12</anchor>
      <arglist>(UDate time, UnicodeString &amp;result, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TimeZone *</type>
      <name>clone</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a40e91e446951d474b8ff1725595b928b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>abd71e43990bc424c546fb6b5534cf82f</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getOffset</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a6a33bbc3a3339c555e0511d92bf6b395</anchor>
      <arglist>(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, int32_t monthLength, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOffset</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a44a1c1dda6e7c29e01074d477b5f71ce</anchor>
      <arglist>(UDate date, UBool local, int32_t &amp;rawOffset, int32_t &amp;dstOffset, UErrorCode &amp;ec) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRawOffset</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>afa8130b51030a7e26544f19f75800efe</anchor>
      <arglist>(int32_t offsetMillis)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRawOffset</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>ac437b6ff22a913b438eb7e5524ac85d2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>useDaylightTime</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a126204d8b7d2896e96af0a222a30ced6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>inDaylightTime</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a90281516dfe7f0109aac039b84297fcf</anchor>
      <arglist>(UDate date, UErrorCode &amp;status) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>hasSameRules</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a0fcc750b49a5b5a1d8a8b8cfc496ab40</anchor>
      <arglist>(const TimeZone &amp;other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getNextTransition</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a1febfcc37e128ecef53b412b1803f7db</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UBool</type>
      <name>getPreviousTransition</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a57eb8c99b8000c703d616dd5f10c0137</anchor>
      <arglist>(UDate base, UBool inclusive, TimeZoneTransition &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>countTransitionRules</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a5ae86c6e4b5f44db7dc03a8b1f02a304</anchor>
      <arglist>(UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTimeZoneRules</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a01f1b6281a0d9782c5771c44f7ba29ac</anchor>
      <arglist>(const InitialTimeZoneRule *&amp;initial, const TimeZoneRule *trsrules[], int32_t &amp;trscount, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UClassID</type>
      <name>getDynamicClassID</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>afb557847cfabc8917e9c41cccab3e511</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VTimeZone *</type>
      <name>createVTimeZoneByID</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>ae047d3aadb3d4660126b47dad35d0b25</anchor>
      <arglist>(const UnicodeString &amp;ID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VTimeZone *</type>
      <name>createVTimeZoneFromBasicTimeZone</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a4dd680bc1c82308e20b349db94f334c5</anchor>
      <arglist>(const BasicTimeZone &amp;basicTZ, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VTimeZone *</type>
      <name>createVTimeZone</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>a64fae334f6b145c317a4c63df12cd010</anchor>
      <arglist>(const UnicodeString &amp;vtzdata, UErrorCode &amp;status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UClassID</type>
      <name>getStaticClassID</name>
      <anchorfile>classVTimeZone.html</anchorfile>
      <anchor>af96d49fd836571d738ea1e401aa1be51</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
</tagfile>
