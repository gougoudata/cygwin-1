%%
%% This is file `cisym.mf',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% circ.dtx  (with options: `csysym')
%% CIRC is a LaTeX package to typeset circuit and optics diagrams.
%% Copyright (C) 1997,1998,2003  Sebastian Tannert and Andreas Tille
%% 
%%   This program is free software; you can redistribute it and/or modify
%%   it under the terms of the GNU General Public License as published by
%%   the Free Software Foundation; either version 2 of the License, or
%%   (at your option) any later version.
%% 
%%   This program is distributed in the hope that it will be useful,
%%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%   GNU General Public License for more details.
%% 
%%   You should have received a copy of the GNU General Public License
%%   along with this program; if not, write to the Free Software
%%   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%% 
%% For error reports concerning UNCHANGED versions of this file no
%% more than one year old, see CIRC.DVI after installation.
%% If installation fails search thru this file for 'bug'.
input csym;
designsize:=.5lLE#;

def eqtriangle(expr l)=
  x1=x2=x0=x3-l;
  y3=y0;
  z1-z2=(z3-z2) rotated 60;
enddef;

def sinus(expr A, k, s) =
  j:=0;
  for i:=0 step s until 360:
    z[j]=(k*i,A*sind(i));
    j:=j+1;
  endfor
  draw for i:=0 upto floor(360/s)-1: z[i].. endfor z[floor(360/s)];
enddef;

def disarrow =
  z0=(0,0);
  x0=x1=x2;
  y1-y2=darr_ht;
  .5[z1,z2]=z0;
  y0=y3;
  x3-x0=darr_lt;
  pickup pensquare scaled normalline;
  draw z0--z3;
  draw z1--z2;
  triangle(z0,darr_rad,darr_phi,0);
enddef;

def trigger =
  z0=(0,0);
  x1=x2; x3=x4;
  y2=y4=y5; y0=y1=y3;
  x3-x1=.17sym;
  x1-x0=x5-x4=.3sym;
  y2-y1=sym;
enddef;

def impuls =
  z0=(0,0);
  y0=y1=y4=y5=y7=y8=y9;
  x1-x0=x3-x2=x5-x4=x8-x7=.6sym;
  x9-x0=x6-x2=.2sym;
  x1=x2; x3=x4;  x6=x7;
  y2-y1=y3-y4=y6-y7=sym;
  x10=x0; y11=y10=y2;
  x11=x8;
enddef;

 "Rechteckimpuls";
   beginchar(1,1.9sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw z0--z1--z2--z3--z4--z5;
   endchar;

 "positive Flanke";
   beginchar(2,1.3sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw z0--z1--z2--z3;
   endchar;

 "negative Flanke";
   beginchar(3,1.3sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw (z2--z3--z4--z5) shifted (x0-x1,0);
   endchar;

 "Nadelimpuls";
   beginchar(4,1.5sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw (z0--z1--z2--z6--z7--z8);
   endchar;

  "inverser Nadelimpuls";
   beginchar(12,1.5sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw (z10--z2--z1--z7--z6--z11);
   endchar;

 "Rechteckspannung";
   beginchar(5,3.1sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw z0--z1--z2--z3--z4--z5;
     draw (z0--z1--z2--z3--z4--z5) shifted z4;
   endchar;

 "Rechteckimpulse";
   beginchar(13,2.6sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw z0--z1--z2--z6--z7--z8;
     draw (z0--z1--z2--z6--z7--z8) shifted z4;

   endchar;

 "S"&ditto&"agezahn";
   beginchar(6,1.9sym#,sym#,0);
     impuls
     pickup pensquare scaled normalline;
     draw z0--z9--z3--z4--z5;
   endchar;

 "Trigger";
   beginchar(7,.87sym#,sym#,0);
     trigger
     pickup pensquare scaled normalline;
     draw z0--z1--z2--z5;
     draw z1--z3--z4;
   endchar;

 "Abstandsst"&ditto&"uck";
 fourchars(8)(disarrow)(z0)(.5darr_ht#,darr_lt#,.5darr_ht#);

"sinus wave";
beginchar(16,1.6sym#,9/35*sym#,9/35*sym#);
  pickup pencircle scaled normalline;
  sinus(9/35*sym,1.6sym/360,45);
endchar;

"variable sinus wave";
beginchar(17,1.6sym#,9/35*sym#,9/35*sym#);
  pickup pencircle scaled normalline;
  sinus(9/35*sym,1.6sym/360,45);
  fillarrow((.8*sym,0),20/35*sym,15/35*sym,45,15/35*sym,15)();
endchar;

"symbol of amplifier";
beginchar(24,cosd(30)*1.9sym#,.95sym#,.95sym#);
  z0=(0,0);
  eqtriangle(1.9sym);
  pickup pencircle scaled normalline;
  draw z1--z2--z3--cycle;
endchar;

"symbol of buffer";
beginchar(25,cosd(30)*1sym#,.5sym#,.5sym#);
  z0=(0,0);
  eqtriangle(1sym);
  pickup pencircle scaled normalline;
  draw z1--z2--z3--cycle;
endchar;

bye;
%% 
%%
%% End of file `cisym.mf'.
